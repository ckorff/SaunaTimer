
/Users/ckorff/Documents/particle/SaunaTimer/SaunaTimer/target/SaunaTimer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008658  080a0018  080a0018  00010018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.exidx    00000008  080a8670  080a8670  00018670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .backup       00000004  40024000  080a8678  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000174  20000300  080a867c  00030300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000007e8  20000478  20000478  00040478  2**3
                  ALLOC
  6 .module_info_suffix 00000028  080a87f0  080a87f0  000387f0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a8818  080a8818  00038818  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000ce54f  00000000  00000000  0003881c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00012a46  00000000  00000000  00106d6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001820f  00000000  00000000  001197b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000026a8  00000000  00000000  001319c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003c48  00000000  00000000  00134068  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00029f5b  00000000  00000000  00137cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002b5d7  00000000  00000000  00161c0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a3e9d  00000000  00000000  0018d1e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000d574  00000000  00000000  00231080  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0018 <user_part_module>:
 80a0018:	ec 7a 0a 08                                         .z..

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f004 fe43 	bl	80a4cb8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f004 fe48 	bl	80a4cce <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000300 	.word	0x20000300
 80a0048:	080a867c 	.word	0x080a867c
 80a004c:	20000474 	.word	0x20000474
 80a0050:	20000478 	.word	0x20000478
 80a0054:	20000c60 	.word	0x20000c60
 80a0058:	20000c60 	.word	0x20000c60

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f003 f96f 	bl	80a3340 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a861c 	.word	0x080a861c
 80a0084:	080a8664 	.word	0x080a8664

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 bf82 	b.w	80a0f90 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f001 f84b 	bl	80a1128 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f003 b915 	b.w	80a32c4 <_post_loop>

080a009a <_Znwj>:
 80a009a:	f001 bded 	b.w	80a1c78 <malloc>

080a009e <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
 80a009e:	f001 bdeb 	b.w	80a1c78 <malloc>

080a00a2 <_ZdlPv>:
 80a00a2:	f001 bdf1 	b.w	80a1c88 <free>

080a00a6 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
 80a00a6:	f001 bdef 	b.w	80a1c88 <free>

080a00aa <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00aa:	7800      	ldrb	r0, [r0, #0]
 80a00ac:	fab0 f080 	clz	r0, r0
 80a00b0:	0940      	lsrs	r0, r0, #5
 80a00b2:	4770      	bx	lr

080a00b4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00b4:	2301      	movs	r3, #1
 80a00b6:	7003      	strb	r3, [r0, #0]
 80a00b8:	4770      	bx	lr

080a00ba <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 80a00ba:	6803      	ldr	r3, [r0, #0]
 80a00bc:	b2c9      	uxtb	r1, r1
 80a00be:	689b      	ldr	r3, [r3, #8]
 80a00c0:	4718      	bx	r3

080a00c2 <_ZN19LED_7Segment_4DigitC1Eh>:
// Log message to cloud, message is a printf-formatted string

LED_7Segment_4Digit::LED_7Segment_4Digit(uint8_t led_Addr)
{
  _Addr = led_Addr;
  _Brightness = 0;
 80a00c2:	2200      	movs	r2, #0
 80a00c4:	7042      	strb	r2, [r0, #1]
  _ControlByte = 0b00000111;
 80a00c6:	2207      	movs	r2, #7
// these are the byte representations of pins required to display each digit 0~9 then A~F
// Log message to cloud, message is a printf-formatted string

LED_7Segment_4Digit::LED_7Segment_4Digit(uint8_t led_Addr)
{
  _Addr = led_Addr;
 80a00c8:	7001      	strb	r1, [r0, #0]
  _Brightness = 0;
  _ControlByte = 0b00000111;
 80a00ca:	7082      	strb	r2, [r0, #2]
}
 80a00cc:	4770      	bx	lr

080a00ce <_ZN19LED_7Segment_4Digit4initEv>:

void LED_7Segment_4Digit::init()
// turns on dynamic mode and adjusts segment current to 12mA
{
 80a00ce:	b510      	push	{r4, lr}
 80a00d0:	4604      	mov	r4, r0
 Wire.beginTransmission(_Addr);
 80a00d2:	f003 f961 	bl	80a3398 <_Z19__fetch_global_Wirev>
 80a00d6:	7821      	ldrb	r1, [r4, #0]
 80a00d8:	f002 f928 	bl	80a232c <_ZN7TwoWire17beginTransmissionEh>
 Wire.write(0b00000000); // this is the instruction byte. Zero means the next byte is the control byte
 80a00dc:	f003 f95c 	bl	80a3398 <_Z19__fetch_global_Wirev>
 80a00e0:	2100      	movs	r1, #0
 80a00e2:	f7ff ffea 	bl	80a00ba <_ZN7TwoWire5writeEi>
 Wire.write(_ControlByte); // control byte (dynamic mode on, digits 1+3 on, digits 2+4 on, 12mA segment current
 80a00e6:	f003 f957 	bl	80a3398 <_Z19__fetch_global_Wirev>
 80a00ea:	6803      	ldr	r3, [r0, #0]
 80a00ec:	78a1      	ldrb	r1, [r4, #2]
 80a00ee:	689b      	ldr	r3, [r3, #8]
 80a00f0:	4798      	blx	r3
 Wire.endTransmission();
 80a00f2:	f003 f951 	bl	80a3398 <_Z19__fetch_global_Wirev>
}
 80a00f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
// turns on dynamic mode and adjusts segment current to 12mA
{
 Wire.beginTransmission(_Addr);
 Wire.write(0b00000000); // this is the instruction byte. Zero means the next byte is the control byte
 Wire.write(_ControlByte); // control byte (dynamic mode on, digits 1+3 on, digits 2+4 on, 12mA segment current
 Wire.endTransmission();
 80a00fa:	f002 b922 	b.w	80a2342 <_ZN7TwoWire15endTransmissionEv>
	...

080a0100 <_ZN19LED_7Segment_4Digit5printEhhhh>:
  }
  clear();
}

void LED_7Segment_4Digit::print(uint8_t digit0, uint8_t digit1, uint8_t digit2, uint8_t digit3)
{
 80a0100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0104:	4604      	mov	r4, r0
 80a0106:	4688      	mov	r8, r1
 80a0108:	4617      	mov	r7, r2
 80a010a:	461e      	mov	r6, r3
 80a010c:	f89d 5018 	ldrb.w	r5, [sp, #24]
  Wire.beginTransmission(_Addr);
 80a0110:	f003 f942 	bl	80a3398 <_Z19__fetch_global_Wirev>
 80a0114:	7821      	ldrb	r1, [r4, #0]
  Wire.write(1); // instruction byte - first digit to control is 1 (right hand side)
  Wire.write(digits[digit0]); // digit 1 (RHS)
 80a0116:	4c13      	ldr	r4, [pc, #76]	; (80a0164 <_ZN19LED_7Segment_4Digit5printEhhhh+0x64>)
  clear();
}

void LED_7Segment_4Digit::print(uint8_t digit0, uint8_t digit1, uint8_t digit2, uint8_t digit3)
{
  Wire.beginTransmission(_Addr);
 80a0118:	f002 f908 	bl	80a232c <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(1); // instruction byte - first digit to control is 1 (right hand side)
 80a011c:	f003 f93c 	bl	80a3398 <_Z19__fetch_global_Wirev>
 80a0120:	2101      	movs	r1, #1
 80a0122:	f7ff ffca 	bl	80a00ba <_ZN7TwoWire5writeEi>
  Wire.write(digits[digit0]); // digit 1 (RHS)
 80a0126:	f003 f937 	bl	80a3398 <_Z19__fetch_global_Wirev>
 80a012a:	f854 1028 	ldr.w	r1, [r4, r8, lsl #2]
 80a012e:	f7ff ffc4 	bl	80a00ba <_ZN7TwoWire5writeEi>
  Wire.write(digits[digit1]); // digit 2
 80a0132:	f003 f931 	bl	80a3398 <_Z19__fetch_global_Wirev>
 80a0136:	f854 1027 	ldr.w	r1, [r4, r7, lsl #2]
 80a013a:	f7ff ffbe 	bl	80a00ba <_ZN7TwoWire5writeEi>
  Wire.write(digits[digit2]); // digit 3
 80a013e:	f003 f92b 	bl	80a3398 <_Z19__fetch_global_Wirev>
 80a0142:	f854 1026 	ldr.w	r1, [r4, r6, lsl #2]
 80a0146:	f7ff ffb8 	bl	80a00ba <_ZN7TwoWire5writeEi>
  Wire.write(digits[digit3]); // digit 4 (LHS)
 80a014a:	f003 f925 	bl	80a3398 <_Z19__fetch_global_Wirev>
 80a014e:	f854 1025 	ldr.w	r1, [r4, r5, lsl #2]
 80a0152:	f7ff ffb2 	bl	80a00ba <_ZN7TwoWire5writeEi>
  Wire.endTransmission();
 80a0156:	f003 f91f 	bl	80a3398 <_Z19__fetch_global_Wirev>
}
 80a015a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  Wire.write(1); // instruction byte - first digit to control is 1 (right hand side)
  Wire.write(digits[digit0]); // digit 1 (RHS)
  Wire.write(digits[digit1]); // digit 2
  Wire.write(digits[digit2]); // digit 3
  Wire.write(digits[digit3]); // digit 4 (LHS)
  Wire.endTransmission();
 80a015e:	f002 b8f0 	b.w	80a2342 <_ZN7TwoWire15endTransmissionEv>
 80a0162:	bf00      	nop
 80a0164:	20000300 	.word	0x20000300

080a0168 <_ZN19LED_7Segment_4Digit13setBrightnessEh>:
}

void LED_7Segment_4Digit::setBrightness(uint8_t newBrightness)
{
  _ControlByte = (_ControlByte & 0b10001111)|(newBrightness << 4);
 80a0168:	7883      	ldrb	r3, [r0, #2]
  _Brightness = newBrightness;
 80a016a:	7041      	strb	r1, [r0, #1]
  Wire.endTransmission();
}

void LED_7Segment_4Digit::setBrightness(uint8_t newBrightness)
{
  _ControlByte = (_ControlByte & 0b10001111)|(newBrightness << 4);
 80a016c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80a0170:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 80a0174:	7083      	strb	r3, [r0, #2]
  _Brightness = newBrightness;
  init();
 80a0176:	f7ff bfaa 	b.w	80a00ce <_ZN19LED_7Segment_4Digit4initEv>

080a017a <_ZN19LED_7Segment_4Digit18decreaseBrightnessEv>:
  }
}

void LED_7Segment_4Digit::decreaseBrightness()
{
  if (_Brightness > 0)
 80a017a:	7843      	ldrb	r3, [r0, #1]
 80a017c:	b153      	cbz	r3, 80a0194 <_ZN19LED_7Segment_4Digit18decreaseBrightnessEv+0x1a>
  {
    _Brightness--;
    _ControlByte = (_ControlByte & 0b10001111)|(_Brightness << 4);
 80a017e:	7882      	ldrb	r2, [r0, #2]

void LED_7Segment_4Digit::decreaseBrightness()
{
  if (_Brightness > 0)
  {
    _Brightness--;
 80a0180:	3b01      	subs	r3, #1
 80a0182:	b2db      	uxtb	r3, r3
    _ControlByte = (_ControlByte & 0b10001111)|(_Brightness << 4);
 80a0184:	f022 0270 	bic.w	r2, r2, #112	; 0x70

void LED_7Segment_4Digit::decreaseBrightness()
{
  if (_Brightness > 0)
  {
    _Brightness--;
 80a0188:	7043      	strb	r3, [r0, #1]
    _ControlByte = (_ControlByte & 0b10001111)|(_Brightness << 4);
 80a018a:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
 80a018e:	7083      	strb	r3, [r0, #2]
    init();
 80a0190:	f7ff bf9d 	b.w	80a00ce <_ZN19LED_7Segment_4Digit4initEv>
 80a0194:	4770      	bx	lr

080a0196 <_ZN19LED_7Segment_4Digit5clearEv>:
  }
}

void LED_7Segment_4Digit::clear()
// clears all digits
{
 80a0196:	b510      	push	{r4, lr}
 80a0198:	4604      	mov	r4, r0
 Wire.beginTransmission(_Addr);
 80a019a:	f003 f8fd 	bl	80a3398 <_Z19__fetch_global_Wirev>
 80a019e:	7821      	ldrb	r1, [r4, #0]
 80a01a0:	f002 f8c4 	bl	80a232c <_ZN7TwoWire17beginTransmissionEh>
 Wire.write(1); // instruction byte - first digit to control is 1 (right hand side)
 80a01a4:	f003 f8f8 	bl	80a3398 <_Z19__fetch_global_Wirev>
 80a01a8:	2101      	movs	r1, #1
 80a01aa:	f7ff ff86 	bl	80a00ba <_ZN7TwoWire5writeEi>
 Wire.write(0); // digit 1 (RHS)
 80a01ae:	f003 f8f3 	bl	80a3398 <_Z19__fetch_global_Wirev>
 80a01b2:	2100      	movs	r1, #0
 80a01b4:	f7ff ff81 	bl	80a00ba <_ZN7TwoWire5writeEi>
 Wire.write(0); // digit 2
 80a01b8:	f003 f8ee 	bl	80a3398 <_Z19__fetch_global_Wirev>
 80a01bc:	2100      	movs	r1, #0
 80a01be:	f7ff ff7c 	bl	80a00ba <_ZN7TwoWire5writeEi>
 Wire.write(0); // digit 3
 80a01c2:	f003 f8e9 	bl	80a3398 <_Z19__fetch_global_Wirev>
 80a01c6:	2100      	movs	r1, #0
 80a01c8:	f7ff ff77 	bl	80a00ba <_ZN7TwoWire5writeEi>
 Wire.write(0); // digit 4 (LHS)
 80a01cc:	f003 f8e4 	bl	80a3398 <_Z19__fetch_global_Wirev>
 80a01d0:	2100      	movs	r1, #0
 80a01d2:	f7ff ff72 	bl	80a00ba <_ZN7TwoWire5writeEi>
 Wire.endTransmission();
 80a01d6:	f003 f8df 	bl	80a3398 <_Z19__fetch_global_Wirev>
}
 80a01da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 Wire.write(1); // instruction byte - first digit to control is 1 (right hand side)
 Wire.write(0); // digit 1 (RHS)
 Wire.write(0); // digit 2
 Wire.write(0); // digit 3
 Wire.write(0); // digit 4 (LHS)
 Wire.endTransmission();
 80a01de:	f002 b8b0 	b.w	80a2342 <_ZN7TwoWire15endTransmissionEv>
	...

080a01e4 <_ZN19LED_7Segment_4Digit4testEv>:
}


void LED_7Segment_4Digit::test()
// show all digits 0~9, A~F on all digits of display
{
 80a01e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    for (int i=0; i <= 7; i++)
    {
      Wire.beginTransmission(_Addr);
      Wire.write(1); // instruction byte - first digit to control is 1 (right hand side)
      Wire.write(digits[8])+128; // digit 1 (RHS)
 80a01e8:	4e31      	ldr	r6, [pc, #196]	; (80a02b0 <_ZN19LED_7Segment_4Digit4testEv+0xcc>)
}


void LED_7Segment_4Digit::test()
// show all digits 0~9, A~F on all digits of display
{
 80a01ea:	4605      	mov	r5, r0
 80a01ec:	4637      	mov	r7, r6
 80a01ee:	f04f 0805 	mov.w	r8, #5
 80a01f2:	2400      	movs	r4, #0
  for (int z=0; z <= 4; z++)
  {
    for (int i=0; i <= 7; i++)
    {
      Wire.beginTransmission(_Addr);
 80a01f4:	f003 f8d0 	bl	80a3398 <_Z19__fetch_global_Wirev>
 80a01f8:	7829      	ldrb	r1, [r5, #0]
 80a01fa:	f002 f897 	bl	80a232c <_ZN7TwoWire17beginTransmissionEh>
      Wire.write(1); // instruction byte - first digit to control is 1 (right hand side)
 80a01fe:	f003 f8cb 	bl	80a3398 <_Z19__fetch_global_Wirev>
 80a0202:	2101      	movs	r1, #1
 80a0204:	f7ff ff59 	bl	80a00ba <_ZN7TwoWire5writeEi>
      Wire.write(digits[8])+128; // digit 1 (RHS)
 80a0208:	f003 f8c6 	bl	80a3398 <_Z19__fetch_global_Wirev>
 80a020c:	6a31      	ldr	r1, [r6, #32]
 80a020e:	f7ff ff54 	bl	80a00ba <_ZN7TwoWire5writeEi>
      Wire.write(digits[8])+128; // digit 2
 80a0212:	f003 f8c1 	bl	80a3398 <_Z19__fetch_global_Wirev>
 80a0216:	6a31      	ldr	r1, [r6, #32]
 80a0218:	f7ff ff4f 	bl	80a00ba <_ZN7TwoWire5writeEi>
      Wire.write(digits[8])+128; // digit 3
 80a021c:	f003 f8bc 	bl	80a3398 <_Z19__fetch_global_Wirev>
 80a0220:	6a31      	ldr	r1, [r6, #32]
 80a0222:	f7ff ff4a 	bl	80a00ba <_ZN7TwoWire5writeEi>
      Wire.write(digits[8])+128; // digit 4 (LHS)
 80a0226:	f003 f8b7 	bl	80a3398 <_Z19__fetch_global_Wirev>
 80a022a:	6a31      	ldr	r1, [r6, #32]
 80a022c:	f7ff ff45 	bl	80a00ba <_ZN7TwoWire5writeEi>
      Wire.endTransmission();
 80a0230:	f003 f8b2 	bl	80a3398 <_Z19__fetch_global_Wirev>
 80a0234:	f002 f885 	bl	80a2342 <_ZN7TwoWire15endTransmissionEv>
      delay(20);
 80a0238:	2014      	movs	r0, #20
 80a023a:	f001 fd6d 	bl	80a1d18 <delay>
      setBrightness(i);
 80a023e:	b2e1      	uxtb	r1, r4
 80a0240:	4628      	mov	r0, r5
void LED_7Segment_4Digit::test()
// show all digits 0~9, A~F on all digits of display
{
  for (int z=0; z <= 4; z++)
  {
    for (int i=0; i <= 7; i++)
 80a0242:	3401      	adds	r4, #1
      Wire.write(digits[8])+128; // digit 2
      Wire.write(digits[8])+128; // digit 3
      Wire.write(digits[8])+128; // digit 4 (LHS)
      Wire.endTransmission();
      delay(20);
      setBrightness(i);
 80a0244:	f7ff ff90 	bl	80a0168 <_ZN19LED_7Segment_4Digit13setBrightnessEh>
void LED_7Segment_4Digit::test()
// show all digits 0~9, A~F on all digits of display
{
  for (int z=0; z <= 4; z++)
  {
    for (int i=0; i <= 7; i++)
 80a0248:	2c08      	cmp	r4, #8
 80a024a:	d1d3      	bne.n	80a01f4 <_ZN19LED_7Segment_4Digit4testEv+0x10>
      setBrightness(i);
    }

    for (int i=0; i <= 7; i++)
    {
      Wire.beginTransmission(_Addr);
 80a024c:	f003 f8a4 	bl	80a3398 <_Z19__fetch_global_Wirev>
 80a0250:	7829      	ldrb	r1, [r5, #0]
 80a0252:	f002 f86b 	bl	80a232c <_ZN7TwoWire17beginTransmissionEh>
      Wire.write(1); // instruction byte - first digit to control is 1 (right hand side)
 80a0256:	f003 f89f 	bl	80a3398 <_Z19__fetch_global_Wirev>
 80a025a:	2101      	movs	r1, #1
 80a025c:	f7ff ff2d 	bl	80a00ba <_ZN7TwoWire5writeEi>
      Wire.write(digits[8])+128; // digit 1 (RHS)
 80a0260:	f003 f89a 	bl	80a3398 <_Z19__fetch_global_Wirev>
 80a0264:	6a39      	ldr	r1, [r7, #32]
 80a0266:	f7ff ff28 	bl	80a00ba <_ZN7TwoWire5writeEi>
      Wire.write(digits[8])+128; // digit 2
 80a026a:	f003 f895 	bl	80a3398 <_Z19__fetch_global_Wirev>
 80a026e:	6a39      	ldr	r1, [r7, #32]
 80a0270:	f7ff ff23 	bl	80a00ba <_ZN7TwoWire5writeEi>
      Wire.write(digits[8])+128; // digit 3
 80a0274:	f003 f890 	bl	80a3398 <_Z19__fetch_global_Wirev>
 80a0278:	6a39      	ldr	r1, [r7, #32]
 80a027a:	f7ff ff1e 	bl	80a00ba <_ZN7TwoWire5writeEi>
      Wire.write(digits[8])+128; // digit 4 (LHS)
 80a027e:	f003 f88b 	bl	80a3398 <_Z19__fetch_global_Wirev>
 80a0282:	6a39      	ldr	r1, [r7, #32]
 80a0284:	f7ff ff19 	bl	80a00ba <_ZN7TwoWire5writeEi>
      Wire.endTransmission();
 80a0288:	f003 f886 	bl	80a3398 <_Z19__fetch_global_Wirev>
 80a028c:	f002 f859 	bl	80a2342 <_ZN7TwoWire15endTransmissionEv>
      delay(20);
 80a0290:	2014      	movs	r0, #20
 80a0292:	f001 fd41 	bl	80a1d18 <delay>
      decreaseBrightness();
 80a0296:	4628      	mov	r0, r5
 80a0298:	f7ff ff6f 	bl	80a017a <_ZN19LED_7Segment_4Digit18decreaseBrightnessEv>
      Wire.endTransmission();
      delay(20);
      setBrightness(i);
    }

    for (int i=0; i <= 7; i++)
 80a029c:	3c01      	subs	r4, #1
 80a029e:	d1d5      	bne.n	80a024c <_ZN19LED_7Segment_4Digit4testEv+0x68>


void LED_7Segment_4Digit::test()
// show all digits 0~9, A~F on all digits of display
{
  for (int z=0; z <= 4; z++)
 80a02a0:	f1b8 0801 	subs.w	r8, r8, #1
 80a02a4:	d1a5      	bne.n	80a01f2 <_ZN19LED_7Segment_4Digit4testEv+0xe>
      Wire.endTransmission();
      delay(20);
      decreaseBrightness();
    }
  }
  clear();
 80a02a6:	4628      	mov	r0, r5
}
 80a02a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      Wire.endTransmission();
      delay(20);
      decreaseBrightness();
    }
  }
  clear();
 80a02ac:	f7ff bf73 	b.w	80a0196 <_ZN19LED_7Segment_4Digit5clearEv>
 80a02b0:	20000300 	.word	0x20000300

080a02b4 <_GLOBAL__sub_I_saa1064>:
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a02b4:	f001 bb32 	b.w	80a191c <HAL_Pin_Map>

080a02b8 <_ZN17LiquidCrystal_I2CD1Ev>:

//#define En B00000100  // Enable bit
//#define Rw B00000010  // Read/Write bit
//#define Rs B00000001  // Register select bit

class LiquidCrystal_I2C : public Print {
 80a02b8:	4770      	bx	lr

080a02ba <_ZN17LiquidCrystal_I2CD0Ev>:
 80a02ba:	b510      	push	{r4, lr}
 80a02bc:	4604      	mov	r4, r0
 80a02be:	f7ff fef0 	bl	80a00a2 <_ZdlPv>
 80a02c2:	4620      	mov	r0, r4
 80a02c4:	bd10      	pop	{r4, pc}
	...

080a02c8 <_ZN17LiquidCrystal_I2CC1Ehhh>:
//#include "application.h"

#include "LiquidCrystal_I2C_Spark.h"


LiquidCrystal_I2C::LiquidCrystal_I2C(uint8_t lcd_Addr,uint8_t lcd_cols,uint8_t lcd_rows)
 80a02c8:	b570      	push	{r4, r5, r6, lr}
 80a02ca:	4e04      	ldr	r6, [pc, #16]	; (80a02dc <_ZN17LiquidCrystal_I2CC1Ehhh+0x14>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a02cc:	2500      	movs	r5, #0
 80a02ce:	6045      	str	r5, [r0, #4]
 80a02d0:	6006      	str	r6, [r0, #0]
{
  _Addr = lcd_Addr;
 80a02d2:	7201      	strb	r1, [r0, #8]
  _cols = lcd_cols;
 80a02d4:	7342      	strb	r2, [r0, #13]
  _rows = lcd_rows;
 80a02d6:	7383      	strb	r3, [r0, #14]
  _backlightval = LCD_NOBACKLIGHT;
 80a02d8:	73c5      	strb	r5, [r0, #15]
}
 80a02da:	bd70      	pop	{r4, r5, r6, pc}
 80a02dc:	080a7b08 	.word	0x080a7b08

080a02e0 <_ZN17LiquidCrystal_I2C13expanderWriteEh>:
void LiquidCrystal_I2C::write4bits(uint8_t value) {
        expanderWrite(value);
        pulseEnable(value);
}

void LiquidCrystal_I2C::expanderWrite(uint8_t _data){
 80a02e0:	b538      	push	{r3, r4, r5, lr}
 80a02e2:	4604      	mov	r4, r0
 80a02e4:	460d      	mov	r5, r1
        Wire.beginTransmission(_Addr);
 80a02e6:	f003 f857 	bl	80a3398 <_Z19__fetch_global_Wirev>
 80a02ea:	7a21      	ldrb	r1, [r4, #8]
 80a02ec:	f002 f81e 	bl	80a232c <_ZN7TwoWire17beginTransmissionEh>
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80a02f0:	2002      	movs	r0, #2
 80a02f2:	f001 faf3 	bl	80a18dc <HAL_Delay_Microseconds>
        delayMicroseconds(2);
        Wire.write((int)(_data) | _backlightval);
 80a02f6:	f003 f84f 	bl	80a3398 <_Z19__fetch_global_Wirev>
 80a02fa:	7be1      	ldrb	r1, [r4, #15]
 80a02fc:	6803      	ldr	r3, [r0, #0]
 80a02fe:	4329      	orrs	r1, r5
 80a0300:	689b      	ldr	r3, [r3, #8]
 80a0302:	4798      	blx	r3
 80a0304:	2002      	movs	r0, #2
 80a0306:	f001 fae9 	bl	80a18dc <HAL_Delay_Microseconds>
        delayMicroseconds(2);
        Wire.endTransmission();
 80a030a:	f003 f845 	bl	80a3398 <_Z19__fetch_global_Wirev>
 80a030e:	f002 f818 	bl	80a2342 <_ZN7TwoWire15endTransmissionEv>
        delayMicroseconds(2);
        }
 80a0312:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a0316:	2002      	movs	r0, #2
 80a0318:	f001 bae0 	b.w	80a18dc <HAL_Delay_Microseconds>

080a031c <_ZN17LiquidCrystal_I2C9backlightEv>:
        _backlightval=LCD_NOBACKLIGHT;
        expanderWrite(0);
}

void LiquidCrystal_I2C::backlight(void) {
        _backlightval=LCD_BACKLIGHT;
 80a031c:	2308      	movs	r3, #8
 80a031e:	73c3      	strb	r3, [r0, #15]
        expanderWrite(0);
 80a0320:	2100      	movs	r1, #0
 80a0322:	f7ff bfdd 	b.w	80a02e0 <_ZN17LiquidCrystal_I2C13expanderWriteEh>

080a0326 <_ZN17LiquidCrystal_I2C11pulseEnableEh>:
        delayMicroseconds(2);
        Wire.endTransmission();
        delayMicroseconds(2);
        }

void LiquidCrystal_I2C::pulseEnable(uint8_t _data){
 80a0326:	b538      	push	{r3, r4, r5, lr}
 80a0328:	4605      	mov	r5, r0
 80a032a:	460c      	mov	r4, r1
        expanderWrite(_data | (1<<2));  // En high
 80a032c:	f041 0104 	orr.w	r1, r1, #4
 80a0330:	f7ff ffd6 	bl	80a02e0 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
 80a0334:	2001      	movs	r0, #1
 80a0336:	f001 fad1 	bl	80a18dc <HAL_Delay_Microseconds>
        delayMicroseconds(1);           // enable pulse must be >450ns

        expanderWrite(_data & ~(1<<2)); // En low
 80a033a:	4628      	mov	r0, r5
 80a033c:	f004 01fb 	and.w	r1, r4, #251	; 0xfb
 80a0340:	f7ff ffce 	bl	80a02e0 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
        delayMicroseconds(50);          // commands need > 37us to settle
}
 80a0344:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a0348:	2032      	movs	r0, #50	; 0x32
 80a034a:	f001 bac7 	b.w	80a18dc <HAL_Delay_Microseconds>

080a034e <_ZN17LiquidCrystal_I2C10write4bitsEh>:
        uint8_t lownib=(value<<4)&0xf0;
       write4bits((highnib)|mode);
        write4bits((lownib)|mode);
}

void LiquidCrystal_I2C::write4bits(uint8_t value) {
 80a034e:	b538      	push	{r3, r4, r5, lr}
 80a0350:	4604      	mov	r4, r0
 80a0352:	460d      	mov	r5, r1
        expanderWrite(value);
 80a0354:	f7ff ffc4 	bl	80a02e0 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
        pulseEnable(value);
 80a0358:	4629      	mov	r1, r5
 80a035a:	4620      	mov	r0, r4
}
 80a035c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        write4bits((lownib)|mode);
}

void LiquidCrystal_I2C::write4bits(uint8_t value) {
        expanderWrite(value);
        pulseEnable(value);
 80a0360:	f7ff bfe1 	b.w	80a0326 <_ZN17LiquidCrystal_I2C11pulseEnableEh>

080a0364 <_ZN17LiquidCrystal_I2C4sendEhh>:


/************ low level data pushing commands **********/

// write either command or data
void LiquidCrystal_I2C::send(uint8_t value, uint8_t mode) {
 80a0364:	b570      	push	{r4, r5, r6, lr}
 80a0366:	460d      	mov	r5, r1
 80a0368:	4614      	mov	r4, r2
 80a036a:	4606      	mov	r6, r0
        uint8_t highnib=value&0xf0;
        uint8_t lownib=(value<<4)&0xf0;
       write4bits((highnib)|mode);
 80a036c:	f021 010f 	bic.w	r1, r1, #15
 80a0370:	4311      	orrs	r1, r2
 80a0372:	f7ff ffec 	bl	80a034e <_ZN17LiquidCrystal_I2C10write4bitsEh>
        write4bits((lownib)|mode);
 80a0376:	ea44 1105 	orr.w	r1, r4, r5, lsl #4
 80a037a:	4630      	mov	r0, r6
}
 80a037c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
// write either command or data
void LiquidCrystal_I2C::send(uint8_t value, uint8_t mode) {
        uint8_t highnib=value&0xf0;
        uint8_t lownib=(value<<4)&0xf0;
       write4bits((highnib)|mode);
        write4bits((lownib)|mode);
 80a0380:	b2c9      	uxtb	r1, r1
 80a0382:	f7ff bfe4 	b.w	80a034e <_ZN17LiquidCrystal_I2C10write4bitsEh>

080a0386 <_ZN17LiquidCrystal_I2C5writeEh>:

inline void LiquidCrystal_I2C::command(uint8_t value) {
        send(value, 0);
}

inline size_t LiquidCrystal_I2C::write(uint8_t value) {
 80a0386:	b508      	push	{r3, lr}
        send(value, 1);
 80a0388:	2201      	movs	r2, #1
 80a038a:	f7ff ffeb 	bl	80a0364 <_ZN17LiquidCrystal_I2C4sendEhh>
        return 0;
}
 80a038e:	2000      	movs	r0, #0
 80a0390:	bd08      	pop	{r3, pc}

080a0392 <_ZN17LiquidCrystal_I2C7commandEh>:


/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal_I2C::command(uint8_t value) {
        send(value, 0);
 80a0392:	2200      	movs	r2, #0
 80a0394:	f7ff bfe6 	b.w	80a0364 <_ZN17LiquidCrystal_I2C4sendEhh>

080a0398 <_ZN17LiquidCrystal_I2C5clearEv>:
}



/********** high level commands, for the user! */
void LiquidCrystal_I2C::clear(){
 80a0398:	b508      	push	{r3, lr}
        command(LCD_CLEARDISPLAY);// clear display, set cursor position to zero
 80a039a:	2101      	movs	r1, #1
 80a039c:	f7ff fff9 	bl	80a0392 <_ZN17LiquidCrystal_I2C7commandEh>
        delayMicroseconds(2000);  // this command takes a long time!
}
 80a03a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80a03a4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80a03a8:	f001 ba98 	b.w	80a18dc <HAL_Delay_Microseconds>

080a03ac <_ZN17LiquidCrystal_I2C4homeEv>:

void LiquidCrystal_I2C::home(){
 80a03ac:	b508      	push	{r3, lr}
        command(LCD_RETURNHOME);  // set cursor position to zero
 80a03ae:	2102      	movs	r1, #2
 80a03b0:	f7ff ffef 	bl	80a0392 <_ZN17LiquidCrystal_I2C7commandEh>
        delayMicroseconds(2000);  // this command takes a long time!
}
 80a03b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80a03b8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80a03bc:	f001 ba8e 	b.w	80a18dc <HAL_Delay_Microseconds>

080a03c0 <_ZN17LiquidCrystal_I2C9setCursorEhh>:

void LiquidCrystal_I2C::setCursor(uint8_t col, uint8_t row){
 80a03c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a03c2:	4605      	mov	r5, r0
 80a03c4:	4614      	mov	r4, r2
 80a03c6:	460e      	mov	r6, r1
        int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 80a03c8:	4b0c      	ldr	r3, [pc, #48]	; (80a03fc <_ZN17LiquidCrystal_I2C9setCursorEhh+0x3c>)
 80a03ca:	f10d 0e10 	add.w	lr, sp, #16
 80a03ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80a03d0:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
        if ( row > _numlines ) {
 80a03d4:	7b2b      	ldrb	r3, [r5, #12]
                row = _numlines-1;    // we count rows starting w/0
        }
        command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80a03d6:	4628      	mov	r0, r5
        delayMicroseconds(2000);  // this command takes a long time!
}

void LiquidCrystal_I2C::setCursor(uint8_t col, uint8_t row){
        int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
        if ( row > _numlines ) {
 80a03d8:	42a3      	cmp	r3, r4
                row = _numlines-1;    // we count rows starting w/0
 80a03da:	bf3c      	itt	cc
 80a03dc:	f103 34ff 	addcc.w	r4, r3, #4294967295	; 0xffffffff
 80a03e0:	b2e4      	uxtbcc	r4, r4
        }
        command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80a03e2:	ab04      	add	r3, sp, #16
 80a03e4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80a03e8:	f854 1c10 	ldr.w	r1, [r4, #-16]
 80a03ec:	4431      	add	r1, r6
 80a03ee:	f061 017f 	orn	r1, r1, #127	; 0x7f
 80a03f2:	b2c9      	uxtb	r1, r1
 80a03f4:	f7ff ffcd 	bl	80a0392 <_ZN17LiquidCrystal_I2C7commandEh>
}
 80a03f8:	b004      	add	sp, #16
 80a03fa:	bd70      	pop	{r4, r5, r6, pc}
 80a03fc:	080a7b18 	.word	0x080a7b18

080a0400 <_ZN17LiquidCrystal_I2C7displayEv>:
// Turn the display on/off (quickly)
void LiquidCrystal_I2C::noDisplay() {
        _displaycontrol &= ~LCD_DISPLAYON;
        command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void LiquidCrystal_I2C::display() {
 80a0400:	b508      	push	{r3, lr}
        _displaycontrol |= LCD_DISPLAYON;
 80a0402:	7a81      	ldrb	r1, [r0, #10]
 80a0404:	f041 0204 	orr.w	r2, r1, #4
 80a0408:	7282      	strb	r2, [r0, #10]
        command(LCD_DISPLAYCONTROL | _displaycontrol);
 80a040a:	f041 010c 	orr.w	r1, r1, #12
 80a040e:	f7ff ffc0 	bl	80a0392 <_ZN17LiquidCrystal_I2C7commandEh>
 80a0412:	bd08      	pop	{r3, pc}

080a0414 <_ZN17LiquidCrystal_I2C5beginEhhh>:
        Wire.begin();
        _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
        begin(_cols, _rows);
}

void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
 80a0414:	b510      	push	{r4, lr}
        if (lines > 1) {
 80a0416:	2a01      	cmp	r2, #1
                _displayfunction |= LCD_2LINE;
 80a0418:	bf88      	it	hi
 80a041a:	7a41      	ldrbhi	r1, [r0, #9]
        Wire.begin();
        _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
        begin(_cols, _rows);
}

void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
 80a041c:	4604      	mov	r4, r0
        if (lines > 1) {
                _displayfunction |= LCD_2LINE;
 80a041e:	bf84      	itt	hi
 80a0420:	f041 0108 	orrhi.w	r1, r1, #8
 80a0424:	7241      	strbhi	r1, [r0, #9]
        }
        _numlines = lines;
 80a0426:	7302      	strb	r2, [r0, #12]

        // for some 1 line displays you can select a 10 pixel high font
        if ((dotsize != 0) && (lines == 1)) {
 80a0428:	b12b      	cbz	r3, 80a0436 <_ZN17LiquidCrystal_I2C5beginEhhh+0x22>
 80a042a:	2a01      	cmp	r2, #1
                _displayfunction |= LCD_5x10DOTS;
 80a042c:	bf02      	ittt	eq
 80a042e:	7a43      	ldrbeq	r3, [r0, #9]
 80a0430:	f043 0304 	orreq.w	r3, r3, #4
 80a0434:	7243      	strbeq	r3, [r0, #9]
        }

        // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
        // according to datasheet, we need at least 40ms after power rises above 2.7V
        // before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
        delay(50);
 80a0436:	2032      	movs	r0, #50	; 0x32
 80a0438:	f001 fc6e 	bl	80a1d18 <delay>

        // Now we pull both RS and R/W low to begin commands
        expanderWrite(_backlightval);   // reset expanderand turn backlight off (Bit 8 =1)
 80a043c:	7be1      	ldrb	r1, [r4, #15]
 80a043e:	4620      	mov	r0, r4
 80a0440:	f7ff ff4e 	bl	80a02e0 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
        delay(1000);
 80a0444:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a0448:	f001 fc66 	bl	80a1d18 <delay>
        //put the LCD into 4 bit mode
        // this is according to the hitachi HD44780 datasheet
        // figure 24, pg 46

          // we start in 8bit mode, try to set 4 bit mode
   write4bits(0x03 << 4);
 80a044c:	2130      	movs	r1, #48	; 0x30
 80a044e:	4620      	mov	r0, r4
 80a0450:	f7ff ff7d 	bl	80a034e <_ZN17LiquidCrystal_I2C10write4bitsEh>
 80a0454:	f241 1094 	movw	r0, #4500	; 0x1194
 80a0458:	f001 fa40 	bl	80a18dc <HAL_Delay_Microseconds>
   delayMicroseconds(4500); // wait min 4.1ms

   // second try
   write4bits(0x03 << 4);
 80a045c:	2130      	movs	r1, #48	; 0x30
 80a045e:	4620      	mov	r0, r4
 80a0460:	f7ff ff75 	bl	80a034e <_ZN17LiquidCrystal_I2C10write4bitsEh>
 80a0464:	f241 1094 	movw	r0, #4500	; 0x1194
 80a0468:	f001 fa38 	bl	80a18dc <HAL_Delay_Microseconds>
   delayMicroseconds(4500); // wait min 4.1ms

   // third go!
   write4bits(0x03 << 4);
 80a046c:	2130      	movs	r1, #48	; 0x30
 80a046e:	4620      	mov	r0, r4
 80a0470:	f7ff ff6d 	bl	80a034e <_ZN17LiquidCrystal_I2C10write4bitsEh>
 80a0474:	2096      	movs	r0, #150	; 0x96
 80a0476:	f001 fa31 	bl	80a18dc <HAL_Delay_Microseconds>
   delayMicroseconds(150);

   // finally, set to 4-bit interface
   write4bits(0x02 << 4);
 80a047a:	4620      	mov	r0, r4
 80a047c:	2120      	movs	r1, #32
 80a047e:	f7ff ff66 	bl	80a034e <_ZN17LiquidCrystal_I2C10write4bitsEh>



        // set # lines, font size, etc.
        command(LCD_FUNCTIONSET | _displayfunction);
 80a0482:	7a61      	ldrb	r1, [r4, #9]
 80a0484:	4620      	mov	r0, r4
 80a0486:	f041 0120 	orr.w	r1, r1, #32
 80a048a:	f7ff ff82 	bl	80a0392 <_ZN17LiquidCrystal_I2C7commandEh>

        // turn the display on with no cursor or blinking default
        _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80a048e:	2304      	movs	r3, #4
 80a0490:	72a3      	strb	r3, [r4, #10]
        display();
 80a0492:	4620      	mov	r0, r4
 80a0494:	f7ff ffb4 	bl	80a0400 <_ZN17LiquidCrystal_I2C7displayEv>

        // clear it off
        clear();
 80a0498:	4620      	mov	r0, r4
 80a049a:	f7ff ff7d 	bl	80a0398 <_ZN17LiquidCrystal_I2C5clearEv>

        // Initialize to default text direction (for roman languages)
        _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80a049e:	2302      	movs	r3, #2

        // set the entry mode
        command(LCD_ENTRYMODESET | _displaymode);
 80a04a0:	4620      	mov	r0, r4

        // clear it off
        clear();

        // Initialize to default text direction (for roman languages)
        _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80a04a2:	72e3      	strb	r3, [r4, #11]

        // set the entry mode
        command(LCD_ENTRYMODESET | _displaymode);
 80a04a4:	2106      	movs	r1, #6
 80a04a6:	f7ff ff74 	bl	80a0392 <_ZN17LiquidCrystal_I2C7commandEh>

        home();
 80a04aa:	4620      	mov	r0, r4

}
 80a04ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;

        // set the entry mode
        command(LCD_ENTRYMODESET | _displaymode);

        home();
 80a04b0:	f7ff bf7c 	b.w	80a03ac <_ZN17LiquidCrystal_I2C4homeEv>

080a04b4 <_ZN17LiquidCrystal_I2C9init_privEv>:
void LiquidCrystal_I2C::init(){
        init_priv();
}

void LiquidCrystal_I2C::init_priv()
{
 80a04b4:	b510      	push	{r4, lr}
 80a04b6:	4604      	mov	r4, r0
        Wire.setSpeed(CLOCK_SPEED_100KHZ);
 80a04b8:	f002 ff6e 	bl	80a3398 <_Z19__fetch_global_Wirev>
 80a04bc:	490a      	ldr	r1, [pc, #40]	; (80a04e8 <_ZN17LiquidCrystal_I2C9init_privEv+0x34>)
 80a04be:	f001 ff19 	bl	80a22f4 <_ZN7TwoWire8setSpeedEm>
        Wire.stretchClock(true);
 80a04c2:	f002 ff69 	bl	80a3398 <_Z19__fetch_global_Wirev>
 80a04c6:	2101      	movs	r1, #1
 80a04c8:	f001 ff18 	bl	80a22fc <_ZN7TwoWire12stretchClockEb>
        Wire.begin();
 80a04cc:	f002 ff64 	bl	80a3398 <_Z19__fetch_global_Wirev>
 80a04d0:	f001 ff18 	bl	80a2304 <_ZN7TwoWire5beginEv>
        _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80a04d4:	2300      	movs	r3, #0
 80a04d6:	7263      	strb	r3, [r4, #9]
        begin(_cols, _rows);
 80a04d8:	7ba2      	ldrb	r2, [r4, #14]
 80a04da:	7b61      	ldrb	r1, [r4, #13]
 80a04dc:	4620      	mov	r0, r4
}
 80a04de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
        Wire.setSpeed(CLOCK_SPEED_100KHZ);
        Wire.stretchClock(true);
        Wire.begin();
        _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
        begin(_cols, _rows);
 80a04e2:	f7ff bf97 	b.w	80a0414 <_ZN17LiquidCrystal_I2C5beginEhhh>
 80a04e6:	bf00      	nop
 80a04e8:	000186a0 	.word	0x000186a0

080a04ec <_ZN17LiquidCrystal_I2C4initEv>:
  _rows = lcd_rows;
  _backlightval = LCD_NOBACKLIGHT;
}

void LiquidCrystal_I2C::init(){
        init_priv();
 80a04ec:	f7ff bfe2 	b.w	80a04b4 <_ZN17LiquidCrystal_I2C9init_privEv>

080a04f0 <_GLOBAL__sub_I__ZN17LiquidCrystal_I2CC2Ehhh>:
 80a04f0:	f001 ba14 	b.w	80a191c <HAL_Pin_Map>

080a04f4 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 80a04f4:	b538      	push	{r3, r4, r5, lr}
 80a04f6:	4b0b      	ldr	r3, [pc, #44]	; (80a0524 <_ZN9TCPClientD1Ev+0x30>)
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a04f8:	6984      	ldr	r4, [r0, #24]
 80a04fa:	4605      	mov	r5, r0
 80a04fc:	6003      	str	r3, [r0, #0]
 80a04fe:	b17c      	cbz	r4, 80a0520 <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a0500:	6863      	ldr	r3, [r4, #4]
 80a0502:	3b01      	subs	r3, #1
 80a0504:	6063      	str	r3, [r4, #4]
 80a0506:	b95b      	cbnz	r3, 80a0520 <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
 80a0508:	6823      	ldr	r3, [r4, #0]
 80a050a:	4620      	mov	r0, r4
 80a050c:	689b      	ldr	r3, [r3, #8]
 80a050e:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a0510:	68a3      	ldr	r3, [r4, #8]
 80a0512:	3b01      	subs	r3, #1
 80a0514:	60a3      	str	r3, [r4, #8]
 80a0516:	b91b      	cbnz	r3, 80a0520 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
 80a0518:	6823      	ldr	r3, [r4, #0]
 80a051a:	4620      	mov	r0, r4
 80a051c:	68db      	ldr	r3, [r3, #12]
 80a051e:	4798      	blx	r3
 80a0520:	4628      	mov	r0, r5
 80a0522:	bd38      	pop	{r3, r4, r5, pc}
 80a0524:	080a7ee4 	.word	0x080a7ee4

080a0528 <_ZN9TCPClientD0Ev>:
 80a0528:	b510      	push	{r4, lr}
 80a052a:	4604      	mov	r4, r0
 80a052c:	f7ff ffe2 	bl	80a04f4 <_ZN9TCPClientD1Ev>
 80a0530:	4620      	mov	r0, r4
 80a0532:	f7ff fdb6 	bl	80a00a2 <_ZdlPv>
 80a0536:	4620      	mov	r0, r4
 80a0538:	bd10      	pop	{r4, pc}

080a053a <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>:

    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
 80a053a:	b538      	push	{r3, r4, r5, lr}
 80a053c:	461d      	mov	r5, r3
    this->callback = callback;
 80a053e:	9b05      	ldr	r3, [sp, #20]

    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
 80a0540:	4604      	mov	r4, r0
    this->callback = callback;
 80a0542:	6303      	str	r3, [r0, #48]	; 0x30
    this->qoscallback = NULL;
 80a0544:	2300      	movs	r3, #0
 80a0546:	6343      	str	r3, [r0, #52]	; 0x34
    if (ip != NULL)
 80a0548:	b102      	cbz	r2, 80a054c <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x12>
        this->ip = ip;
 80a054a:	6482      	str	r2, [r0, #72]	; 0x48
    if (domain != NULL)
 80a054c:	b119      	cbz	r1, 80a0556 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x1c>
        this->domain = domain;
 80a054e:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a0552:	f002 f8eb 	bl	80a272c <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
 80a0556:	9b04      	ldr	r3, [sp, #16]

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
    if (buffer != NULL)
 80a0558:	69e0      	ldr	r0, [r4, #28]
    if (ip != NULL)
        this->ip = ip;
    if (domain != NULL)
        this->domain = domain;
    this->port = port;
    this->keepalive = keepalive;
 80a055a:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
 80a055c:	9b06      	ldr	r3, [sp, #24]
    this->qoscallback = NULL;
    if (ip != NULL)
        this->ip = ip;
    if (domain != NULL)
        this->domain = domain;
    this->port = port;
 80a055e:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
    this->keepalive = keepalive;

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
 80a0562:	2bff      	cmp	r3, #255	; 0xff
 80a0564:	bfb8      	it	lt
 80a0566:	23ff      	movlt	r3, #255	; 0xff
 80a0568:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
 80a056c:	b108      	cbz	r0, 80a0572 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x38>
      delete[] buffer;
 80a056e:	f7ff fd9a 	bl	80a00a6 <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
 80a0572:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
 80a0576:	f7ff fd92 	bl	80a009e <_Znaj>
 80a057a:	61e0      	str	r0, [r4, #28]
 80a057c:	bd38      	pop	{r3, r4, r5, pc}
	...

080a0580 <_ZN4MQTTC1EPhtPFvPcS0_jE>:

MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, callback, maxpacketsize);
}

MQTT::MQTT(uint8_t *ip, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int)) {
 80a0580:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0582:	4604      	mov	r4, r0
 80a0584:	4616      	mov	r6, r2
 80a0586:	461f      	mov	r7, r3
 80a0588:	460d      	mov	r5, r1
 80a058a:	b085      	sub	sp, #20
 80a058c:	f002 fabc 	bl	80a2b08 <_ZN9TCPClientC1Ev>
 80a0590:	4909      	ldr	r1, [pc, #36]	; (80a05b8 <_ZN4MQTTC1EPhtPFvPcS0_jE+0x38>)
 80a0592:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a0596:	f002 f8b6 	bl	80a2706 <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(NULL, ip, port, MQTT_DEFAULT_KEEPALIVE, callback, MQTT_MAX_PACKET_SIZE);
 80a059a:	23ff      	movs	r3, #255	; 0xff
 80a059c:	9302      	str	r3, [sp, #8]
 80a059e:	230f      	movs	r3, #15
 80a05a0:	9300      	str	r3, [sp, #0]
 80a05a2:	4620      	mov	r0, r4
 80a05a4:	9701      	str	r7, [sp, #4]
 80a05a6:	4633      	mov	r3, r6
 80a05a8:	462a      	mov	r2, r5
 80a05aa:	2100      	movs	r1, #0
 80a05ac:	f7ff ffc5 	bl	80a053a <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>
}
 80a05b0:	4620      	mov	r0, r4
 80a05b2:	b005      	add	sp, #20
 80a05b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a05b6:	bf00      	nop
 80a05b8:	080a7de4 	.word	0x080a7de4

080a05bc <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
 80a05bc:	b510      	push	{r4, lr}
 80a05be:	4604      	mov	r4, r0
    while(!_client.available()) {}
 80a05c0:	4620      	mov	r0, r4
 80a05c2:	f002 fa11 	bl	80a29e8 <_ZN9TCPClient9availableEv>
 80a05c6:	2800      	cmp	r0, #0
 80a05c8:	d0fa      	beq.n	80a05c0 <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
 80a05ca:	4620      	mov	r0, r4
 80a05cc:	f002 f9b3 	bl	80a2936 <_ZN9TCPClient4readEv>
}
 80a05d0:	b2c0      	uxtb	r0, r0
 80a05d2:	bd10      	pop	{r4, pc}

080a05d4 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
 80a05d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a05d8:	4605      	mov	r5, r0
    uint16_t len = 0;
    buffer[len++] = readByte();
 80a05da:	69c4      	ldr	r4, [r0, #28]
uint8_t MQTT::readByte() {
    while(!_client.available()) {}
    return _client.read();
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
 80a05dc:	468a      	mov	sl, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
 80a05de:	f7ff ffed 	bl	80a05bc <_ZN4MQTT8readByteEv>
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
 80a05e2:	f04f 0801 	mov.w	r8, #1
    return _client.read();
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    buffer[len++] = readByte();
 80a05e6:	4646      	mov	r6, r8
 80a05e8:	7020      	strb	r0, [r4, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
 80a05ea:	69eb      	ldr	r3, [r5, #28]
    uint32_t multiplier = 1;
    uint16_t length = 0;
 80a05ec:	2700      	movs	r7, #0
 80a05ee:	f893 9000 	ldrb.w	r9, [r3]
 80a05f2:	f009 09f0 	and.w	r9, r9, #240	; 0xf0
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
 80a05f6:	4628      	mov	r0, r5
 80a05f8:	f7ff ffe0 	bl	80a05bc <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
 80a05fc:	69eb      	ldr	r3, [r5, #28]
 80a05fe:	1c74      	adds	r4, r6, #1
 80a0600:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
 80a0602:	f000 037f 	and.w	r3, r0, #127	; 0x7f
 80a0606:	fb03 7708 	mla	r7, r3, r8, r7
        multiplier *= 128;
    } while ((digit & 128) != 0);
 80a060a:	0603      	lsls	r3, r0, #24
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
 80a060c:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
 80a060e:	b2bf      	uxth	r7, r7
        multiplier *= 128;
 80a0610:	ea4f 18c8 	mov.w	r8, r8, lsl #7
    } while ((digit & 128) != 0);
 80a0614:	d501      	bpl.n	80a061a <_ZN4MQTT10readPacketEPh+0x46>
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
 80a0616:	4626      	mov	r6, r4
 80a0618:	e7ed      	b.n	80a05f6 <_ZN4MQTT10readPacketEPh+0x22>
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;
 80a061a:	1e63      	subs	r3, r4, #1

    if (isPublish) {
 80a061c:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
        digit = readByte();
        buffer[len++] = digit;
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;
 80a0620:	f88a 3000 	strb.w	r3, [sl]

    if (isPublish) {
 80a0624:	d113      	bne.n	80a064e <_ZN4MQTT10readPacketEPh+0x7a>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
 80a0626:	4628      	mov	r0, r5
 80a0628:	f8d5 801c 	ldr.w	r8, [r5, #28]
 80a062c:	f7ff ffc6 	bl	80a05bc <_ZN4MQTT8readByteEv>
 80a0630:	f808 0004 	strb.w	r0, [r8, r4]
        buffer[len++] = readByte();
 80a0634:	4628      	mov	r0, r5
 80a0636:	f8d5 801c 	ldr.w	r8, [r5, #28]
 80a063a:	f7ff ffbf 	bl	80a05bc <_ZN4MQTT8readByteEv>
 80a063e:	1cf4      	adds	r4, r6, #3
 80a0640:	3602      	adds	r6, #2
 80a0642:	b2b6      	uxth	r6, r6
 80a0644:	b2a4      	uxth	r4, r4
 80a0646:	f808 0006 	strb.w	r0, [r8, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
 80a064a:	2302      	movs	r3, #2
 80a064c:	e000      	b.n	80a0650 <_ZN4MQTT10readPacketEPh+0x7c>
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    uint16_t length = 0;
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;
 80a064e:	2300      	movs	r3, #0
 80a0650:	1b1b      	subs	r3, r3, r4
 80a0652:	b29e      	uxth	r6, r3
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
 80a0654:	19a3      	adds	r3, r4, r6
 80a0656:	b29b      	uxth	r3, r3
 80a0658:	429f      	cmp	r7, r3
 80a065a:	d90b      	bls.n	80a0674 <_ZN4MQTT10readPacketEPh+0xa0>
        digit = readByte();
 80a065c:	4628      	mov	r0, r5
 80a065e:	f7ff ffad 	bl	80a05bc <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
 80a0662:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
 80a0666:	42a3      	cmp	r3, r4
            buffer[len] = digit;
 80a0668:	bf84      	itt	hi
 80a066a:	69eb      	ldrhi	r3, [r5, #28]
 80a066c:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
 80a066e:	3401      	adds	r4, #1
 80a0670:	b2a4      	uxth	r4, r4
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
 80a0672:	e7ef      	b.n	80a0654 <_ZN4MQTT10readPacketEPh+0x80>
            buffer[len] = digit;
        }
        len++;
    }

    if (len > this->maxpacketsize) {
 80a0674:	f8b5 0054 	ldrh.w	r0, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
 80a0678:	42a0      	cmp	r0, r4
 80a067a:	bf2c      	ite	cs
 80a067c:	4620      	movcs	r0, r4
 80a067e:	2000      	movcc	r0, #0
 80a0680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080a0684 <_ZN4MQTT5writeEhPht>:
    }
    return false;
}


bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
 80a0684:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a0686:	4607      	mov	r7, r0
 80a0688:	468e      	mov	lr, r1
 80a068a:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
 80a068c:	461d      	mov	r5, r3
}


bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
    uint8_t lenBuf[4];
    uint8_t llen = 0;
 80a068e:	2400      	movs	r4, #0
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
 80a0690:	f005 037f 	and.w	r3, r5, #127	; 0x7f
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
 80a0694:	a902      	add	r1, sp, #8
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
 80a0696:	09ed      	lsrs	r5, r5, #7
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
 80a0698:	4421      	add	r1, r4
    uint16_t len = length;
    do {
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
 80a069a:	bf18      	it	ne
 80a069c:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
        }
        lenBuf[pos++] = digit;
        llen++;
 80a06a0:	3401      	adds	r4, #1
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
 80a06a2:	f801 3c04 	strb.w	r3, [r1, #-4]
        llen++;
 80a06a6:	b2e4      	uxtb	r4, r4
    } while(len > 0);
 80a06a8:	2d00      	cmp	r5, #0
 80a06aa:	d1f1      	bne.n	80a0690 <_ZN4MQTT5writeEhPht+0xc>

    buf[4-llen] = header;
 80a06ac:	f1c4 0304 	rsb	r3, r4, #4
 80a06b0:	18d1      	adds	r1, r2, r3
 80a06b2:	f802 e003 	strb.w	lr, [r2, r3]
    for (int i = 0; i < llen; i++) {
 80a06b6:	42a5      	cmp	r5, r4
 80a06b8:	da06      	bge.n	80a06c8 <_ZN4MQTT5writeEhPht+0x44>
        buf[5-llen+i] = lenBuf[i];
 80a06ba:	a801      	add	r0, sp, #4
 80a06bc:	1b2b      	subs	r3, r5, r4
 80a06be:	5c28      	ldrb	r0, [r5, r0]
 80a06c0:	4413      	add	r3, r2
 80a06c2:	7158      	strb	r0, [r3, #5]
        lenBuf[pos++] = digit;
        llen++;
    } while(len > 0);

    buf[4-llen] = header;
    for (int i = 0; i < llen; i++) {
 80a06c4:	3501      	adds	r5, #1
 80a06c6:	e7f6      	b.n	80a06b6 <_ZN4MQTT5writeEhPht+0x32>
        buf[5-llen+i] = lenBuf[i];
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
 80a06c8:	1c72      	adds	r2, r6, #1
 80a06ca:	4422      	add	r2, r4
 80a06cc:	4638      	mov	r0, r7
 80a06ce:	f002 f8a4 	bl	80a281a <_ZN9TCPClient5writeEPKhj>
 80a06d2:	4605      	mov	r5, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a06d4:	f001 f90a 	bl	80a18ec <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
 80a06d8:	3401      	adds	r4, #1
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
    }
    rc = _client.write(buf+(4-llen), length+1+llen);

    lastOutActivity = millis();
 80a06da:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
 80a06dc:	4434      	add	r4, r6
 80a06de:	b2a8      	uxth	r0, r5
}
 80a06e0:	1a23      	subs	r3, r4, r0
 80a06e2:	4258      	negs	r0, r3
 80a06e4:	4158      	adcs	r0, r3
 80a06e6:	b003      	add	sp, #12
 80a06e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a06ea <_ZN4MQTT10disconnectEv>:
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
 80a06ea:	b510      	push	{r4, lr}
 80a06ec:	4604      	mov	r4, r0
    buffer[0] = MQTTDISCONNECT;
 80a06ee:	69c3      	ldr	r3, [r0, #28]
 80a06f0:	22e0      	movs	r2, #224	; 0xe0
 80a06f2:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0;
 80a06f4:	69c3      	ldr	r3, [r0, #28]
 80a06f6:	2200      	movs	r2, #0
 80a06f8:	705a      	strb	r2, [r3, #1]
    _client.write(buffer,2);
 80a06fa:	69c1      	ldr	r1, [r0, #28]
 80a06fc:	2202      	movs	r2, #2
 80a06fe:	f002 f88c 	bl	80a281a <_ZN9TCPClient5writeEPKhj>
    _client.stop();
 80a0702:	4620      	mov	r0, r4
 80a0704:	f002 f9ae 	bl	80a2a64 <_ZN9TCPClient4stopEv>
 80a0708:	f001 f8f0 	bl	80a18ec <HAL_Timer_Get_Milli_Seconds>
    lastInActivity = lastOutActivity = millis();
 80a070c:	6260      	str	r0, [r4, #36]	; 0x24
 80a070e:	62a0      	str	r0, [r4, #40]	; 0x28
 80a0710:	bd10      	pop	{r4, pc}

080a0712 <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
 80a0712:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
 80a0714:	460d      	mov	r5, r1
 80a0716:	3302      	adds	r3, #2
 80a0718:	b29b      	uxth	r3, r3
 80a071a:	1a6c      	subs	r4, r5, r1
    while (*idp && pos < this->maxpacketsize) {
 80a071c:	f815 6b01 	ldrb.w	r6, [r5], #1
 80a0720:	b2a4      	uxth	r4, r4
 80a0722:	b13e      	cbz	r6, 80a0734 <_ZN4MQTT11writeStringEPKcPht+0x22>
 80a0724:	f8b0 7054 	ldrh.w	r7, [r0, #84]	; 0x54
 80a0728:	429f      	cmp	r7, r3
 80a072a:	d903      	bls.n	80a0734 <_ZN4MQTT11writeStringEPKcPht+0x22>
        buf[pos++] = *idp++;
 80a072c:	1c5c      	adds	r4, r3, #1
 80a072e:	54d6      	strb	r6, [r2, r3]
 80a0730:	b2a3      	uxth	r3, r4

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
    while (*idp && pos < this->maxpacketsize) {
 80a0732:	e7f2      	b.n	80a071a <_ZN4MQTT11writeStringEPKcPht+0x8>
        buf[pos++] = *idp++;
        i++;
    }
    buf[pos-i-2] = (i >> 8);
 80a0734:	1b19      	subs	r1, r3, r4
 80a0736:	440a      	add	r2, r1
 80a0738:	1221      	asrs	r1, r4, #8
 80a073a:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
 80a073e:	f802 4c01 	strb.w	r4, [r2, #-1]
    return pos;
}
 80a0742:	4618      	mov	r0, r3
 80a0744:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0746 <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
 80a0746:	b538      	push	{r3, r4, r5, lr}
 80a0748:	4605      	mov	r5, r0
    bool rc = (int)_client.connected();
 80a074a:	f002 fa8f 	bl	80a2c6c <_ZN9TCPClient9connectedEv>
 80a074e:	2800      	cmp	r0, #0
 80a0750:	bf14      	ite	ne
 80a0752:	2401      	movne	r4, #1
 80a0754:	2400      	moveq	r4, #0
    if (!rc) _client.stop();
 80a0756:	d102      	bne.n	80a075e <_ZN4MQTT11isConnectedEv+0x18>
 80a0758:	4628      	mov	r0, r5
 80a075a:	f002 f983 	bl	80a2a64 <_ZN9TCPClient4stopEv>
    return rc;
}
 80a075e:	4620      	mov	r0, r4
 80a0760:	bd38      	pop	{r3, r4, r5, pc}

080a0762 <_ZN4MQTT4loopEv>:
    }

    return len;
}

bool MQTT::loop() {
 80a0762:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0766:	b083      	sub	sp, #12
 80a0768:	af00      	add	r7, sp, #0
 80a076a:	4604      	mov	r4, r0
    if (isConnected()) {
 80a076c:	f7ff ffeb 	bl	80a0746 <_ZN4MQTT11isConnectedEv>
 80a0770:	4681      	mov	r9, r0
 80a0772:	2800      	cmp	r0, #0
 80a0774:	f000 80bd 	beq.w	80a08f2 <_ZN4MQTT4loopEv+0x190>
 80a0778:	f001 f8b8 	bl	80a18ec <HAL_Timer_Get_Milli_Seconds>
        unsigned long t = millis();
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
 80a077c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80a077e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0782:	4353      	muls	r3, r2
 80a0784:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80a0786:	4605      	mov	r5, r0
 80a0788:	1a82      	subs	r2, r0, r2
 80a078a:	429a      	cmp	r2, r3
 80a078c:	d803      	bhi.n	80a0796 <_ZN4MQTT4loopEv+0x34>
 80a078e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80a0790:	1a82      	subs	r2, r0, r2
 80a0792:	4293      	cmp	r3, r2
 80a0794:	d217      	bcs.n	80a07c6 <_ZN4MQTT4loopEv+0x64>
            if (pingOutstanding) {
 80a0796:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80a079a:	b12b      	cbz	r3, 80a07a8 <_ZN4MQTT4loopEv+0x46>
                _client.stop();
 80a079c:	4620      	mov	r0, r4
 80a079e:	f002 f961 	bl	80a2a64 <_ZN9TCPClient4stopEv>
                return false;
 80a07a2:	f04f 0900 	mov.w	r9, #0
 80a07a6:	e0a4      	b.n	80a08f2 <_ZN4MQTT4loopEv+0x190>
            } else {
                buffer[0] = MQTTPINGREQ;
 80a07a8:	69e2      	ldr	r2, [r4, #28]
 80a07aa:	21c0      	movs	r1, #192	; 0xc0
 80a07ac:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
 80a07ae:	69e2      	ldr	r2, [r4, #28]
                _client.write(buffer,2);
 80a07b0:	4620      	mov	r0, r4
            if (pingOutstanding) {
                _client.stop();
                return false;
            } else {
                buffer[0] = MQTTPINGREQ;
                buffer[1] = 0;
 80a07b2:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
 80a07b4:	69e1      	ldr	r1, [r4, #28]
 80a07b6:	2202      	movs	r2, #2
 80a07b8:	f002 f82f 	bl	80a281a <_ZN9TCPClient5writeEPKhj>
                lastOutActivity = t;
                lastInActivity = t;
                pingOutstanding = true;
 80a07bc:	2301      	movs	r3, #1
                return false;
            } else {
                buffer[0] = MQTTPINGREQ;
                buffer[1] = 0;
                _client.write(buffer,2);
                lastOutActivity = t;
 80a07be:	6265      	str	r5, [r4, #36]	; 0x24
                lastInActivity = t;
 80a07c0:	62a5      	str	r5, [r4, #40]	; 0x28
                pingOutstanding = true;
 80a07c2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
            }
        }
        if (_client.available()) {
 80a07c6:	4620      	mov	r0, r4
 80a07c8:	f002 f90e 	bl	80a29e8 <_ZN9TCPClient9availableEv>
 80a07cc:	2800      	cmp	r0, #0
 80a07ce:	f000 8090 	beq.w	80a08f2 <_ZN4MQTT4loopEv+0x190>
            uint8_t llen;
            uint16_t len = readPacket(&llen);
 80a07d2:	1df9      	adds	r1, r7, #7
 80a07d4:	4620      	mov	r0, r4
 80a07d6:	f7ff fefd 	bl	80a05d4 <_ZN4MQTT10readPacketEPh>
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
 80a07da:	4602      	mov	r2, r0
 80a07dc:	2800      	cmp	r0, #0
 80a07de:	f000 8088 	beq.w	80a08f2 <_ZN4MQTT4loopEv+0x190>
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
 80a07e2:	69e1      	ldr	r1, [r4, #28]
            uint8_t llen;
            uint16_t len = readPacket(&llen);
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
                lastInActivity = t;
 80a07e4:	62a5      	str	r5, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
 80a07e6:	7808      	ldrb	r0, [r1, #0]
 80a07e8:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
                if (type == MQTTPUBLISH) {
 80a07ec:	2b30      	cmp	r3, #48	; 0x30
 80a07ee:	d158      	bne.n	80a08a2 <_ZN4MQTT4loopEv+0x140>
                    if (callback) {
 80a07f0:	f8d4 b030 	ldr.w	fp, [r4, #48]	; 0x30
 80a07f4:	f1bb 0f00 	cmp.w	fp, #0
 80a07f8:	d07b      	beq.n	80a08f2 <_ZN4MQTT4loopEv+0x190>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2];
 80a07fa:	f897 e007 	ldrb.w	lr, [r7, #7]
                            _client.write(buffer,4);
                            lastOutActivity = t;
                        } else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
                        }
 80a07fe:	46ea      	mov	sl, sp
            if (len > 0) {
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2];
 80a0800:	eb01 000e 	add.w	r0, r1, lr
 80a0804:	7846      	ldrb	r6, [r0, #1]
 80a0806:	7883      	ldrb	r3, [r0, #2]
 80a0808:	eb03 2306 	add.w	r3, r3, r6, lsl #8
 80a080c:	b29b      	uxth	r3, r3
                        char topic[tl+1];
 80a080e:	f103 0008 	add.w	r0, r3, #8
 80a0812:	f020 0007 	bic.w	r0, r0, #7
 80a0816:	ebad 0d00 	sub.w	sp, sp, r0
 80a081a:	4668      	mov	r0, sp
 80a081c:	2600      	movs	r6, #0
                        for (uint16_t i=0;i<tl;i++) {
 80a081e:	fa1f fc86 	uxth.w	ip, r6
 80a0822:	4563      	cmp	r3, ip
 80a0824:	d908      	bls.n	80a0838 <_ZN4MQTT4loopEv+0xd6>
                            topic[i] = buffer[llen+3+i];
 80a0826:	eb0e 0c06 	add.w	ip, lr, r6
 80a082a:	448c      	add	ip, r1
 80a082c:	f89c c003 	ldrb.w	ip, [ip, #3]
 80a0830:	f800 c006 	strb.w	ip, [r0, r6]
 80a0834:	3601      	adds	r6, #1
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2];
                        char topic[tl+1];
                        for (uint16_t i=0;i<tl;i++) {
 80a0836:	e7f2      	b.n	80a081e <_ZN4MQTT4loopEv+0xbc>
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
 80a0838:	2600      	movs	r6, #0
 80a083a:	54c6      	strb	r6, [r0, r3]
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) {
 80a083c:	f891 8000 	ldrb.w	r8, [r1]
 80a0840:	f10e 0603 	add.w	r6, lr, #3
 80a0844:	f008 0806 	and.w	r8, r8, #6
 80a0848:	f1b8 0f02 	cmp.w	r8, #2
 80a084c:	ebce 0202 	rsb	r2, lr, r2
 80a0850:	d120      	bne.n	80a0894 <_ZN4MQTT4loopEv+0x132>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80a0852:	441e      	add	r6, r3
 80a0854:	f811 c006 	ldrb.w	ip, [r1, r6]
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
 80a0858:	f10e 0e05 	add.w	lr, lr, #5
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) {
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80a085c:	440e      	add	r6, r1
 80a085e:	7876      	ldrb	r6, [r6, #1]
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
 80a0860:	1ad2      	subs	r2, r2, r3
 80a0862:	4473      	add	r3, lr
 80a0864:	4419      	add	r1, r3
 80a0866:	3a05      	subs	r2, #5
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) {
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80a0868:	eb06 260c 	add.w	r6, r6, ip, lsl #8
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
 80a086c:	47d8      	blx	fp

                            buffer[0] = MQTTPUBACK;
 80a086e:	69e3      	ldr	r3, [r4, #28]
 80a0870:	2240      	movs	r2, #64	; 0x40
 80a0872:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
 80a0874:	69e3      	ldr	r3, [r4, #28]
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) {
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80a0876:	b2b6      	uxth	r6, r6
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);

                            buffer[0] = MQTTPUBACK;
                            buffer[1] = 2;
 80a0878:	f883 8001 	strb.w	r8, [r3, #1]
                            buffer[2] = (msgId >> 8);
 80a087c:	69e3      	ldr	r3, [r4, #28]
 80a087e:	1232      	asrs	r2, r6, #8
 80a0880:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
 80a0882:	69e3      	ldr	r3, [r4, #28]
                            _client.write(buffer,4);
 80a0884:	2204      	movs	r2, #4
                            callback(topic,payload,len-llen-3-tl-2);

                            buffer[0] = MQTTPUBACK;
                            buffer[1] = 2;
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
 80a0886:	70de      	strb	r6, [r3, #3]
                            _client.write(buffer,4);
 80a0888:	69e1      	ldr	r1, [r4, #28]
 80a088a:	4620      	mov	r0, r4
 80a088c:	f001 ffc5 	bl	80a281a <_ZN9TCPClient5writeEPKhj>
                            lastOutActivity = t;
 80a0890:	6265      	str	r5, [r4, #36]	; 0x24
 80a0892:	e004      	b.n	80a089e <_ZN4MQTT4loopEv+0x13c>
                        } else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
 80a0894:	3a03      	subs	r2, #3
 80a0896:	441e      	add	r6, r3
 80a0898:	1ad2      	subs	r2, r2, r3
 80a089a:	4431      	add	r1, r6
 80a089c:	47d8      	blx	fp
 80a089e:	46d5      	mov	sp, sl
 80a08a0:	e027      	b.n	80a08f2 <_ZN4MQTT4loopEv+0x190>
                        }
                    }
                } else if (type == MQTTPUBACK || type == MQTTPUBREC) {
 80a08a2:	f000 05e0 	and.w	r5, r0, #224	; 0xe0
 80a08a6:	2d40      	cmp	r5, #64	; 0x40
 80a08a8:	d10d      	bne.n	80a08c6 <_ZN4MQTT4loopEv+0x164>
                    if (qoscallback) {
 80a08aa:	6b64      	ldr	r4, [r4, #52]	; 0x34
 80a08ac:	b30c      	cbz	r4, 80a08f2 <_ZN4MQTT4loopEv+0x190>
                        // msgId only present for QOS==0
                        if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
 80a08ae:	2a04      	cmp	r2, #4
 80a08b0:	d11f      	bne.n	80a08f2 <_ZN4MQTT4loopEv+0x190>
 80a08b2:	f010 0f06 	tst.w	r0, #6
 80a08b6:	d11c      	bne.n	80a08f2 <_ZN4MQTT4loopEv+0x190>
                            msgId = (buffer[2]<<8)+buffer[3];
                            this->qoscallback(msgId);
 80a08b8:	7888      	ldrb	r0, [r1, #2]
 80a08ba:	78cb      	ldrb	r3, [r1, #3]
 80a08bc:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 80a08c0:	b280      	uxth	r0, r0
 80a08c2:	47a0      	blx	r4
 80a08c4:	e015      	b.n	80a08f2 <_ZN4MQTT4loopEv+0x190>
                        }
                    }
                } else if (type == MQTTPUBCOMP) {
 80a08c6:	2b70      	cmp	r3, #112	; 0x70
 80a08c8:	d013      	beq.n	80a08f2 <_ZN4MQTT4loopEv+0x190>
                    // TODO:if something...
                } else if (type == MQTTSUBACK) {
 80a08ca:	2b90      	cmp	r3, #144	; 0x90
 80a08cc:	d011      	beq.n	80a08f2 <_ZN4MQTT4loopEv+0x190>
                    // if something...
                } else if (type == MQTTPINGREQ) {
 80a08ce:	2bc0      	cmp	r3, #192	; 0xc0
 80a08d0:	d10a      	bne.n	80a08e8 <_ZN4MQTT4loopEv+0x186>
                    buffer[0] = MQTTPINGRESP;
 80a08d2:	23d0      	movs	r3, #208	; 0xd0
 80a08d4:	700b      	strb	r3, [r1, #0]
                    buffer[1] = 0;
 80a08d6:	69e3      	ldr	r3, [r4, #28]
 80a08d8:	2200      	movs	r2, #0
 80a08da:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
 80a08dc:	69e1      	ldr	r1, [r4, #28]
 80a08de:	2202      	movs	r2, #2
 80a08e0:	4620      	mov	r0, r4
 80a08e2:	f001 ff9a 	bl	80a281a <_ZN9TCPClient5writeEPKhj>
 80a08e6:	e004      	b.n	80a08f2 <_ZN4MQTT4loopEv+0x190>
                } else if (type == MQTTPINGRESP) {
 80a08e8:	2bd0      	cmp	r3, #208	; 0xd0
                    pingOutstanding = false;
 80a08ea:	bf04      	itt	eq
 80a08ec:	2300      	moveq	r3, #0
 80a08ee:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
            }
        }
        return true;
    }
    return false;
}
 80a08f2:	4648      	mov	r0, r9
 80a08f4:	370c      	adds	r7, #12
 80a08f6:	46bd      	mov	sp, r7
 80a08f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a08fc <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, payload, plength, retain, qos, false, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
 80a08fc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0900:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80a0902:	4604      	mov	r4, r0
 80a0904:	468b      	mov	fp, r1
 80a0906:	4691      	mov	r9, r2
 80a0908:	469a      	mov	sl, r3
 80a090a:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 80a090e:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 80a0912:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
    if (isConnected()) {
 80a0916:	f7ff ff16 	bl	80a0746 <_ZN4MQTT11isConnectedEv>
 80a091a:	2800      	cmp	r0, #0
 80a091c:	d04b      	beq.n	80a09b6 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xba>
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        memset(buffer, 0, this->maxpacketsize);
 80a091e:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
 80a0922:	2100      	movs	r1, #0
 80a0924:	69e0      	ldr	r0, [r4, #28]
 80a0926:	f004 f9d2 	bl	80a4cce <memset>

        length = writeString(topic, buffer, length);
 80a092a:	2305      	movs	r3, #5
 80a092c:	69e2      	ldr	r2, [r4, #28]
 80a092e:	4659      	mov	r1, fp
 80a0930:	4620      	mov	r0, r4
 80a0932:	f7ff feee 	bl	80a0712 <_ZN4MQTT11writeStringEPKcPht>

        if (qos == QOS2 || qos == QOS1) {
 80a0936:	1e6b      	subs	r3, r5, #1
 80a0938:	2b01      	cmp	r3, #1
 80a093a:	d812      	bhi.n	80a0962 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x66>
            nextMsgId += 1;
 80a093c:	8c23      	ldrh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 80a093e:	69e2      	ldr	r2, [r4, #28]
        memset(buffer, 0, this->maxpacketsize);

        length = writeString(topic, buffer, length);

        if (qos == QOS2 || qos == QOS1) {
            nextMsgId += 1;
 80a0940:	3301      	adds	r3, #1
 80a0942:	b29b      	uxth	r3, r3
 80a0944:	8423      	strh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 80a0946:	121b      	asrs	r3, r3, #8
 80a0948:	5413      	strb	r3, [r2, r0]
 80a094a:	1c41      	adds	r1, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
 80a094c:	69e3      	ldr	r3, [r4, #28]
 80a094e:	8c22      	ldrh	r2, [r4, #32]

        length = writeString(topic, buffer, length);

        if (qos == QOS2 || qos == QOS1) {
            nextMsgId += 1;
            buffer[length++] = (nextMsgId >> 8);
 80a0950:	b289      	uxth	r1, r1
            buffer[length++] = (nextMsgId & 0xFF);
 80a0952:	3002      	adds	r0, #2
 80a0954:	b280      	uxth	r0, r0
 80a0956:	545a      	strb	r2, [r3, r1]
            if (messageid != NULL)
 80a0958:	b11e      	cbz	r6, 80a0962 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x66>
                *messageid = nextMsgId++;
 80a095a:	8c23      	ldrh	r3, [r4, #32]
 80a095c:	1c5a      	adds	r2, r3, #1
 80a095e:	8422      	strh	r2, [r4, #32]
 80a0960:	8033      	strh	r3, [r6, #0]

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, payload, plength, retain, qos, false, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
 80a0962:	2200      	movs	r2, #0
            buffer[length++] = (nextMsgId & 0xFF);
            if (messageid != NULL)
                *messageid = nextMsgId++;
        }

        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
 80a0964:	b291      	uxth	r1, r2
 80a0966:	1883      	adds	r3, r0, r2
 80a0968:	458a      	cmp	sl, r1
 80a096a:	b29b      	uxth	r3, r3
 80a096c:	d909      	bls.n	80a0982 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x86>
 80a096e:	f8b4 6054 	ldrh.w	r6, [r4, #84]	; 0x54
 80a0972:	3201      	adds	r2, #1
 80a0974:	429e      	cmp	r6, r3
 80a0976:	d904      	bls.n	80a0982 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x86>
            buffer[length++] = payload[i];
 80a0978:	f819 6001 	ldrb.w	r6, [r9, r1]
 80a097c:	69e1      	ldr	r1, [r4, #28]
 80a097e:	54ce      	strb	r6, [r1, r3]
 80a0980:	e7f0      	b.n	80a0964 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x68>
        }

        uint8_t header = MQTTPUBLISH;
        if (retain) {
            header |= 1;
 80a0982:	f1b8 0f00 	cmp.w	r8, #0
 80a0986:	bf0c      	ite	eq
 80a0988:	2130      	moveq	r1, #48	; 0x30
 80a098a:	2131      	movne	r1, #49	; 0x31
        }

        if (dup) {
 80a098c:	b10f      	cbz	r7, 80a0992 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
            header |= DUP_FLAG_ON_MASK;
 80a098e:	f041 0108 	orr.w	r1, r1, #8
        }

        if (qos == QOS2)
 80a0992:	2d02      	cmp	r5, #2
 80a0994:	d102      	bne.n	80a099c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xa0>
            header |= MQTTQOS2_HEADER_MASK;
 80a0996:	f041 0104 	orr.w	r1, r1, #4
 80a099a:	e003      	b.n	80a09a4 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xa8>
        else if (qos == QOS1)
 80a099c:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
 80a099e:	bf08      	it	eq
 80a09a0:	f041 0102 	orreq.w	r1, r1, #2
        else
            header |= MQTTQOS0_HEADER_MASK;

        return write(header, buffer, length-5);
 80a09a4:	4620      	mov	r0, r4
 80a09a6:	3b05      	subs	r3, #5
 80a09a8:	69e2      	ldr	r2, [r4, #28]
 80a09aa:	b29b      	uxth	r3, r3
    }
    return false;
}
 80a09ac:	b001      	add	sp, #4
 80a09ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        else if (qos == QOS1)
            header |= MQTTQOS1_HEADER_MASK;
        else
            header |= MQTTQOS0_HEADER_MASK;

        return write(header, buffer, length-5);
 80a09b2:	f7ff be67 	b.w	80a0684 <_ZN4MQTT5writeEhPht>
    }
    return false;
}
 80a09b6:	b001      	add	sp, #4
 80a09b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a09bc <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain) {
    return publish(topic, payload, plength, retain, QOS0, NULL);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
 80a09bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
 80a09be:	9c08      	ldr	r4, [sp, #32]
 80a09c0:	9403      	str	r4, [sp, #12]
 80a09c2:	2400      	movs	r4, #0
 80a09c4:	9402      	str	r4, [sp, #8]
 80a09c6:	f89d 401c 	ldrb.w	r4, [sp, #28]
 80a09ca:	9401      	str	r4, [sp, #4]
 80a09cc:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80a09d0:	9400      	str	r4, [sp, #0]
 80a09d2:	f7ff ff93 	bl	80a08fc <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
 80a09d6:	b004      	add	sp, #16
 80a09d8:	bd10      	pop	{r4, pc}

080a09da <_ZN4MQTT7publishEPKcS1_>:
        return true;
    }
    return false;
}

bool MQTT::publish(const char* topic, const char* payload) {
 80a09da:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a09dc:	4605      	mov	r5, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
 80a09de:	4610      	mov	r0, r2
        return true;
    }
    return false;
}

bool MQTT::publish(const char* topic, const char* payload) {
 80a09e0:	460e      	mov	r6, r1
 80a09e2:	4614      	mov	r4, r2
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
 80a09e4:	f004 fee6 	bl	80a57b4 <strlen>
 80a09e8:	2300      	movs	r3, #0
 80a09ea:	9302      	str	r3, [sp, #8]
 80a09ec:	9301      	str	r3, [sp, #4]
 80a09ee:	9300      	str	r3, [sp, #0]
 80a09f0:	4622      	mov	r2, r4
 80a09f2:	4603      	mov	r3, r0
 80a09f4:	4631      	mov	r1, r6
 80a09f6:	4628      	mov	r0, r5
 80a09f8:	f7ff ffe0 	bl	80a09bc <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
 80a09fc:	b004      	add	sp, #16
 80a09fe:	bd70      	pop	{r4, r5, r6, pc}

080a0a00 <_ZN4MQTTD1Ev>:

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
}

MQTT::~MQTT() {
 80a0a00:	b510      	push	{r4, lr}
 80a0a02:	4604      	mov	r4, r0
    if (isConnected()) {
 80a0a04:	f7ff fe9f 	bl	80a0746 <_ZN4MQTT11isConnectedEv>
 80a0a08:	b110      	cbz	r0, 80a0a10 <_ZN4MQTTD1Ev+0x10>
        disconnect();
 80a0a0a:	4620      	mov	r0, r4
 80a0a0c:	f7ff fe6d 	bl	80a06ea <_ZN4MQTT10disconnectEv>
    }

    if (buffer != NULL)
 80a0a10:	69e0      	ldr	r0, [r4, #28]
 80a0a12:	b108      	cbz	r0, 80a0a18 <_ZN4MQTTD1Ev+0x18>
      delete[] buffer;
 80a0a14:	f7ff fb47 	bl	80a00a6 <_ZdaPv>

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
}

MQTT::~MQTT() {
 80a0a18:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a0a1c:	f001 fe2c 	bl	80a2678 <_ZN6StringD1Ev>
 80a0a20:	4620      	mov	r0, r4
 80a0a22:	f7ff fd67 	bl	80a04f4 <_ZN9TCPClientD1Ev>
        disconnect();
    }

    if (buffer != NULL)
      delete[] buffer;
}
 80a0a26:	4620      	mov	r0, r4
 80a0a28:	bd10      	pop	{r4, pc}
	...

080a0a2c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_b>:

bool MQTT::connect(const char *id, const char *user, const char *pass) {
    return connect(id, user, pass, 0, QOS0, 0, 0, true);
}

bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession) {
 80a0a2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a0a30:	b089      	sub	sp, #36	; 0x24
 80a0a32:	4604      	mov	r4, r0
 80a0a34:	4689      	mov	r9, r1
 80a0a36:	4617      	mov	r7, r2
 80a0a38:	461e      	mov	r6, r3
 80a0a3a:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    if (!isConnected()) {
 80a0a3e:	f7ff fe82 	bl	80a0746 <_ZN4MQTT11isConnectedEv>
 80a0a42:	4605      	mov	r5, r0
 80a0a44:	2800      	cmp	r0, #0
 80a0a46:	f040 80ae 	bne.w	80a0ba6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_b+0x17a>
        int result = 0;
        if (ip == NULL)
 80a0a4a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80a0a4c:	b939      	cbnz	r1, 80a0a5e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_b+0x32>
            result = _client.connect(this->domain.c_str(), this->port);
 80a0a4e:	4603      	mov	r3, r0
 80a0a50:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 80a0a54:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80a0a56:	4620      	mov	r0, r4
 80a0a58:	f001 ff00 	bl	80a285c <_ZN9TCPClient7connectEPKctm>
 80a0a5c:	e009      	b.n	80a0a72 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_b+0x46>
        else
            result = _client.connect(this->ip, this->port);
 80a0a5e:	a802      	add	r0, sp, #8
 80a0a60:	f001 fcc6 	bl	80a23f0 <_ZN9IPAddressC1EPKh>
 80a0a64:	462b      	mov	r3, r5
 80a0a66:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 80a0a6a:	a902      	add	r1, sp, #8
 80a0a6c:	4620      	mov	r0, r4
 80a0a6e:	f002 f855 	bl	80a2b1c <_ZN9TCPClient7connectE9IPAddresstm>

        if (result) {
 80a0a72:	2800      	cmp	r0, #0
 80a0a74:	f000 8093 	beq.w	80a0b9e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_b+0x172>
            nextMsgId = 1;
            uint8_t d[9] = {0x00,0x06,'M','Q','I','s','d','p',MQTTPROTOCOLVERSION};
 80a0a78:	4a4d      	ldr	r2, [pc, #308]	; (80a0bb0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_b+0x184>)
            result = _client.connect(this->domain.c_str(), this->port);
        else
            result = _client.connect(this->ip, this->port);

        if (result) {
            nextMsgId = 1;
 80a0a7a:	2301      	movs	r3, #1
            uint8_t d[9] = {0x00,0x06,'M','Q','I','s','d','p',MQTTPROTOCOLVERSION};
 80a0a7c:	6810      	ldr	r0, [r2, #0]
 80a0a7e:	6851      	ldr	r1, [r2, #4]
            result = _client.connect(this->domain.c_str(), this->port);
        else
            result = _client.connect(this->ip, this->port);

        if (result) {
            nextMsgId = 1;
 80a0a80:	8423      	strh	r3, [r4, #32]
            uint8_t d[9] = {0x00,0x06,'M','Q','I','s','d','p',MQTTPROTOCOLVERSION};
 80a0a82:	ab02      	add	r3, sp, #8
 80a0a84:	c303      	stmia	r3!, {r0, r1}
 80a0a86:	7a12      	ldrb	r2, [r2, #8]
 80a0a88:	701a      	strb	r2, [r3, #0]
 80a0a8a:	2305      	movs	r3, #5
            // Leave room in the buffer for header and variable length field
            uint16_t length = 5;
            unsigned int j;
            for (j = 0;j<9;j++) {
                buffer[length++] = d[j];
 80a0a8c:	a902      	add	r1, sp, #8
 80a0a8e:	4419      	add	r1, r3
 80a0a90:	69e2      	ldr	r2, [r4, #28]
 80a0a92:	f811 1c05 	ldrb.w	r1, [r1, #-5]
 80a0a96:	54d1      	strb	r1, [r2, r3]
 80a0a98:	3301      	adds	r3, #1
            nextMsgId = 1;
            uint8_t d[9] = {0x00,0x06,'M','Q','I','s','d','p',MQTTPROTOCOLVERSION};
            // Leave room in the buffer for header and variable length field
            uint16_t length = 5;
            unsigned int j;
            for (j = 0;j<9;j++) {
 80a0a9a:	2b0e      	cmp	r3, #14
 80a0a9c:	d1f6      	bne.n	80a0a8c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_b+0x60>
                buffer[length++] = d[j];
            }

            uint8_t v;
            if (willTopic) {
 80a0a9e:	f1b8 0f00 	cmp.w	r8, #0
 80a0aa2:	d00a      	beq.n	80a0aba <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_b+0x8e>
                v = 0x06|(willQos<<3)|(willRetain<<5);
 80a0aa4:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80a0aa8:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 80a0aac:	015b      	lsls	r3, r3, #5
 80a0aae:	f043 0306 	orr.w	r3, r3, #6
 80a0ab2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80a0ab6:	b2db      	uxtb	r3, r3
 80a0ab8:	e000      	b.n	80a0abc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_b+0x90>
            } else {
                v = 0x02;
 80a0aba:	2302      	movs	r3, #2
            }

            if (!cleanSession) {
 80a0abc:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 80a0ac0:	b90a      	cbnz	r2, 80a0ac6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_b+0x9a>
              v = v&0xfd;
 80a0ac2:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
            }

            if(user != NULL) {
 80a0ac6:	b12f      	cbz	r7, 80a0ad4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_b+0xa8>
                v = v|0x80;

                if(pass != NULL) {
 80a0ac8:	b916      	cbnz	r6, 80a0ad0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_b+0xa4>
            if (!cleanSession) {
              v = v&0xfd;
            }

            if(user != NULL) {
                v = v|0x80;
 80a0aca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80a0ace:	e001      	b.n	80a0ad4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_b+0xa8>

                if(pass != NULL) {
                    v = v|(0x80>>1);
 80a0ad0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
                }
            }

            buffer[length++] = v;
 80a0ad4:	69e2      	ldr	r2, [r4, #28]

            buffer[length++] = ((this->keepalive) >> 8);
            buffer[length++] = ((this->keepalive) & 0xFF);
            length = writeString(id, buffer, length);
 80a0ad6:	4649      	mov	r1, r9
                if(pass != NULL) {
                    v = v|(0x80>>1);
                }
            }

            buffer[length++] = v;
 80a0ad8:	7393      	strb	r3, [r2, #14]

            buffer[length++] = ((this->keepalive) >> 8);
 80a0ada:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80a0adc:	69e2      	ldr	r2, [r4, #28]
 80a0ade:	121b      	asrs	r3, r3, #8
 80a0ae0:	73d3      	strb	r3, [r2, #15]
            buffer[length++] = ((this->keepalive) & 0xFF);
 80a0ae2:	69e3      	ldr	r3, [r4, #28]
 80a0ae4:	6d22      	ldr	r2, [r4, #80]	; 0x50
            length = writeString(id, buffer, length);
 80a0ae6:	4620      	mov	r0, r4
            }

            buffer[length++] = v;

            buffer[length++] = ((this->keepalive) >> 8);
            buffer[length++] = ((this->keepalive) & 0xFF);
 80a0ae8:	741a      	strb	r2, [r3, #16]
            length = writeString(id, buffer, length);
 80a0aea:	69e2      	ldr	r2, [r4, #28]
 80a0aec:	2311      	movs	r3, #17
 80a0aee:	f7ff fe10 	bl	80a0712 <_ZN4MQTT11writeStringEPKcPht>
            if (willTopic) {
 80a0af2:	f1b8 0f00 	cmp.w	r8, #0
 80a0af6:	d00b      	beq.n	80a0b10 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_b+0xe4>
                length = writeString(willTopic, buffer, length);
 80a0af8:	4603      	mov	r3, r0
 80a0afa:	69e2      	ldr	r2, [r4, #28]
 80a0afc:	4641      	mov	r1, r8
 80a0afe:	4620      	mov	r0, r4
 80a0b00:	f7ff fe07 	bl	80a0712 <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
 80a0b04:	69e2      	ldr	r2, [r4, #28]
 80a0b06:	4603      	mov	r3, r0
 80a0b08:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80a0b0a:	4620      	mov	r0, r4
 80a0b0c:	f7ff fe01 	bl	80a0712 <_ZN4MQTT11writeStringEPKcPht>
            }

            if(user != NULL) {
 80a0b10:	b167      	cbz	r7, 80a0b2c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_b+0x100>
                length = writeString(user,buffer,length);
 80a0b12:	4603      	mov	r3, r0
 80a0b14:	69e2      	ldr	r2, [r4, #28]
 80a0b16:	4639      	mov	r1, r7
 80a0b18:	4620      	mov	r0, r4
 80a0b1a:	f7ff fdfa 	bl	80a0712 <_ZN4MQTT11writeStringEPKcPht>
                if(pass != NULL) {
 80a0b1e:	b12e      	cbz	r6, 80a0b2c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_b+0x100>
                    length = writeString(pass,buffer,length);
 80a0b20:	4603      	mov	r3, r0
 80a0b22:	69e2      	ldr	r2, [r4, #28]
 80a0b24:	4631      	mov	r1, r6
 80a0b26:	4620      	mov	r0, r4
 80a0b28:	f7ff fdf3 	bl	80a0712 <_ZN4MQTT11writeStringEPKcPht>
                }
            }

            write(MQTTCONNECT, buffer, length-5);
 80a0b2c:	1f43      	subs	r3, r0, #5
 80a0b2e:	b29b      	uxth	r3, r3
 80a0b30:	69e2      	ldr	r2, [r4, #28]
 80a0b32:	2110      	movs	r1, #16
 80a0b34:	4620      	mov	r0, r4
 80a0b36:	f7ff fda5 	bl	80a0684 <_ZN4MQTT5writeEhPht>
 80a0b3a:	f000 fed7 	bl	80a18ec <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();

            while (!_client.available()) {
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
 80a0b3e:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
                    length = writeString(pass,buffer,length);
                }
            }

            write(MQTTCONNECT, buffer, length-5);
            lastInActivity = lastOutActivity = millis();
 80a0b42:	6260      	str	r0, [r4, #36]	; 0x24
 80a0b44:	62a0      	str	r0, [r4, #40]	; 0x28

            while (!_client.available()) {
 80a0b46:	4620      	mov	r0, r4
 80a0b48:	f001 ff4e 	bl	80a29e8 <_ZN9TCPClient9availableEv>
 80a0b4c:	b940      	cbnz	r0, 80a0b60 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_b+0x134>
 80a0b4e:	f000 fecd 	bl	80a18ec <HAL_Timer_Get_Milli_Seconds>
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
 80a0b52:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80a0b54:	1ac0      	subs	r0, r0, r3
 80a0b56:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80a0b58:	4373      	muls	r3, r6
 80a0b5a:	4298      	cmp	r0, r3
 80a0b5c:	d9f3      	bls.n	80a0b46 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_b+0x11a>
 80a0b5e:	e01e      	b.n	80a0b9e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_b+0x172>
                    _client.stop();
                    return false;
                }
            }
            uint8_t llen;
            uint16_t len = readPacket(&llen);
 80a0b60:	f10d 0107 	add.w	r1, sp, #7
 80a0b64:	4620      	mov	r0, r4
 80a0b66:	f7ff fd35 	bl	80a05d4 <_ZN4MQTT10readPacketEPh>

            if (len == 4) {
 80a0b6a:	2804      	cmp	r0, #4
 80a0b6c:	d117      	bne.n	80a0b9e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_b+0x172>
                if (buffer[3] == CONN_ACCEPT) {
 80a0b6e:	69e3      	ldr	r3, [r4, #28]
 80a0b70:	78de      	ldrb	r6, [r3, #3]
 80a0b72:	b966      	cbnz	r6, 80a0b8e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_b+0x162>
 80a0b74:	f000 feba 	bl	80a18ec <HAL_Timer_Get_Milli_Seconds>
                    lastInActivity = millis();
                    pingOutstanding = false;
 80a0b78:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
            uint8_t llen;
            uint16_t len = readPacket(&llen);

            if (len == 4) {
                if (buffer[3] == CONN_ACCEPT) {
                    lastInActivity = millis();
 80a0b7c:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
                    debug_print(" Connect success\n");
 80a0b7e:	f002 fabd 	bl	80a30fc <_Z16_fetch_usbserialv>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
 80a0b82:	4a0c      	ldr	r2, [pc, #48]	; (80a0bb4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_b+0x188>)
 80a0b84:	4631      	mov	r1, r6
 80a0b86:	f001 fcaa 	bl	80a24de <_ZN5Print11printf_implEbPKcz>
                    return true;
 80a0b8a:	2501      	movs	r5, #1
 80a0b8c:	e00c      	b.n	80a0ba8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_b+0x17c>
                } else {
                    // check EMQTT_CONNACK_RESPONSE code.
                    debug_print(" Connect fail. code = [%d]\n", buffer[3]);
 80a0b8e:	f002 fab5 	bl	80a30fc <_Z16_fetch_usbserialv>
 80a0b92:	69e3      	ldr	r3, [r4, #28]
 80a0b94:	4a08      	ldr	r2, [pc, #32]	; (80a0bb8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_b+0x18c>)
 80a0b96:	78db      	ldrb	r3, [r3, #3]
 80a0b98:	2100      	movs	r1, #0
 80a0b9a:	f001 fca0 	bl	80a24de <_ZN5Print11printf_implEbPKcz>
                }
            }
        }
        _client.stop();
 80a0b9e:	4620      	mov	r0, r4
 80a0ba0:	f001 ff60 	bl	80a2a64 <_ZN9TCPClient4stopEv>
 80a0ba4:	e000      	b.n	80a0ba8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_b+0x17c>
    }
    return false;
 80a0ba6:	2500      	movs	r5, #0
}
 80a0ba8:	4628      	mov	r0, r5
 80a0baa:	b009      	add	sp, #36	; 0x24
 80a0bac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a0bb0:	080a7b28 	.word	0x080a7b28
 80a0bb4:	080a7b31 	.word	0x080a7b31
 80a0bb8:	080a7b50 	.word	0x080a7b50

080a0bbc <_ZN4MQTT7connectEPKc>:
void MQTT::addQosCallback(void (*qoscallback)(unsigned int)) {
    this->qoscallback = qoscallback;
}


bool MQTT::connect(const char *id) {
 80a0bbc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
 80a0bbe:	2301      	movs	r3, #1
 80a0bc0:	9304      	str	r3, [sp, #16]
 80a0bc2:	2300      	movs	r3, #0
 80a0bc4:	9303      	str	r3, [sp, #12]
 80a0bc6:	9302      	str	r3, [sp, #8]
 80a0bc8:	9301      	str	r3, [sp, #4]
 80a0bca:	9300      	str	r3, [sp, #0]
 80a0bcc:	461a      	mov	r2, r3
 80a0bce:	f7ff ff2d 	bl	80a0a2c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_b>
}
 80a0bd2:	b007      	add	sp, #28
 80a0bd4:	f85d fb04 	ldr.w	pc, [sp], #4

080a0bd8 <_GLOBAL__sub_I__ZN4MQTTC2Ev>:
 80a0bd8:	f000 bea0 	b.w	80a191c <HAL_Pin_Map>

080a0bdc <_GLOBAL__sub_I__ZN9MaxMatrixC2Ehhhh>:
 80a0bdc:	f000 be9e 	b.w	80a191c <HAL_Pin_Map>

080a0be0 <_ZN7PCF8574C1Ei>:

#include "PCF8574.h"

#include <Wire.h>

PCF8574::PCF8574(int address)
 80a0be0:	b538      	push	{r3, r4, r5, lr}
 80a0be2:	4604      	mov	r4, r0
 80a0be4:	460d      	mov	r5, r1
 80a0be6:	f000 fe81 	bl	80a18ec <HAL_Timer_Get_Milli_Seconds>
 80a0bea:	f002 fec1 	bl	80a3970 <__aeabi_ui2d>
 80a0bee:	2300      	movs	r3, #0
 80a0bf0:	61a3      	str	r3, [r4, #24]
 80a0bf2:	61e3      	str	r3, [r4, #28]
 80a0bf4:	2301      	movs	r3, #1
 80a0bf6:	e9c4 0104 	strd	r0, r1, [r4, #16]
 80a0bfa:	7623      	strb	r3, [r4, #24]
{
  _address = address;
 80a0bfc:	6025      	str	r5, [r4, #0]
  Wire.begin();
 80a0bfe:	f002 fbcb 	bl	80a3398 <_Z19__fetch_global_Wirev>
 80a0c02:	f001 fb7f 	bl	80a2304 <_ZN7TwoWire5beginEv>
}
 80a0c06:	4620      	mov	r0, r4
 80a0c08:	bd38      	pop	{r3, r4, r5, pc}

080a0c0a <_ZN7PCF85745read8Ev>:

uint8_t PCF8574::read8()
{
 80a0c0a:	b510      	push	{r4, lr}
 80a0c0c:	4604      	mov	r4, r0
  Wire.beginTransmission(_address);
 80a0c0e:	f002 fbc3 	bl	80a3398 <_Z19__fetch_global_Wirev>
 80a0c12:	6821      	ldr	r1, [r4, #0]
 80a0c14:	f001 fb8e 	bl	80a2334 <_ZN7TwoWire17beginTransmissionEi>
  Wire.requestFrom(_address, 1);
 80a0c18:	f002 fbbe 	bl	80a3398 <_Z19__fetch_global_Wirev>
 80a0c1c:	2201      	movs	r2, #1
 80a0c1e:	6821      	ldr	r1, [r4, #0]
 80a0c20:	f001 fb7f 	bl	80a2322 <_ZN7TwoWire11requestFromEii>
  _data = Wire.read();
 80a0c24:	f002 fbb8 	bl	80a3398 <_Z19__fetch_global_Wirev>
 80a0c28:	6803      	ldr	r3, [r0, #0]
 80a0c2a:	695b      	ldr	r3, [r3, #20]
 80a0c2c:	4798      	blx	r3
 80a0c2e:	7120      	strb	r0, [r4, #4]
  _error = Wire.endTransmission();
 80a0c30:	f002 fbb2 	bl	80a3398 <_Z19__fetch_global_Wirev>
 80a0c34:	f001 fb85 	bl	80a2342 <_ZN7TwoWire15endTransmissionEv>
 80a0c38:	60a0      	str	r0, [r4, #8]
  return _data;
}
 80a0c3a:	7920      	ldrb	r0, [r4, #4]
 80a0c3c:	bd10      	pop	{r4, pc}

080a0c3e <_ZN7PCF85744readEh>:
  Wire.write(_data);
  _error = Wire.endTransmission();
}

uint8_t PCF8574::read(uint8_t pin)
{
 80a0c3e:	b538      	push	{r3, r4, r5, lr}
 80a0c40:	4605      	mov	r5, r0
 80a0c42:	460c      	mov	r4, r1
  PCF8574::read8();
 80a0c44:	f7ff ffe1 	bl	80a0c0a <_ZN7PCF85745read8Ev>
  return (_data & (1<<pin)) > 0;
 80a0c48:	2301      	movs	r3, #1
 80a0c4a:	792a      	ldrb	r2, [r5, #4]
 80a0c4c:	fa03 f104 	lsl.w	r1, r3, r4
 80a0c50:	420a      	tst	r2, r1
}
 80a0c52:	bf14      	ite	ne
 80a0c54:	4618      	movne	r0, r3
 80a0c56:	2000      	moveq	r0, #0
 80a0c58:	bd38      	pop	{r3, r4, r5, pc}
	...

080a0c5c <_ZN7PCF857412buttonPushedEh>:
  _data <<= n;
  PCF8574::write8(_data);
}

bool PCF8574::buttonPushed(uint8_t pin)
{
 80a0c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  _buttonPushed[pin] = false;
 80a0c5e:	1844      	adds	r4, r0, r1
 80a0c60:	2700      	movs	r7, #0
 80a0c62:	f884 7020 	strb.w	r7, [r4, #32]
  _data <<= n;
  PCF8574::write8(_data);
}

bool PCF8574::buttonPushed(uint8_t pin)
{
 80a0c66:	4605      	mov	r5, r0
  _buttonPushed[pin] = false;
  if (read(pin) != true)
 80a0c68:	f7ff ffe9 	bl	80a0c3e <_ZN7PCF85744readEh>
 80a0c6c:	2801      	cmp	r0, #1
 80a0c6e:	4606      	mov	r6, r0
 80a0c70:	d00c      	beq.n	80a0c8c <_ZN7PCF857412buttonPushedEh+0x30>
  {
    if (_oldState[pin] == true)
 80a0c72:	7e23      	ldrb	r3, [r4, #24]
 80a0c74:	b1c3      	cbz	r3, 80a0ca8 <_ZN7PCF857412buttonPushedEh+0x4c>
    {
      _oldState[pin] = false;
 80a0c76:	7627      	strb	r7, [r4, #24]
 80a0c78:	f000 fe38 	bl	80a18ec <HAL_Timer_Get_Milli_Seconds>
      _lastTimevalidPush = millis();
 80a0c7c:	f002 fe78 	bl	80a3970 <__aeabi_ui2d>
      _buttonPushed[pin] = true;
 80a0c80:	2301      	movs	r3, #1
  if (read(pin) != true)
  {
    if (_oldState[pin] == true)
    {
      _oldState[pin] = false;
      _lastTimevalidPush = millis();
 80a0c82:	e9c5 0104 	strd	r0, r1, [r5, #16]
      _buttonPushed[pin] = true;
 80a0c86:	f884 3020 	strb.w	r3, [r4, #32]
 80a0c8a:	e00d      	b.n	80a0ca8 <_ZN7PCF857412buttonPushedEh+0x4c>
 80a0c8c:	f000 fe2e 	bl	80a18ec <HAL_Timer_Get_Milli_Seconds>
    }
  }
  else
  {
    if ((millis() - _lastTimevalidPush) <= 50)
 80a0c90:	f002 fe6e 	bl	80a3970 <__aeabi_ui2d>
 80a0c94:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 80a0c98:	f002 fd2c 	bl	80a36f4 <__aeabi_dsub>
 80a0c9c:	2200      	movs	r2, #0
 80a0c9e:	4b04      	ldr	r3, [pc, #16]	; (80a0cb0 <_ZN7PCF857412buttonPushedEh+0x54>)
 80a0ca0:	f003 f958 	bl	80a3f54 <__aeabi_dcmple>
 80a0ca4:	b900      	cbnz	r0, 80a0ca8 <_ZN7PCF857412buttonPushedEh+0x4c>
    {

    }
    else
    {
      _oldState[pin] = true;
 80a0ca6:	7626      	strb	r6, [r4, #24]
    }
  }
  return _buttonPushed[pin];
}
 80a0ca8:	f894 0020 	ldrb.w	r0, [r4, #32]
 80a0cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a0cae:	bf00      	nop
 80a0cb0:	40490000 	.word	0x40490000

080a0cb4 <_GLOBAL__sub_I__ZN7PCF8574C2Ei>:
 80a0cb4:	f000 be32 	b.w	80a191c <HAL_Pin_Map>

080a0cb8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt7_Mem_fnIM12StateMachineFvvEEPS3_EEE9_M_invokeERKSt9_Any_data>:
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a0cb8:	6803      	ldr	r3, [r0, #0]
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class* __object, _Args&&... __args) const
	{ return (__object->*_M_pmf)(std::forward<_Args>(__args)...); }
 80a0cba:	685a      	ldr	r2, [r3, #4]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a0cbc:	6898      	ldr	r0, [r3, #8]
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class* __object, _Args&&... __args) const
	{ return (__object->*_M_pmf)(std::forward<_Args>(__args)...); }
 80a0cbe:	f012 0f01 	tst.w	r2, #1
 80a0cc2:	ea4f 0262 	mov.w	r2, r2, asr #1
 80a0cc6:	bf18      	it	ne
 80a0cc8:	5881      	ldrne	r1, [r0, r2]
 80a0cca:	681b      	ldr	r3, [r3, #0]
 80a0ccc:	4410      	add	r0, r2
 80a0cce:	bf18      	it	ne
 80a0cd0:	58cb      	ldrne	r3, [r1, r3]
 80a0cd2:	4718      	bx	r3

080a0cd4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt7_Mem_fnIM10SaunaClockFvvEEPS3_EEE9_M_invokeERKSt9_Any_data>:
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a0cd4:	6803      	ldr	r3, [r0, #0]
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class* __object, _Args&&... __args) const
	{ return (__object->*_M_pmf)(std::forward<_Args>(__args)...); }
 80a0cd6:	685a      	ldr	r2, [r3, #4]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a0cd8:	6898      	ldr	r0, [r3, #8]
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class* __object, _Args&&... __args) const
	{ return (__object->*_M_pmf)(std::forward<_Args>(__args)...); }
 80a0cda:	f012 0f01 	tst.w	r2, #1
 80a0cde:	ea4f 0262 	mov.w	r2, r2, asr #1
 80a0ce2:	bf18      	it	ne
 80a0ce4:	5881      	ldrne	r1, [r0, r2]
 80a0ce6:	681b      	ldr	r3, [r3, #0]
 80a0ce8:	4410      	add	r0, r2
 80a0cea:	bf18      	it	ne
 80a0cec:	58cb      	ldrne	r3, [r1, r3]
 80a0cee:	4718      	bx	r3

080a0cf0 <_Z7got_DSTPKcS0_>:

/**********************************************************************
functions
/*********************************************************************/
void got_DST(const char *name, const char *data) // helper function after Daylight Sayving Time (DST) flag gas been received in *data buffer
{
 80a0cf0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    String received_data = String(data);
 80a0cf2:	4668      	mov	r0, sp
 80a0cf4:	f001 fd07 	bl	80a2706 <_ZN6StringC1EPK19__FlashStringHelper>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 80a0cf8:	490e      	ldr	r1, [pc, #56]	; (80a0d34 <_Z7got_DSTPKcS0_+0x44>)
 80a0cfa:	4668      	mov	r0, sp
 80a0cfc:	f001 fd3e 	bl	80a277c <_ZNK6String6equalsEPKc>
 80a0d00:	490d      	ldr	r1, [pc, #52]	; (80a0d38 <_Z7got_DSTPKcS0_+0x48>)
 80a0d02:	4604      	mov	r4, r0
 80a0d04:	4668      	mov	r0, sp
 80a0d06:	f001 fd39 	bl	80a277c <_ZNK6String6equalsEPKc>
    if (received_data == "0" | received_data == "1") // check if received value is either "1" or "0", otherwise do nothing
 80a0d0a:	4320      	orrs	r0, r4
 80a0d0c:	f010 0fff 	tst.w	r0, #255	; 0xff
 80a0d10:	d007      	beq.n	80a0d22 <_Z7got_DSTPKcS0_+0x32>
    {
      Time.zone(+1+received_data.toInt()); // set timezone to EUROPE/0bERLIN + DST offset (CEST +1 h)
 80a0d12:	4668      	mov	r0, sp
 80a0d14:	f001 fd44 	bl	80a27a0 <_ZNK6String5toIntEv>
 80a0d18:	3001      	adds	r0, #1
 80a0d1a:	f003 fa8b 	bl	80a4234 <__aeabi_i2f>
 80a0d1e:	f002 f815 	bl	80a2d4c <_ZN9TimeClass4zoneEf>
    }
    DataStorage.dstRequested = FALSE;
 80a0d22:	4b06      	ldr	r3, [pc, #24]	; (80a0d3c <_Z7got_DSTPKcS0_+0x4c>)
 80a0d24:	2200      	movs	r2, #0
/**********************************************************************
functions
/*********************************************************************/
void got_DST(const char *name, const char *data) // helper function after Daylight Sayving Time (DST) flag gas been received in *data buffer
{
    String received_data = String(data);
 80a0d26:	4668      	mov	r0, sp
    if (received_data == "0" | received_data == "1") // check if received value is either "1" or "0", otherwise do nothing
    {
      Time.zone(+1+received_data.toInt()); // set timezone to EUROPE/0bERLIN + DST offset (CEST +1 h)
    }
    DataStorage.dstRequested = FALSE;
 80a0d28:	701a      	strb	r2, [r3, #0]
/**********************************************************************
functions
/*********************************************************************/
void got_DST(const char *name, const char *data) // helper function after Daylight Sayving Time (DST) flag gas been received in *data buffer
{
    String received_data = String(data);
 80a0d2a:	f001 fca5 	bl	80a2678 <_ZN6StringD1Ev>
    if (received_data == "0" | received_data == "1") // check if received value is either "1" or "0", otherwise do nothing
    {
      Time.zone(+1+received_data.toInt()); // set timezone to EUROPE/0bERLIN + DST offset (CEST +1 h)
    }
    DataStorage.dstRequested = FALSE;
}
 80a0d2e:	b004      	add	sp, #16
 80a0d30:	bd10      	pop	{r4, pc}
 80a0d32:	bf00      	nop
 80a0d34:	080a7c88 	.word	0x080a7c88
 80a0d38:	080a7e25 	.word	0x080a7e25
 80a0d3c:	2000047c 	.word	0x2000047c

080a0d40 <_Z8got_TempPKcS0_>:

void got_Temp(const char *name, const char *data) // got wunderground temperature back
{
 80a0d40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    String received_data = String(data); // store received Data in String variable
 80a0d42:	4668      	mov	r0, sp
 80a0d44:	f001 fcdf 	bl	80a2706 <_ZN6StringC1EPK19__FlashStringHelper>
    DataStorage.outsideTemp = received_data.toFloat(); // translate received_data into int and store in object
 80a0d48:	4668      	mov	r0, sp
 80a0d4a:	f001 fd2e 	bl	80a27aa <_ZNK6String7toFloatEv>
 80a0d4e:	4b06      	ldr	r3, [pc, #24]	; (80a0d68 <_Z8got_TempPKcS0_+0x28>)
    DataStorage.weatherRequested = FALSE;
 80a0d50:	2200      	movs	r2, #0
}

void got_Temp(const char *name, const char *data) // got wunderground temperature back
{
    String received_data = String(data); // store received Data in String variable
    DataStorage.outsideTemp = received_data.toFloat(); // translate received_data into int and store in object
 80a0d52:	6058      	str	r0, [r3, #4]
    DataStorage.weatherRequested = FALSE;
 80a0d54:	705a      	strb	r2, [r3, #1]
    DataStorage.dstRequested = FALSE;
}

void got_Temp(const char *name, const char *data) // got wunderground temperature back
{
    String received_data = String(data); // store received Data in String variable
 80a0d56:	4668      	mov	r0, sp
    DataStorage.outsideTemp = received_data.toFloat(); // translate received_data into int and store in object
    DataStorage.weatherRequested = FALSE;
    DataStorage.updateTemp = TRUE;
 80a0d58:	2201      	movs	r2, #1
 80a0d5a:	709a      	strb	r2, [r3, #2]
    DataStorage.dstRequested = FALSE;
}

void got_Temp(const char *name, const char *data) // got wunderground temperature back
{
    String received_data = String(data); // store received Data in String variable
 80a0d5c:	f001 fc8c 	bl	80a2678 <_ZN6StringD1Ev>
    DataStorage.outsideTemp = received_data.toFloat(); // translate received_data into int and store in object
    DataStorage.weatherRequested = FALSE;
    DataStorage.updateTemp = TRUE;
}
 80a0d60:	b005      	add	sp, #20
 80a0d62:	f85d fb04 	ldr.w	pc, [sp], #4
 80a0d66:	bf00      	nop
 80a0d68:	2000047c 	.word	0x2000047c

080a0d6c <_Z8callbackPcPhj>:


void callback(char* topic, byte* payload, unsigned int length) {
 80a0d6c:	b580      	push	{r7, lr}
    char p[length + 1];
 80a0d6e:	3208      	adds	r2, #8
 80a0d70:	f022 0207 	bic.w	r2, r2, #7
    DataStorage.weatherRequested = FALSE;
    DataStorage.updateTemp = TRUE;
}


void callback(char* topic, byte* payload, unsigned int length) {
 80a0d74:	af00      	add	r7, sp, #0
    char p[length + 1];
    memcpy(p, payload, length);
    p[length] = NULL;

    if (!strcmp(p, "RED"))
      delay(1);
 80a0d76:	2001      	movs	r0, #1
    DataStorage.updateTemp = TRUE;
}


void callback(char* topic, byte* payload, unsigned int length) {
    char p[length + 1];
 80a0d78:	ebad 0d02 	sub.w	sp, sp, r2
    memcpy(p, payload, length);
    p[length] = NULL;

    if (!strcmp(p, "RED"))
      delay(1);
 80a0d7c:	f000 ffcc 	bl	80a1d18 <delay>
      delay(1);
    else if (!strcmp(p, "0bLUE"))
      delay(1);
    else
      delay(1);
    delay(1000);
 80a0d80:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a0d84:	f000 ffc8 	bl	80a1d18 <delay>
}
 80a0d88:	46bd      	mov	sp, r7
 80a0d8a:	bd80      	pop	{r7, pc}

080a0d8c <_ZN5Timer7timeoutEv>:

    /*
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
 80a0d8c:	b510      	push	{r4, lr}
    {
		running = true;
 80a0d8e:	2301      	movs	r3, #1
 80a0d90:	7103      	strb	r3, [r0, #4]
        if (callback)
 80a0d92:	6943      	ldr	r3, [r0, #20]

    /*
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
 80a0d94:	4604      	mov	r4, r0
    {
		running = true;
        if (callback)
 80a0d96:	b113      	cbz	r3, 80a0d9e <_ZN5Timer7timeoutEv+0x12>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0d98:	6983      	ldr	r3, [r0, #24]
 80a0d9a:	300c      	adds	r0, #12
 80a0d9c:	4798      	blx	r3
        {
            callback();
        }
        running = false;
 80a0d9e:	2300      	movs	r3, #0
 80a0da0:	7123      	strb	r3, [r4, #4]
 80a0da2:	bd10      	pop	{r4, pc}

080a0da4 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
 80a0da4:	b507      	push	{r0, r1, r2, lr}
    {
        void* timer_id = NULL;
 80a0da6:	2300      	movs	r3, #0
 80a0da8:	a902      	add	r1, sp, #8
 80a0daa:	f841 3d04 	str.w	r3, [r1, #-4]!
        if (!os_timer_get_id(timer, &timer_id)) {
 80a0dae:	f000 fd6d 	bl	80a188c <os_timer_get_id>
 80a0db2:	b920      	cbnz	r0, 80a0dbe <_ZN5Timer12invoke_timerEPv+0x1a>
            if (timer_id)
 80a0db4:	9801      	ldr	r0, [sp, #4]
 80a0db6:	b110      	cbz	r0, 80a0dbe <_ZN5Timer12invoke_timerEPv+0x1a>
                ((Timer*)timer_id)->timeout();
 80a0db8:	6803      	ldr	r3, [r0, #0]
 80a0dba:	689b      	ldr	r3, [r3, #8]
 80a0dbc:	4798      	blx	r3
        }
    }
 80a0dbe:	b003      	add	sp, #12
 80a0dc0:	f85d fb04 	ldr.w	pc, [sp], #4

080a0dc4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM10SaunaClockFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a0dc4:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a0dc6:	b538      	push	{r3, r4, r5, lr}
 80a0dc8:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a0dca:	d005      	beq.n	80a0dd8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM10SaunaClockFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x14>
 80a0dcc:	2a03      	cmp	r2, #3
 80a0dce:	d00f      	beq.n	80a0df0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM10SaunaClockFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x2c>
 80a0dd0:	2a01      	cmp	r2, #1
 80a0dd2:	d110      	bne.n	80a0df6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM10SaunaClockFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x32>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a0dd4:	680b      	ldr	r3, [r1, #0]
 80a0dd6:	e009      	b.n	80a0dec <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM10SaunaClockFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x28>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a0dd8:	200c      	movs	r0, #12
 80a0dda:	680d      	ldr	r5, [r1, #0]
 80a0ddc:	f7ff f95d 	bl	80a009a <_Znwj>
 80a0de0:	4603      	mov	r3, r0
 80a0de2:	b118      	cbz	r0, 80a0dec <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM10SaunaClockFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x28>
 80a0de4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80a0de8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80a0dec:	6023      	str	r3, [r4, #0]
 80a0dee:	e002      	b.n	80a0df6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM10SaunaClockFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x32>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a0df0:	6800      	ldr	r0, [r0, #0]
 80a0df2:	f7ff f956 	bl	80a00a2 <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a0df6:	2000      	movs	r0, #0
 80a0df8:	bd38      	pop	{r3, r4, r5, pc}
	...

080a0dfc <_ZN10CloudClass7publishEPKc.isra.8>:

extern CloudClass Spark __attribute__((deprecated("Spark is now Particle.")));
extern CloudClass Particle;

// Deprecated methods
inline particle::Future<bool> CloudClass::publish(const char* name) {
 80a0dfc:	b513      	push	{r0, r1, r4, lr}
 80a0dfe:	4604      	mov	r4, r0
 80a0e00:	4b05      	ldr	r3, [pc, #20]	; (80a0e18 <_ZN10CloudClass7publishEPKc.isra.8+0x1c>)
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a0e02:	2200      	movs	r2, #0
 80a0e04:	781b      	ldrb	r3, [r3, #0]
 80a0e06:	f88d 3000 	strb.w	r3, [sp]
 80a0e0a:	233c      	movs	r3, #60	; 0x3c
 80a0e0c:	f001 f8d0 	bl	80a1fb0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
extern CloudClass Particle;

// Deprecated methods
inline particle::Future<bool> CloudClass::publish(const char* name) {
    return publish(name, PUBLIC);
}
 80a0e10:	4620      	mov	r0, r4
 80a0e12:	b002      	add	sp, #8
 80a0e14:	bd10      	pop	{r4, pc}
 80a0e16:	bf00      	nop
 80a0e18:	200004a0 	.word	0x200004a0

080a0e1c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM12StateMachineFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a0e1c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a0e1e:	b538      	push	{r3, r4, r5, lr}
 80a0e20:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a0e22:	d005      	beq.n	80a0e30 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM12StateMachineFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x14>
 80a0e24:	2a03      	cmp	r2, #3
 80a0e26:	d00f      	beq.n	80a0e48 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM12StateMachineFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x2c>
 80a0e28:	2a01      	cmp	r2, #1
 80a0e2a:	d110      	bne.n	80a0e4e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM12StateMachineFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x32>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a0e2c:	680b      	ldr	r3, [r1, #0]
 80a0e2e:	e009      	b.n	80a0e44 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM12StateMachineFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x28>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a0e30:	200c      	movs	r0, #12
 80a0e32:	680d      	ldr	r5, [r1, #0]
 80a0e34:	f7ff f931 	bl	80a009a <_Znwj>
 80a0e38:	4603      	mov	r3, r0
 80a0e3a:	b118      	cbz	r0, 80a0e44 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM12StateMachineFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x28>
 80a0e3c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80a0e40:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80a0e44:	6023      	str	r3, [r4, #0]
 80a0e46:	e002      	b.n	80a0e4e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM12StateMachineFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x32>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a0e48:	6800      	ldr	r0, [r0, #0]
 80a0e4a:	f7ff f92a 	bl	80a00a2 <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a0e4e:	2000      	movs	r0, #0
 80a0e50:	bd38      	pop	{r3, r4, r5, pc}

080a0e52 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0e52:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a0e54:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0e56:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a0e58:	b113      	cbz	r3, 80a0e60 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0e5a:	2203      	movs	r2, #3
 80a0e5c:	4601      	mov	r1, r0
 80a0e5e:	4798      	blx	r3
    }
 80a0e60:	4620      	mov	r0, r4
 80a0e62:	bd10      	pop	{r4, pc}

080a0e64 <_ZN5TimerC1EjSt8functionIFvvEEb>:
{
public:

    typedef std::function<void(void)> timer_callback_fn;

    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
 80a0e64:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0e66:	4604      	mov	r4, r0
 80a0e68:	468e      	mov	lr, r1
 80a0e6a:	4915      	ldr	r1, [pc, #84]	; (80a0ec0 <_ZN5TimerC1EjSt8functionIFvvEEb+0x5c>)
 80a0e6c:	2500      	movs	r5, #0
 80a0e6e:	b085      	sub	sp, #20
 80a0e70:	7105      	strb	r5, [r0, #4]
 80a0e72:	6085      	str	r5, [r0, #8]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0e74:	6145      	str	r5, [r0, #20]
 80a0e76:	6001      	str	r1, [r0, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0e78:	af02      	add	r7, sp, #8
 80a0e7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 80a0e7e:	e887 0003 	stmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a0e82:	f104 060c 	add.w	r6, r4, #12
 80a0e86:	e896 0003 	ldmia.w	r6, {r0, r1}
 80a0e8a:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a0e8e:	e897 0003 	ldmia.w	r7, {r0, r1}
 80a0e92:	e886 0003 	stmia.w	r6, {r0, r1}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0e96:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
 80a0e98:	6960      	ldr	r0, [r4, #20]
 80a0e9a:	6090      	str	r0, [r2, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0e9c:	6161      	str	r1, [r4, #20]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0e9e:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a0ea0:	69a0      	ldr	r0, [r4, #24]
 80a0ea2:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0ea4:	61a1      	str	r1, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
 80a0ea6:	e88d 0028 	stmia.w	sp, {r3, r5}
 80a0eaa:	4a06      	ldr	r2, [pc, #24]	; (80a0ec4 <_ZN5TimerC1EjSt8functionIFvvEEb+0x60>)
 80a0eac:	4623      	mov	r3, r4
 80a0eae:	4671      	mov	r1, lr
 80a0eb0:	f104 0008 	add.w	r0, r4, #8
 80a0eb4:	f000 fcda 	bl	80a186c <os_timer_create>
    }
 80a0eb8:	4620      	mov	r0, r4
 80a0eba:	b005      	add	sp, #20
 80a0ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0ebe:	bf00      	nop
 80a0ec0:	080a7b84 	.word	0x080a7b84
 80a0ec4:	080a0da5 	.word	0x080a0da5

080a0ec8 <_ZN5Timer4stopEj>:
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
 80a0ec8:	b507      	push	{r0, r1, r2, lr}
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
    }

    bool _stop(unsigned block, bool fromISR=false)
    {
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
 80a0eca:	6880      	ldr	r0, [r0, #8]
 80a0ecc:	2300      	movs	r3, #0
 80a0ece:	b140      	cbz	r0, 80a0ee2 <_ZN5Timer4stopEj+0x1a>
 80a0ed0:	e88d 000a 	stmia.w	sp, {r1, r3}
 80a0ed4:	461a      	mov	r2, r3
 80a0ed6:	2102      	movs	r1, #2
 80a0ed8:	f000 fce0 	bl	80a189c <os_timer_change>
 80a0edc:	fab0 f080 	clz	r0, r0
 80a0ee0:	0940      	lsrs	r0, r0, #5
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
 80a0ee2:	b003      	add	sp, #12
 80a0ee4:	f85d fb04 	ldr.w	pc, [sp], #4

080a0ee8 <_ZN5Timer5startEj>:
    bool resetFromISR() { return _reset(0, true); }
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
 80a0ee8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0eea:	4605      	mov	r5, r0
 80a0eec:	460c      	mov	r4, r1
    bool isValid() const { return handle!=nullptr; }
    bool isActive() const { return isValid() && os_timer_is_active(handle, nullptr); }

    bool _start(unsigned block, bool fromISR=false)
    {
        stop(fromISR);
 80a0eee:	2100      	movs	r1, #0
 80a0ef0:	f7ff ffea 	bl	80a0ec8 <_ZN5Timer4stopEj>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
 80a0ef4:	68a8      	ldr	r0, [r5, #8]
 80a0ef6:	2300      	movs	r3, #0
 80a0ef8:	b140      	cbz	r0, 80a0f0c <_ZN5Timer5startEj+0x24>
 80a0efa:	9301      	str	r3, [sp, #4]
 80a0efc:	9400      	str	r4, [sp, #0]
 80a0efe:	461a      	mov	r2, r3
 80a0f00:	4619      	mov	r1, r3
 80a0f02:	f000 fccb 	bl	80a189c <os_timer_change>
 80a0f06:	fab0 f080 	clz	r0, r0
 80a0f0a:	0940      	lsrs	r0, r0, #5
    bool resetFromISR() { return _reset(0, true); }
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
 80a0f0c:	b003      	add	sp, #12
 80a0f0e:	bd30      	pop	{r4, r5, pc}

080a0f10 <_ZN5TimerD1Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
 80a0f10:	b538      	push	{r3, r4, r5, lr}
 80a0f12:	4b0e      	ldr	r3, [pc, #56]	; (80a0f4c <_ZN5TimerD1Ev+0x3c>)
 80a0f14:	4604      	mov	r4, r0
 80a0f16:	6003      	str	r3, [r0, #0]
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
    }

    void dispose()
    {
        if (handle)
 80a0f18:	6883      	ldr	r3, [r0, #8]
 80a0f1a:	b183      	cbz	r3, 80a0f3e <_ZN5TimerD1Ev+0x2e>
        	{
        		stop();
 80a0f1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80a0f20:	f7ff ffd2 	bl	80a0ec8 <_ZN5Timer4stopEj>
        		while (running) {
 80a0f24:	7923      	ldrb	r3, [r4, #4]
 80a0f26:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 80a0f2a:	b11b      	cbz	r3, 80a0f34 <_ZN5TimerD1Ev+0x24>
				delay(1);
 80a0f2c:	2001      	movs	r0, #1
 80a0f2e:	f000 fef3 	bl	80a1d18 <delay>
 80a0f32:	e7f7      	b.n	80a0f24 <_ZN5TimerD1Ev+0x14>
			}
        		os_timer_destroy(handle, nullptr);
 80a0f34:	4629      	mov	r1, r5
 80a0f36:	68a0      	ldr	r0, [r4, #8]
 80a0f38:	f000 fca0 	bl	80a187c <os_timer_destroy>
            handle = nullptr;
 80a0f3c:	60a5      	str	r5, [r4, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0f3e:	f104 000c 	add.w	r0, r4, #12
 80a0f42:	f7ff ff86 	bl	80a0e52 <_ZNSt14_Function_baseD1Ev>

    virtual ~Timer() {
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
 80a0f46:	4620      	mov	r0, r4
 80a0f48:	bd38      	pop	{r3, r4, r5, pc}
 80a0f4a:	bf00      	nop
 80a0f4c:	080a7b84 	.word	0x080a7b84

080a0f50 <_ZN5TimerD0Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
 80a0f50:	b510      	push	{r4, lr}
 80a0f52:	4604      	mov	r4, r0
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
 80a0f54:	f7ff ffdc 	bl	80a0f10 <_ZN5TimerD1Ev>
 80a0f58:	4620      	mov	r0, r4
 80a0f5a:	f7ff f8a2 	bl	80a00a2 <_ZdlPv>
 80a0f5e:	4620      	mov	r0, r4
 80a0f60:	bd10      	pop	{r4, pc}

080a0f62 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a0f62:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a0f64:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a0f66:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 80a0f68:	b17c      	cbz	r4, 80a0f8a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a0f6a:	6863      	ldr	r3, [r4, #4]
 80a0f6c:	3b01      	subs	r3, #1
 80a0f6e:	6063      	str	r3, [r4, #4]
 80a0f70:	b95b      	cbnz	r3, 80a0f8a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 80a0f72:	6823      	ldr	r3, [r4, #0]
 80a0f74:	4620      	mov	r0, r4
 80a0f76:	689b      	ldr	r3, [r3, #8]
 80a0f78:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a0f7a:	68a3      	ldr	r3, [r4, #8]
 80a0f7c:	3b01      	subs	r3, #1
 80a0f7e:	60a3      	str	r3, [r4, #8]
 80a0f80:	b91b      	cbnz	r3, 80a0f8a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a0f82:	6823      	ldr	r3, [r4, #0]
 80a0f84:	4620      	mov	r0, r4
 80a0f86:	68db      	ldr	r3, [r3, #12]
 80a0f88:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 80a0f8a:	4628      	mov	r0, r5
 80a0f8c:	bd38      	pop	{r3, r4, r5, pc}
	...

080a0f90 <setup>:
/**********************************************************************
Setup program to initialise the program
/*********************************************************************/

void setup()
{
 80a0f90:	b530      	push	{r4, r5, lr}
 80a0f92:	b085      	sub	sp, #20
 Wire.begin(); // start up the I2C bus
 80a0f94:	f002 fa00 	bl	80a3398 <_Z19__fetch_global_Wirev>
    particle::Future<bool> publish(const char* name, const char* data) PARTICLE_DEPRECATED_API_DEFAULT_PUBLISH_SCOPE;
    particle::Future<bool> publish(const char* name, const char* data, int ttl) PARTICLE_DEPRECATED_API_DEFAULT_PUBLISH_SCOPE;

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return CLOUD_FN(spark_subscribe(eventName, handler, NULL, scope, NULL, NULL), false);
 80a0f98:	2400      	movs	r4, #0
 80a0f9a:	f001 f9b3 	bl	80a2304 <_ZN7TwoWire5beginEv>
 mqttClient.connect("sparkclient");
 80a0f9e:	494f      	ldr	r1, [pc, #316]	; (80a10dc <setup+0x14c>)
 80a0fa0:	484f      	ldr	r0, [pc, #316]	; (80a10e0 <setup+0x150>)
 80a0fa2:	f7ff fe0b 	bl	80a0bbc <_ZN4MQTT7connectEPKc>
 80a0fa6:	4623      	mov	r3, r4
 80a0fa8:	4622      	mov	r2, r4
 80a0faa:	9401      	str	r4, [sp, #4]
 80a0fac:	9400      	str	r4, [sp, #0]
 80a0fae:	494d      	ldr	r1, [pc, #308]	; (80a10e4 <setup+0x154>)
 80a0fb0:	484d      	ldr	r0, [pc, #308]	; (80a10e8 <setup+0x158>)
 80a0fb2:	f000 fe41 	bl	80a1c38 <spark_subscribe>
 80a0fb6:	4623      	mov	r3, r4
 80a0fb8:	4622      	mov	r2, r4
 80a0fba:	494c      	ldr	r1, [pc, #304]	; (80a10ec <setup+0x15c>)
 80a0fbc:	9401      	str	r4, [sp, #4]
 80a0fbe:	9400      	str	r4, [sp, #0]
 80a0fc0:	484b      	ldr	r0, [pc, #300]	; (80a10f0 <setup+0x160>)
 80a0fc2:	f000 fe39 	bl	80a1c38 <spark_subscribe>
 Particle.subscribe("hook-response/get_DST", got_DST, MY_DEVICES);
 Particle.subscribe("hook-response/outsideTemp", got_Temp, MY_DEVICES);
 delay(500);
 80a0fc6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a0fca:	f000 fea5 	bl	80a1d18 <delay>
 led.init();
 80a0fce:	4849      	ldr	r0, [pc, #292]	; (80a10f4 <setup+0x164>)
 80a0fd0:	f7ff f87d 	bl	80a00ce <_ZN19LED_7Segment_4Digit4initEv>
 led.test();
 80a0fd4:	4847      	ldr	r0, [pc, #284]	; (80a10f4 <setup+0x164>)
 80a0fd6:	f7ff f905 	bl	80a01e4 <_ZN19LED_7Segment_4Digit4testEv>
 led.setBrightness(1);
 80a0fda:	2101      	movs	r1, #1
 80a0fdc:	4845      	ldr	r0, [pc, #276]	; (80a10f4 <setup+0x164>)
 80a0fde:	f7ff f8c3 	bl	80a0168 <_ZN19LED_7Segment_4Digit13setBrightnessEh>
 led.print(1,8,0,7);
 80a0fe2:	2307      	movs	r3, #7
 80a0fe4:	2208      	movs	r2, #8
 80a0fe6:	2101      	movs	r1, #1
 80a0fe8:	9300      	str	r3, [sp, #0]
 80a0fea:	4842      	ldr	r0, [pc, #264]	; (80a10f4 <setup+0x164>)
 80a0fec:	4623      	mov	r3, r4
 80a0fee:	f7ff f887 	bl	80a0100 <_ZN19LED_7Segment_4Digit5printEhhhh>
 lcd.init();  //initialize the lcd
 80a0ff2:	4841      	ldr	r0, [pc, #260]	; (80a10f8 <setup+0x168>)
 80a0ff4:	f7ff fa7a 	bl	80a04ec <_ZN17LiquidCrystal_I2C4initEv>
 lcd.backlight();  //open the backlight
 80a0ff8:	483f      	ldr	r0, [pc, #252]	; (80a10f8 <setup+0x168>)
 80a0ffa:	f7ff f98f 	bl	80a031c <_ZN17LiquidCrystal_I2C9backlightEv>
 lcd.setCursor ( 0, 0 );            // go to the top left corner
 80a0ffe:	4622      	mov	r2, r4
 80a1000:	4621      	mov	r1, r4
 80a1002:	483d      	ldr	r0, [pc, #244]	; (80a10f8 <setup+0x168>)
 80a1004:	f7ff f9dc 	bl	80a03c0 <_ZN17LiquidCrystal_I2C9setCursorEhh>
 lcd.print("    Sauna Timer"); // write this string on the top row
 80a1008:	493c      	ldr	r1, [pc, #240]	; (80a10fc <setup+0x16c>)
 80a100a:	483b      	ldr	r0, [pc, #236]	; (80a10f8 <setup+0x168>)
 80a100c:	f001 fa28 	bl	80a2460 <_ZN5Print5printEPKc>
 lcd.setCursor ( 0, 1 );            // go to the top left corner
 80a1010:	2201      	movs	r2, #1
 80a1012:	4621      	mov	r1, r4
 80a1014:	4838      	ldr	r0, [pc, #224]	; (80a10f8 <setup+0x168>)
 80a1016:	f7ff f9d3 	bl	80a03c0 <_ZN17LiquidCrystal_I2C9setCursorEhh>
 lcd.print("    Version 0.6"); // write this string on the top row
 80a101a:	4939      	ldr	r1, [pc, #228]	; (80a1100 <setup+0x170>)
 80a101c:	4836      	ldr	r0, [pc, #216]	; (80a10f8 <setup+0x168>)
 80a101e:	f001 fa1f 	bl	80a2460 <_ZN5Print5printEPKc>
 lcd.setCursor ( 0, 3 );            // go to the top left corner
 80a1022:	2203      	movs	r2, #3
 80a1024:	4621      	mov	r1, r4
 80a1026:	4834      	ldr	r0, [pc, #208]	; (80a10f8 <setup+0x168>)
 80a1028:	f7ff f9ca 	bl	80a03c0 <_ZN17LiquidCrystal_I2C9setCursorEhh>
 lcd.print("by Lio + Christian"); // write this string on the top row
 80a102c:	4935      	ldr	r1, [pc, #212]	; (80a1104 <setup+0x174>)
 80a102e:	4832      	ldr	r0, [pc, #200]	; (80a10f8 <setup+0x168>)
 80a1030:	f001 fa16 	bl	80a2460 <_ZN5Print5printEPKc>
 lcd.setCursor ( 0, 3 );            // go to the top left corner
 80a1034:	2203      	movs	r2, #3
 80a1036:	4621      	mov	r1, r4
 80a1038:	482f      	ldr	r0, [pc, #188]	; (80a10f8 <setup+0x168>)
 80a103a:	f7ff f9c1 	bl	80a03c0 <_ZN17LiquidCrystal_I2C9setCursorEhh>
 delay(1000);
 80a103e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a1042:	f000 fe69 	bl	80a1d18 <delay>
 lcd.print("                        "); // write this string on the top row
 80a1046:	4930      	ldr	r1, [pc, #192]	; (80a1108 <setup+0x178>)
 80a1048:	482b      	ldr	r0, [pc, #172]	; (80a10f8 <setup+0x168>)
 80a104a:	f001 fa09 	bl	80a2460 <_ZN5Print5printEPKc>
 delay(200);
 DataStorage.dstRequested = TRUE;
 80a104e:	4d2f      	ldr	r5, [pc, #188]	; (80a110c <setup+0x17c>)
 lcd.setCursor ( 0, 3 );            // go to the top left corner
 lcd.print("by Lio + Christian"); // write this string on the top row
 lcd.setCursor ( 0, 3 );            // go to the top left corner
 delay(1000);
 lcd.print("                        "); // write this string on the top row
 delay(200);
 80a1050:	20c8      	movs	r0, #200	; 0xc8
 80a1052:	f000 fe61 	bl	80a1d18 <delay>
 DataStorage.dstRequested = TRUE;
 80a1056:	2301      	movs	r3, #1
 Particle.publish("get_DST");
 80a1058:	492d      	ldr	r1, [pc, #180]	; (80a1110 <setup+0x180>)
 80a105a:	a802      	add	r0, sp, #8
 lcd.print("by Lio + Christian"); // write this string on the top row
 lcd.setCursor ( 0, 3 );            // go to the top left corner
 delay(1000);
 lcd.print("                        "); // write this string on the top row
 delay(200);
 DataStorage.dstRequested = TRUE;
 80a105c:	702b      	strb	r3, [r5, #0]
 Particle.publish("get_DST");
 80a105e:	f7ff fecd 	bl	80a0dfc <_ZN10CloudClass7publishEPKc.isra.8>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a1062:	a803      	add	r0, sp, #12
 80a1064:	f7ff ff7d 	bl	80a0f62 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 lcd.setCursor ( 0, 3 );            // go to the top left corner
 80a1068:	4621      	mov	r1, r4
 80a106a:	2203      	movs	r2, #3
 80a106c:	4822      	ldr	r0, [pc, #136]	; (80a10f8 <setup+0x168>)
 80a106e:	f7ff f9a7 	bl	80a03c0 <_ZN17LiquidCrystal_I2C9setCursorEhh>
 lcd.print("fetching DST"); // write this string on the top row
 80a1072:	4928      	ldr	r1, [pc, #160]	; (80a1114 <setup+0x184>)
 80a1074:	4820      	ldr	r0, [pc, #128]	; (80a10f8 <setup+0x168>)
 80a1076:	f001 f9f3 	bl	80a2460 <_ZN5Print5printEPKc>
 80a107a:	462c      	mov	r4, r5
 while(DataStorage.dstRequested)
 80a107c:	7825      	ldrb	r5, [r4, #0]
 80a107e:	b145      	cbz	r5, 80a1092 <setup+0x102>
 {
   delay(1000);
 80a1080:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a1084:	f000 fe48 	bl	80a1d18 <delay>
   lcd.print(".");
 80a1088:	4923      	ldr	r1, [pc, #140]	; (80a1118 <setup+0x188>)
 80a108a:	481b      	ldr	r0, [pc, #108]	; (80a10f8 <setup+0x168>)
 80a108c:	f001 f9e8 	bl	80a2460 <_ZN5Print5printEPKc>
 delay(200);
 DataStorage.dstRequested = TRUE;
 Particle.publish("get_DST");
 lcd.setCursor ( 0, 3 );            // go to the top left corner
 lcd.print("fetching DST"); // write this string on the top row
 while(DataStorage.dstRequested)
 80a1090:	e7f4      	b.n	80a107c <setup+0xec>
 {
   delay(1000);
   lcd.print(".");
 }
 DataStorage.weatherRequested = TRUE;
 80a1092:	4b1e      	ldr	r3, [pc, #120]	; (80a110c <setup+0x17c>)
 80a1094:	2201      	movs	r2, #1
 Particle.publish("outsideTemp");
 80a1096:	4921      	ldr	r1, [pc, #132]	; (80a111c <setup+0x18c>)
 80a1098:	a802      	add	r0, sp, #8
 while(DataStorage.dstRequested)
 {
   delay(1000);
   lcd.print(".");
 }
 DataStorage.weatherRequested = TRUE;
 80a109a:	705a      	strb	r2, [r3, #1]
 Particle.publish("outsideTemp");
 80a109c:	f7ff feae 	bl	80a0dfc <_ZN10CloudClass7publishEPKc.isra.8>
 80a10a0:	a803      	add	r0, sp, #12
 80a10a2:	f7ff ff5e 	bl	80a0f62 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 lcd.setCursor ( 0, 3 );            // go to the top left corner
 80a10a6:	4629      	mov	r1, r5
 80a10a8:	2203      	movs	r2, #3
 80a10aa:	4813      	ldr	r0, [pc, #76]	; (80a10f8 <setup+0x168>)
 80a10ac:	f7ff f988 	bl	80a03c0 <_ZN17LiquidCrystal_I2C9setCursorEhh>
 lcd.print("fetching Weather"); // write this string on the top row
 80a10b0:	491b      	ldr	r1, [pc, #108]	; (80a1120 <setup+0x190>)
 80a10b2:	4811      	ldr	r0, [pc, #68]	; (80a10f8 <setup+0x168>)
 80a10b4:	f001 f9d4 	bl	80a2460 <_ZN5Print5printEPKc>
 while(DataStorage.weatherRequested)
 80a10b8:	7863      	ldrb	r3, [r4, #1]
 80a10ba:	b12b      	cbz	r3, 80a10c8 <setup+0x138>
 {
   delay(1000);
 80a10bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a10c0:	f000 fe2a 	bl	80a1d18 <delay>
   lcd.print(".");
 80a10c4:	4914      	ldr	r1, [pc, #80]	; (80a1118 <setup+0x188>)
 80a10c6:	e7f4      	b.n	80a10b2 <setup+0x122>
 }
 lcd.clear();
 80a10c8:	480b      	ldr	r0, [pc, #44]	; (80a10f8 <setup+0x168>)
 80a10ca:	f7ff f965 	bl	80a0398 <_ZN17LiquidCrystal_I2C5clearEv>
 minuteTimer.start();
 80a10ce:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80a10d2:	4814      	ldr	r0, [pc, #80]	; (80a1124 <setup+0x194>)
 80a10d4:	f7ff ff08 	bl	80a0ee8 <_ZN5Timer5startEj>

}
 80a10d8:	b005      	add	sp, #20
 80a10da:	bd30      	pop	{r4, r5, pc}
 80a10dc:	080a7b90 	.word	0x080a7b90
 80a10e0:	20000530 	.word	0x20000530
 80a10e4:	080a0cf1 	.word	0x080a0cf1
 80a10e8:	080a7b9c 	.word	0x080a7b9c
 80a10ec:	080a0d41 	.word	0x080a0d41
 80a10f0:	080a7bb2 	.word	0x080a7bb2
 80a10f4:	2000051c 	.word	0x2000051c
 80a10f8:	20000520 	.word	0x20000520
 80a10fc:	080a7bcc 	.word	0x080a7bcc
 80a1100:	080a7bdc 	.word	0x080a7bdc
 80a1104:	080a7bec 	.word	0x080a7bec
 80a1108:	080a7bff 	.word	0x080a7bff
 80a110c:	2000047c 	.word	0x2000047c
 80a1110:	080a7baa 	.word	0x080a7baa
 80a1114:	080a7c18 	.word	0x080a7c18
 80a1118:	080a7d2a 	.word	0x080a7d2a
 80a111c:	080a7bc0 	.word	0x080a7bc0
 80a1120:	080a7c25 	.word	0x080a7c25
 80a1124:	20000484 	.word	0x20000484

080a1128 <loop>:

void loop()
{
 80a1128:	b5f0      	push	{r4, r5, r6, r7, lr}
 switch (State.currentState())
 80a112a:	4884      	ldr	r0, [pc, #528]	; (80a133c <loop+0x214>)
 minuteTimer.start();

}

void loop()
{
 80a112c:	b089      	sub	sp, #36	; 0x24
 switch (State.currentState())
 80a112e:	f000 fb45 	bl	80a17bc <_ZN12StateMachine12currentStateEv>
 80a1132:	4c82      	ldr	r4, [pc, #520]	; (80a133c <loop+0x214>)
 80a1134:	2803      	cmp	r0, #3
 80a1136:	f200 81d6 	bhi.w	80a14e6 <loop+0x3be>
 80a113a:	e8df f010 	tbh	[pc, r0, lsl #1]
 80a113e:	0004      	.short	0x0004
 80a1140:	012900b5 	.word	0x012900b5
 80a1144:	019b      	.short	0x019b
  {
    case 0x00: // STAND0bY_STATE
      /********** enter state ********************/
      /*  initialize state                       */
      if (State.stateChanged())
 80a1146:	487d      	ldr	r0, [pc, #500]	; (80a133c <loop+0x214>)
 80a1148:	f000 fb3a 	bl	80a17c0 <_ZN12StateMachine12stateChangedEv>
 80a114c:	b1d8      	cbz	r0, 80a1186 <loop+0x5e>
      {
        State.stateChanged(FALSE);
 80a114e:	2100      	movs	r1, #0
 80a1150:	487a      	ldr	r0, [pc, #488]	; (80a133c <loop+0x214>)
 80a1152:	f000 fb37 	bl	80a17c4 <_ZN12StateMachine12stateChangedEb>
        timeoutTimer.start();
 80a1156:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80a115a:	4879      	ldr	r0, [pc, #484]	; (80a1340 <loop+0x218>)
 80a115c:	f7ff fec4 	bl	80a0ee8 <_ZN5Timer5startEj>
        lcd.clear();
 80a1160:	4878      	ldr	r0, [pc, #480]	; (80a1344 <loop+0x21c>)
 80a1162:	f7ff f919 	bl	80a0398 <_ZN17LiquidCrystal_I2C5clearEv>
        if (mqttClient.isConnected())
 80a1166:	4878      	ldr	r0, [pc, #480]	; (80a1348 <loop+0x220>)
 80a1168:	f7ff faed 	bl	80a0746 <_ZN4MQTT11isConnectedEv>
 80a116c:	b148      	cbz	r0, 80a1182 <loop+0x5a>
        {
        mqttClient.publish("/System/fhem/cmnd","set kgsa_RGBWDimmer_Color color 100");
 80a116e:	4a77      	ldr	r2, [pc, #476]	; (80a134c <loop+0x224>)
 80a1170:	4977      	ldr	r1, [pc, #476]	; (80a1350 <loop+0x228>)
 80a1172:	4875      	ldr	r0, [pc, #468]	; (80a1348 <loop+0x220>)
 80a1174:	f7ff fc31 	bl	80a09da <_ZN4MQTT7publishEPKcS1_>
        mqttClient.publish("/System/fhem/cmnd","set kgsa_RGBWDimmer_Dim pct 0");
 80a1178:	4a76      	ldr	r2, [pc, #472]	; (80a1354 <loop+0x22c>)
 80a117a:	4975      	ldr	r1, [pc, #468]	; (80a1350 <loop+0x228>)
 80a117c:	4872      	ldr	r0, [pc, #456]	; (80a1348 <loop+0x220>)
 80a117e:	f7ff fc2c 	bl	80a09da <_ZN4MQTT7publishEPKcS1_>
        }
        State.updateData = TRUE;
 80a1182:	2301      	movs	r3, #1
 80a1184:	7023      	strb	r3, [r4, #0]
      }
      /********** conditional executions ***********/
      /*  only executed if certain flags are set   */

      if (State.updateData)
 80a1186:	7823      	ldrb	r3, [r4, #0]
 80a1188:	b183      	cbz	r3, 80a11ac <loop+0x84>
      {
        State.updateData = FALSE;
 80a118a:	4b6c      	ldr	r3, [pc, #432]	; (80a133c <loop+0x214>)
 80a118c:	2200      	movs	r2, #0
        Particle.publish("outsideTemp");
 80a118e:	4972      	ldr	r1, [pc, #456]	; (80a1358 <loop+0x230>)
 80a1190:	a804      	add	r0, sp, #16
      /********** conditional executions ***********/
      /*  only executed if certain flags are set   */

      if (State.updateData)
      {
        State.updateData = FALSE;
 80a1192:	701a      	strb	r2, [r3, #0]
        Particle.publish("outsideTemp");
 80a1194:	f7ff fe32 	bl	80a0dfc <_ZN10CloudClass7publishEPKc.isra.8>
 80a1198:	a805      	add	r0, sp, #20
 80a119a:	f7ff fee2 	bl	80a0f62 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        Particle.publish("get_DST");
 80a119e:	a804      	add	r0, sp, #16
 80a11a0:	496e      	ldr	r1, [pc, #440]	; (80a135c <loop+0x234>)
 80a11a2:	f7ff fe2b 	bl	80a0dfc <_ZN10CloudClass7publishEPKc.isra.8>
 80a11a6:	a805      	add	r0, sp, #20
 80a11a8:	f7ff fedb 	bl	80a0f62 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }

      if (DataStorage.updateTemp)
 80a11ac:	4d6c      	ldr	r5, [pc, #432]	; (80a1360 <loop+0x238>)
 80a11ae:	78ab      	ldrb	r3, [r5, #2]
 80a11b0:	b33b      	cbz	r3, 80a1202 <loop+0xda>
      {
        DataStorage.updateTemp = FALSE;
 80a11b2:	2400      	movs	r4, #0
        String char_data = String(DataStorage.outsideTemp);
 80a11b4:	2206      	movs	r2, #6
 80a11b6:	6869      	ldr	r1, [r5, #4]
 80a11b8:	a804      	add	r0, sp, #16
        Particle.publish("get_DST");
      }

      if (DataStorage.updateTemp)
      {
        DataStorage.updateTemp = FALSE;
 80a11ba:	70ac      	strb	r4, [r5, #2]
        String char_data = String(DataStorage.outsideTemp);
 80a11bc:	f001 fac7 	bl	80a274e <_ZN6StringC1Efi>
        lcd.setCursor(0,1);
 80a11c0:	2201      	movs	r2, #1
 80a11c2:	4621      	mov	r1, r4
 80a11c4:	485f      	ldr	r0, [pc, #380]	; (80a1344 <loop+0x21c>)
 80a11c6:	f7ff f8fb 	bl	80a03c0 <_ZN17LiquidCrystal_I2C9setCursorEhh>
        lcd.print("Temperatur: ");
 80a11ca:	4966      	ldr	r1, [pc, #408]	; (80a1364 <loop+0x23c>)
 80a11cc:	485d      	ldr	r0, [pc, #372]	; (80a1344 <loop+0x21c>)
 80a11ce:	f001 f947 	bl	80a2460 <_ZN5Print5printEPKc>
 80a11d2:	6868      	ldr	r0, [r5, #4]
 80a11d4:	f002 fbee 	bl	80a39b4 <__aeabi_f2d>
 80a11d8:	4a63      	ldr	r2, [pc, #396]	; (80a1368 <loop+0x240>)
 80a11da:	e9cd 0100 	strd	r0, r1, [sp]
 80a11de:	4621      	mov	r1, r4
 80a11e0:	4858      	ldr	r0, [pc, #352]	; (80a1344 <loop+0x21c>)
 80a11e2:	f001 f97c 	bl	80a24de <_ZN5Print11printf_implEbPKcz>
 80a11e6:	23df      	movs	r3, #223	; 0xdf
 80a11e8:	4a60      	ldr	r2, [pc, #384]	; (80a136c <loop+0x244>)
 80a11ea:	4621      	mov	r1, r4
 80a11ec:	4855      	ldr	r0, [pc, #340]	; (80a1344 <loop+0x21c>)
 80a11ee:	f001 f976 	bl	80a24de <_ZN5Print11printf_implEbPKcz>
        lcd.printf("%.1f", DataStorage.outsideTemp);
        lcd.printf(" %cC ", 0xDF);
        mqttClient.publish("/System/outside/temp", char_data);
 80a11f2:	9a04      	ldr	r2, [sp, #16]
 80a11f4:	495e      	ldr	r1, [pc, #376]	; (80a1370 <loop+0x248>)
 80a11f6:	4854      	ldr	r0, [pc, #336]	; (80a1348 <loop+0x220>)
 80a11f8:	f7ff fbef 	bl	80a09da <_ZN4MQTT7publishEPKcS1_>
      }

      if (DataStorage.updateTemp)
      {
        DataStorage.updateTemp = FALSE;
        String char_data = String(DataStorage.outsideTemp);
 80a11fc:	a804      	add	r0, sp, #16
 80a11fe:	f001 fa3b 	bl	80a2678 <_ZN6StringD1Ev>
      }


      /********* state execution *******************/
      /*  always executed if in state              */
      lcd.setCursor(0,3);
 80a1202:	2203      	movs	r2, #3
 80a1204:	2100      	movs	r1, #0
 80a1206:	484f      	ldr	r0, [pc, #316]	; (80a1344 <loop+0x21c>)
 80a1208:	f7ff f8da 	bl	80a03c0 <_ZN17LiquidCrystal_I2C9setCursorEhh>
      lcd.print(Time.format(Time.now(), "%a %d. %b %Y"));
 80a120c:	f001 fe8d 	bl	80a2f2a <_ZN9TimeClass3nowEv>
 80a1210:	4b58      	ldr	r3, [pc, #352]	; (80a1374 <loop+0x24c>)
 80a1212:	4602      	mov	r2, r0
 80a1214:	4958      	ldr	r1, [pc, #352]	; (80a1378 <loop+0x250>)
 80a1216:	a804      	add	r0, sp, #16
 80a1218:	f001 fe34 	bl	80a2e84 <_ZN9TimeClass6formatElPKc>
 80a121c:	9904      	ldr	r1, [sp, #16]
 80a121e:	4849      	ldr	r0, [pc, #292]	; (80a1344 <loop+0x21c>)
 80a1220:	f001 f91e 	bl	80a2460 <_ZN5Print5printEPKc>
 80a1224:	a804      	add	r0, sp, #16
 80a1226:	f001 fa27 	bl	80a2678 <_ZN6StringD1Ev>
      led.print(Time.hour()/10,((Time.second() % 2 == 0) ? Time.hour()-(Time.hour()/10)*10 :  (Time.hour()-(Time.hour()/10)*10)+16),Time.minute()/10,Time.minute()-(Time.minute()/10)*10);
 80a122a:	f001 fe85 	bl	80a2f38 <_ZN9TimeClass4hourEv>
 80a122e:	250a      	movs	r5, #10
 80a1230:	fb90 f0f5 	sdiv	r0, r0, r5
 80a1234:	b2c5      	uxtb	r5, r0
 80a1236:	f001 fe93 	bl	80a2f60 <_ZN9TimeClass6secondEv>
 80a123a:	07c2      	lsls	r2, r0, #31
 80a123c:	d40b      	bmi.n	80a1256 <loop+0x12e>
 80a123e:	f001 fe7b 	bl	80a2f38 <_ZN9TimeClass4hourEv>
 80a1242:	4604      	mov	r4, r0
 80a1244:	f001 fe78 	bl	80a2f38 <_ZN9TimeClass4hourEv>
 80a1248:	f06f 0309 	mvn.w	r3, #9
 80a124c:	fb90 f0f3 	sdiv	r0, r0, r3
 80a1250:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80a1254:	e00c      	b.n	80a1270 <loop+0x148>
 80a1256:	f001 fe6f 	bl	80a2f38 <_ZN9TimeClass4hourEv>
 80a125a:	4606      	mov	r6, r0
 80a125c:	f001 fe6c 	bl	80a2f38 <_ZN9TimeClass4hourEv>
 80a1260:	f06f 0409 	mvn.w	r4, #9
 80a1264:	fb90 f0f4 	sdiv	r0, r0, r4
 80a1268:	f106 0410 	add.w	r4, r6, #16
 80a126c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80a1270:	eb04 0040 	add.w	r0, r4, r0, lsl #1
 80a1274:	b2c4      	uxtb	r4, r0
 80a1276:	f001 fe69 	bl	80a2f4c <_ZN9TimeClass6minuteEv>
 80a127a:	4607      	mov	r7, r0
 80a127c:	f001 fe66 	bl	80a2f4c <_ZN9TimeClass6minuteEv>
 80a1280:	4606      	mov	r6, r0
 80a1282:	f001 fe63 	bl	80a2f4c <_ZN9TimeClass6minuteEv>
 80a1286:	f06f 0209 	mvn.w	r2, #9
 80a128a:	fb90 f0f2 	sdiv	r0, r0, r2
 80a128e:	230a      	movs	r3, #10
 80a1290:	fb97 f3f3 	sdiv	r3, r7, r3
 80a1294:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80a1298:	eb06 0040 	add.w	r0, r6, r0, lsl #1
 80a129c:	b2c0      	uxtb	r0, r0
 80a129e:	9000      	str	r0, [sp, #0]
 80a12a0:	b2db      	uxtb	r3, r3
 80a12a2:	4622      	mov	r2, r4
 80a12a4:	4629      	mov	r1, r5
 80a12a6:	e11a      	b.n	80a14de <loop+0x3b6>
    break;

    case 0x01: // 0bEGIN_SAUNA_CYCLE_STATE
      /********** enter state ********************/
      /*  initialize state                       */
      if (State.stateChanged())
 80a12a8:	4824      	ldr	r0, [pc, #144]	; (80a133c <loop+0x214>)
 80a12aa:	f000 fa89 	bl	80a17c0 <_ZN12StateMachine12stateChangedEv>
 80a12ae:	2800      	cmp	r0, #0
 80a12b0:	f000 812d 	beq.w	80a150e <loop+0x3e6>
      {
        State.stateChanged(FALSE);
 80a12b4:	2100      	movs	r1, #0
 80a12b6:	4821      	ldr	r0, [pc, #132]	; (80a133c <loop+0x214>)
 80a12b8:	f000 fa84 	bl	80a17c4 <_ZN12StateMachine12stateChangedEb>
        timeoutTimer.start();
 80a12bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80a12c0:	481f      	ldr	r0, [pc, #124]	; (80a1340 <loop+0x218>)
 80a12c2:	f7ff fe11 	bl	80a0ee8 <_ZN5Timer5startEj>
        secondTimer.stop();
 80a12c6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80a12ca:	482c      	ldr	r0, [pc, #176]	; (80a137c <loop+0x254>)
 80a12cc:	f7ff fdfc 	bl	80a0ec8 <_ZN5Timer4stopEj>
        SaunaClock.reset();
 80a12d0:	482b      	ldr	r0, [pc, #172]	; (80a1380 <loop+0x258>)
 80a12d2:	f000 fabe 	bl	80a1852 <_ZN10SaunaClock5resetEv>
        if (mqttClient.isConnected())
 80a12d6:	481c      	ldr	r0, [pc, #112]	; (80a1348 <loop+0x220>)
 80a12d8:	f7ff fa35 	bl	80a0746 <_ZN4MQTT11isConnectedEv>
 80a12dc:	b148      	cbz	r0, 80a12f2 <loop+0x1ca>
        {
          mqttClient.publish("/System/fhem/cmnd","set kgsa_RGBWDimmer_Color color 100");
 80a12de:	4a1b      	ldr	r2, [pc, #108]	; (80a134c <loop+0x224>)
 80a12e0:	491b      	ldr	r1, [pc, #108]	; (80a1350 <loop+0x228>)
 80a12e2:	4819      	ldr	r0, [pc, #100]	; (80a1348 <loop+0x220>)
 80a12e4:	f7ff fb79 	bl	80a09da <_ZN4MQTT7publishEPKcS1_>
          mqttClient.publish("/System/fhem/cmnd","set kgsa_RGBWDimmer_Dim pct 50");
 80a12e8:	4a26      	ldr	r2, [pc, #152]	; (80a1384 <loop+0x25c>)
 80a12ea:	4919      	ldr	r1, [pc, #100]	; (80a1350 <loop+0x228>)
 80a12ec:	4816      	ldr	r0, [pc, #88]	; (80a1348 <loop+0x220>)
 80a12ee:	f7ff fb74 	bl	80a09da <_ZN4MQTT7publishEPKcS1_>
        }
        led.print(SaunaClock.getDigit(0),SaunaClock.getDigit(1),SaunaClock.getDigit(2),SaunaClock.getDigit(3));
 80a12f2:	2100      	movs	r1, #0
 80a12f4:	4822      	ldr	r0, [pc, #136]	; (80a1380 <loop+0x258>)
 80a12f6:	f000 fab4 	bl	80a1862 <_ZN10SaunaClock8getDigitEh>
 80a12fa:	2101      	movs	r1, #1
 80a12fc:	4604      	mov	r4, r0
 80a12fe:	4820      	ldr	r0, [pc, #128]	; (80a1380 <loop+0x258>)
 80a1300:	f000 faaf 	bl	80a1862 <_ZN10SaunaClock8getDigitEh>
 80a1304:	2102      	movs	r1, #2
 80a1306:	4605      	mov	r5, r0
 80a1308:	481d      	ldr	r0, [pc, #116]	; (80a1380 <loop+0x258>)
 80a130a:	f000 faaa 	bl	80a1862 <_ZN10SaunaClock8getDigitEh>
 80a130e:	2103      	movs	r1, #3
 80a1310:	4606      	mov	r6, r0
 80a1312:	481b      	ldr	r0, [pc, #108]	; (80a1380 <loop+0x258>)
 80a1314:	f000 faa5 	bl	80a1862 <_ZN10SaunaClock8getDigitEh>
 80a1318:	4633      	mov	r3, r6
 80a131a:	462a      	mov	r2, r5
 80a131c:	4621      	mov	r1, r4
 80a131e:	9000      	str	r0, [sp, #0]
 80a1320:	4819      	ldr	r0, [pc, #100]	; (80a1388 <loop+0x260>)
 80a1322:	f7fe feed 	bl	80a0100 <_ZN19LED_7Segment_4Digit5printEhhhh>
        lcd.clear();
 80a1326:	4807      	ldr	r0, [pc, #28]	; (80a1344 <loop+0x21c>)
 80a1328:	f7ff f836 	bl	80a0398 <_ZN17LiquidCrystal_I2C5clearEv>
        lcd.setCursor(0,1);
 80a132c:	2100      	movs	r1, #0
 80a132e:	2201      	movs	r2, #1
 80a1330:	4804      	ldr	r0, [pc, #16]	; (80a1344 <loop+0x21c>)
 80a1332:	f7ff f845 	bl	80a03c0 <_ZN17LiquidCrystal_I2C9setCursorEhh>
        lcd.print("Mach dich nackig...");
 80a1336:	4915      	ldr	r1, [pc, #84]	; (80a138c <loop+0x264>)
 80a1338:	e0e6      	b.n	80a1508 <loop+0x3e0>
 80a133a:	bf00      	nop
 80a133c:	200004a1 	.word	0x200004a1
 80a1340:	20000500 	.word	0x20000500
 80a1344:	20000520 	.word	0x20000520
 80a1348:	20000530 	.word	0x20000530
 80a134c:	080a7c36 	.word	0x080a7c36
 80a1350:	080a7c5a 	.word	0x080a7c5a
 80a1354:	080a7c6c 	.word	0x080a7c6c
 80a1358:	080a7bc0 	.word	0x080a7bc0
 80a135c:	080a7baa 	.word	0x080a7baa
 80a1360:	2000047c 	.word	0x2000047c
 80a1364:	080a7c8a 	.word	0x080a7c8a
 80a1368:	080a7c97 	.word	0x080a7c97
 80a136c:	080a7c9c 	.word	0x080a7c9c
 80a1370:	080a7ca2 	.word	0x080a7ca2
 80a1374:	080a7cb7 	.word	0x080a7cb7
 80a1378:	200005c8 	.word	0x200005c8
 80a137c:	200004b4 	.word	0x200004b4
 80a1380:	200004d0 	.word	0x200004d0
 80a1384:	080a7cc4 	.word	0x080a7cc4
 80a1388:	2000051c 	.word	0x2000051c
 80a138c:	080a7ce3 	.word	0x080a7ce3
    break;

    case 0x02: // SAUNA_CYCLE_STATE
      /********** enter state ********************/
      /*  initialize state                       */
      if (State.stateChanged())
 80a1390:	4886      	ldr	r0, [pc, #536]	; (80a15ac <loop+0x484>)
 80a1392:	f000 fa15 	bl	80a17c0 <_ZN12StateMachine12stateChangedEv>
 80a1396:	2800      	cmp	r0, #0
 80a1398:	d030      	beq.n	80a13fc <loop+0x2d4>
      {
        State.stateChanged(FALSE);
 80a139a:	2100      	movs	r1, #0
 80a139c:	4883      	ldr	r0, [pc, #524]	; (80a15ac <loop+0x484>)
 80a139e:	f000 fa11 	bl	80a17c4 <_ZN12StateMachine12stateChangedEb>
        timeoutTimer.start();
 80a13a2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80a13a6:	4882      	ldr	r0, [pc, #520]	; (80a15b0 <loop+0x488>)
 80a13a8:	f7ff fd9e 	bl	80a0ee8 <_ZN5Timer5startEj>
        secondTimer.start();
 80a13ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80a13b0:	4880      	ldr	r0, [pc, #512]	; (80a15b4 <loop+0x48c>)
 80a13b2:	f7ff fd99 	bl	80a0ee8 <_ZN5Timer5startEj>
        if (mqttClient.isConnected())
 80a13b6:	4880      	ldr	r0, [pc, #512]	; (80a15b8 <loop+0x490>)
 80a13b8:	f7ff f9c5 	bl	80a0746 <_ZN4MQTT11isConnectedEv>
 80a13bc:	b148      	cbz	r0, 80a13d2 <loop+0x2aa>
        {
          mqttClient.publish("/System/fhem/cmnd","set kgsa_RGBWDimmer_Auto colProgram 4");
 80a13be:	4a7f      	ldr	r2, [pc, #508]	; (80a15bc <loop+0x494>)
 80a13c0:	497f      	ldr	r1, [pc, #508]	; (80a15c0 <loop+0x498>)
 80a13c2:	487d      	ldr	r0, [pc, #500]	; (80a15b8 <loop+0x490>)
 80a13c4:	f7ff fb09 	bl	80a09da <_ZN4MQTT7publishEPKcS1_>
          mqttClient.publish("/System/fhem/cmnd","set kgsa_RGBWDimmer_Dim pct 50");
 80a13c8:	4a7e      	ldr	r2, [pc, #504]	; (80a15c4 <loop+0x49c>)
 80a13ca:	497d      	ldr	r1, [pc, #500]	; (80a15c0 <loop+0x498>)
 80a13cc:	487a      	ldr	r0, [pc, #488]	; (80a15b8 <loop+0x490>)
 80a13ce:	f7ff fb04 	bl	80a09da <_ZN4MQTT7publishEPKcS1_>
        }
        lcd.clear();
 80a13d2:	487d      	ldr	r0, [pc, #500]	; (80a15c8 <loop+0x4a0>)
 80a13d4:	f7fe ffe0 	bl	80a0398 <_ZN17LiquidCrystal_I2C5clearEv>
        lcd.setCursor(0,1);
 80a13d8:	2201      	movs	r2, #1
 80a13da:	2100      	movs	r1, #0
 80a13dc:	487a      	ldr	r0, [pc, #488]	; (80a15c8 <loop+0x4a0>)
 80a13de:	f7fe ffef 	bl	80a03c0 <_ZN17LiquidCrystal_I2C9setCursorEhh>
        lcd.print("Rein in die...");
 80a13e2:	497a      	ldr	r1, [pc, #488]	; (80a15cc <loop+0x4a4>)
 80a13e4:	4878      	ldr	r0, [pc, #480]	; (80a15c8 <loop+0x4a0>)
 80a13e6:	f001 f83b 	bl	80a2460 <_ZN5Print5printEPKc>
        lcd.setCursor(6,2);
 80a13ea:	2106      	movs	r1, #6
 80a13ec:	4876      	ldr	r0, [pc, #472]	; (80a15c8 <loop+0x4a0>)
 80a13ee:	2202      	movs	r2, #2
 80a13f0:	f7fe ffe6 	bl	80a03c0 <_ZN17LiquidCrystal_I2C9setCursorEhh>
        lcd.print("...gute Stube");
 80a13f4:	4976      	ldr	r1, [pc, #472]	; (80a15d0 <loop+0x4a8>)
 80a13f6:	4874      	ldr	r0, [pc, #464]	; (80a15c8 <loop+0x4a0>)
 80a13f8:	f001 f832 	bl	80a2460 <_ZN5Print5printEPKc>
      }

      led.print(SaunaClock.getDigit(0),SaunaClock.getDigit(1),SaunaClock.getDigit(2),SaunaClock.getDigit(3));
 80a13fc:	2100      	movs	r1, #0
 80a13fe:	4875      	ldr	r0, [pc, #468]	; (80a15d4 <loop+0x4ac>)
 80a1400:	f000 fa2f 	bl	80a1862 <_ZN10SaunaClock8getDigitEh>
 80a1404:	2101      	movs	r1, #1
 80a1406:	4604      	mov	r4, r0
 80a1408:	4872      	ldr	r0, [pc, #456]	; (80a15d4 <loop+0x4ac>)
 80a140a:	f000 fa2a 	bl	80a1862 <_ZN10SaunaClock8getDigitEh>
 80a140e:	2102      	movs	r1, #2
 80a1410:	4605      	mov	r5, r0
 80a1412:	4870      	ldr	r0, [pc, #448]	; (80a15d4 <loop+0x4ac>)
 80a1414:	f000 fa25 	bl	80a1862 <_ZN10SaunaClock8getDigitEh>
 80a1418:	2103      	movs	r1, #3
 80a141a:	4606      	mov	r6, r0
 80a141c:	486d      	ldr	r0, [pc, #436]	; (80a15d4 <loop+0x4ac>)
 80a141e:	f000 fa20 	bl	80a1862 <_ZN10SaunaClock8getDigitEh>
 80a1422:	4633      	mov	r3, r6
 80a1424:	9000      	str	r0, [sp, #0]
 80a1426:	462a      	mov	r2, r5
 80a1428:	4621      	mov	r1, r4
 80a142a:	486b      	ldr	r0, [pc, #428]	; (80a15d8 <loop+0x4b0>)
 80a142c:	f7fe fe68 	bl	80a0100 <_ZN19LED_7Segment_4Digit5printEhhhh>
      lcd.setCursor(0,3);
 80a1430:	2203      	movs	r2, #3
 80a1432:	2100      	movs	r1, #0
 80a1434:	4864      	ldr	r0, [pc, #400]	; (80a15c8 <loop+0x4a0>)
 80a1436:	f7fe ffc3 	bl	80a03c0 <_ZN17LiquidCrystal_I2C9setCursorEhh>
      lcd.printf("%d%d:%d%d",SaunaClock.getDigit(0),SaunaClock.getDigit(1),SaunaClock.getDigit(2),SaunaClock.getDigit(3));
 80a143a:	2100      	movs	r1, #0
 80a143c:	4865      	ldr	r0, [pc, #404]	; (80a15d4 <loop+0x4ac>)
 80a143e:	f000 fa10 	bl	80a1862 <_ZN10SaunaClock8getDigitEh>
 80a1442:	2101      	movs	r1, #1
 80a1444:	4604      	mov	r4, r0
 80a1446:	4863      	ldr	r0, [pc, #396]	; (80a15d4 <loop+0x4ac>)
 80a1448:	f000 fa0b 	bl	80a1862 <_ZN10SaunaClock8getDigitEh>
 80a144c:	2102      	movs	r1, #2
 80a144e:	4605      	mov	r5, r0
 80a1450:	4860      	ldr	r0, [pc, #384]	; (80a15d4 <loop+0x4ac>)
 80a1452:	f000 fa06 	bl	80a1862 <_ZN10SaunaClock8getDigitEh>
 80a1456:	2103      	movs	r1, #3
 80a1458:	4606      	mov	r6, r0
 80a145a:	485e      	ldr	r0, [pc, #376]	; (80a15d4 <loop+0x4ac>)
 80a145c:	f000 fa01 	bl	80a1862 <_ZN10SaunaClock8getDigitEh>
 80a1460:	e88d 0060 	stmia.w	sp, {r5, r6}
 80a1464:	9002      	str	r0, [sp, #8]
 80a1466:	4623      	mov	r3, r4
 80a1468:	4a5c      	ldr	r2, [pc, #368]	; (80a15dc <loop+0x4b4>)
 80a146a:	2100      	movs	r1, #0
 80a146c:	4856      	ldr	r0, [pc, #344]	; (80a15c8 <loop+0x4a0>)
 80a146e:	f001 f836 	bl	80a24de <_ZN5Print11printf_implEbPKcz>
 80a1472:	e04c      	b.n	80a150e <loop+0x3e6>
      /*  always executed if in state              */

    break;

    case 0x03:
      if (State.stateChanged())
 80a1474:	484d      	ldr	r0, [pc, #308]	; (80a15ac <loop+0x484>)
 80a1476:	f000 f9a3 	bl	80a17c0 <_ZN12StateMachine12stateChangedEv>
 80a147a:	b1c8      	cbz	r0, 80a14b0 <loop+0x388>
      {
        State.stateChanged(FALSE);
 80a147c:	2100      	movs	r1, #0
 80a147e:	484b      	ldr	r0, [pc, #300]	; (80a15ac <loop+0x484>)
 80a1480:	f000 f9a0 	bl	80a17c4 <_ZN12StateMachine12stateChangedEb>
        timeoutTimer.start();
 80a1484:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80a1488:	4849      	ldr	r0, [pc, #292]	; (80a15b0 <loop+0x488>)
 80a148a:	f7ff fd2d 	bl	80a0ee8 <_ZN5Timer5startEj>
        secondTimer.stop();
 80a148e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80a1492:	4848      	ldr	r0, [pc, #288]	; (80a15b4 <loop+0x48c>)
 80a1494:	f7ff fd18 	bl	80a0ec8 <_ZN5Timer4stopEj>
        lcd.clear();
 80a1498:	484b      	ldr	r0, [pc, #300]	; (80a15c8 <loop+0x4a0>)
 80a149a:	f7fe ff7d 	bl	80a0398 <_ZN17LiquidCrystal_I2C5clearEv>
        lcd.setCursor(0,1);
 80a149e:	2100      	movs	r1, #0
 80a14a0:	4849      	ldr	r0, [pc, #292]	; (80a15c8 <loop+0x4a0>)
 80a14a2:	2201      	movs	r2, #1
 80a14a4:	f7fe ff8c 	bl	80a03c0 <_ZN17LiquidCrystal_I2C9setCursorEhh>
        lcd.print("Schon fertig ?");
 80a14a8:	494d      	ldr	r1, [pc, #308]	; (80a15e0 <loop+0x4b8>)
 80a14aa:	4847      	ldr	r0, [pc, #284]	; (80a15c8 <loop+0x4a0>)
 80a14ac:	f000 ffd8 	bl	80a2460 <_ZN5Print5printEPKc>
      }

      led.print(SaunaClock.getDigit(0),SaunaClock.getDigit(1),SaunaClock.getDigit(2),SaunaClock.getDigit(3));
 80a14b0:	2100      	movs	r1, #0
 80a14b2:	4848      	ldr	r0, [pc, #288]	; (80a15d4 <loop+0x4ac>)
 80a14b4:	f000 f9d5 	bl	80a1862 <_ZN10SaunaClock8getDigitEh>
 80a14b8:	2101      	movs	r1, #1
 80a14ba:	4604      	mov	r4, r0
 80a14bc:	4845      	ldr	r0, [pc, #276]	; (80a15d4 <loop+0x4ac>)
 80a14be:	f000 f9d0 	bl	80a1862 <_ZN10SaunaClock8getDigitEh>
 80a14c2:	2102      	movs	r1, #2
 80a14c4:	4605      	mov	r5, r0
 80a14c6:	4843      	ldr	r0, [pc, #268]	; (80a15d4 <loop+0x4ac>)
 80a14c8:	f000 f9cb 	bl	80a1862 <_ZN10SaunaClock8getDigitEh>
 80a14cc:	4606      	mov	r6, r0
 80a14ce:	2103      	movs	r1, #3
 80a14d0:	4840      	ldr	r0, [pc, #256]	; (80a15d4 <loop+0x4ac>)
 80a14d2:	f000 f9c6 	bl	80a1862 <_ZN10SaunaClock8getDigitEh>
 80a14d6:	4633      	mov	r3, r6
 80a14d8:	462a      	mov	r2, r5
 80a14da:	4621      	mov	r1, r4
 80a14dc:	9000      	str	r0, [sp, #0]
 80a14de:	483e      	ldr	r0, [pc, #248]	; (80a15d8 <loop+0x4b0>)
 80a14e0:	f7fe fe0e 	bl	80a0100 <_ZN19LED_7Segment_4Digit5printEhhhh>

    break;
 80a14e4:	e013      	b.n	80a150e <loop+0x3e6>

    default:

    if (State.stateChanged())
 80a14e6:	4831      	ldr	r0, [pc, #196]	; (80a15ac <loop+0x484>)
 80a14e8:	f000 f96a 	bl	80a17c0 <_ZN12StateMachine12stateChangedEv>
 80a14ec:	b178      	cbz	r0, 80a150e <loop+0x3e6>
    {
      State.stateChanged(FALSE);
 80a14ee:	2100      	movs	r1, #0
 80a14f0:	482e      	ldr	r0, [pc, #184]	; (80a15ac <loop+0x484>)
 80a14f2:	f000 f967 	bl	80a17c4 <_ZN12StateMachine12stateChangedEb>
      lcd.clear();
 80a14f6:	4834      	ldr	r0, [pc, #208]	; (80a15c8 <loop+0x4a0>)
 80a14f8:	f7fe ff4e 	bl	80a0398 <_ZN17LiquidCrystal_I2C5clearEv>
      lcd.setCursor(0,1);
 80a14fc:	2100      	movs	r1, #0
 80a14fe:	2201      	movs	r2, #1
 80a1500:	4831      	ldr	r0, [pc, #196]	; (80a15c8 <loop+0x4a0>)
 80a1502:	f7fe ff5d 	bl	80a03c0 <_ZN17LiquidCrystal_I2C9setCursorEhh>
      lcd.print("NOT_DEFINED");
 80a1506:	4937      	ldr	r1, [pc, #220]	; (80a15e4 <loop+0x4bc>)
 80a1508:	482f      	ldr	r0, [pc, #188]	; (80a15c8 <loop+0x4a0>)
 80a150a:	f000 ffa9 	bl	80a2460 <_ZN5Print5printEPKc>

  /********* main  execution *******************/
  /*  always executed independent from state   */

  /*  check 0buttons                            */
  if (expander.buttonPushed(0)) // check if 0button 1 is pushed and call 0button service routine
 80a150e:	2100      	movs	r1, #0
 80a1510:	4835      	ldr	r0, [pc, #212]	; (80a15e8 <loop+0x4c0>)
 80a1512:	f7ff fba3 	bl	80a0c5c <_ZN7PCF857412buttonPushedEh>
 80a1516:	b118      	cbz	r0, 80a1520 <loop+0x3f8>
  {
    State.onButton(0);
 80a1518:	2100      	movs	r1, #0
 80a151a:	4824      	ldr	r0, [pc, #144]	; (80a15ac <loop+0x484>)
 80a151c:	f000 f955 	bl	80a17ca <_ZN12StateMachine8onButtonEh>
  }

  if (expander.buttonPushed(1)) // check if 0button 2 is pushed and call 0button service routine
 80a1520:	2101      	movs	r1, #1
 80a1522:	4831      	ldr	r0, [pc, #196]	; (80a15e8 <loop+0x4c0>)
 80a1524:	f7ff fb9a 	bl	80a0c5c <_ZN7PCF857412buttonPushedEh>
 80a1528:	b118      	cbz	r0, 80a1532 <loop+0x40a>
  {
    State.onButton(1);
 80a152a:	2101      	movs	r1, #1
 80a152c:	481f      	ldr	r0, [pc, #124]	; (80a15ac <loop+0x484>)
 80a152e:	f000 f94c 	bl	80a17ca <_ZN12StateMachine8onButtonEh>
  }

  /*  draw clock                               */
  lcd.setCursor(15,0);
 80a1532:	2200      	movs	r2, #0
 80a1534:	210f      	movs	r1, #15
 80a1536:	4824      	ldr	r0, [pc, #144]	; (80a15c8 <loop+0x4a0>)
 80a1538:	f7fe ff42 	bl	80a03c0 <_ZN17LiquidCrystal_I2C9setCursorEhh>
  if ( Time.second() % 2 == 0) // check if it is an even or odd second
 80a153c:	f001 fd10 	bl	80a2f60 <_ZN9TimeClass6secondEv>
 80a1540:	07c3      	lsls	r3, r0, #31
 80a1542:	d403      	bmi.n	80a154c <loop+0x424>
  {
    lcd.print(Time.format(Time.now(), "%H %M")); // print time without dot
 80a1544:	f001 fcf1 	bl	80a2f2a <_ZN9TimeClass3nowEv>
 80a1548:	4b28      	ldr	r3, [pc, #160]	; (80a15ec <loop+0x4c4>)
 80a154a:	e002      	b.n	80a1552 <loop+0x42a>
  }
  else
  {
    lcd.print(Time.format(Time.now(), "%H:%M")); // print time with dot
 80a154c:	f001 fced 	bl	80a2f2a <_ZN9TimeClass3nowEv>
 80a1550:	4b27      	ldr	r3, [pc, #156]	; (80a15f0 <loop+0x4c8>)
 80a1552:	4602      	mov	r2, r0
 80a1554:	4927      	ldr	r1, [pc, #156]	; (80a15f4 <loop+0x4cc>)
 80a1556:	a804      	add	r0, sp, #16
 80a1558:	f001 fc94 	bl	80a2e84 <_ZN9TimeClass6formatElPKc>
 80a155c:	9904      	ldr	r1, [sp, #16]
 80a155e:	481a      	ldr	r0, [pc, #104]	; (80a15c8 <loop+0x4a0>)
 80a1560:	f000 ff7e 	bl	80a2460 <_ZN5Print5printEPKc>
 80a1564:	a804      	add	r0, sp, #16
 80a1566:	f001 f887 	bl	80a2678 <_ZN6StringD1Ev>
  }

  if (mqttClient.isConnected())
 80a156a:	4813      	ldr	r0, [pc, #76]	; (80a15b8 <loop+0x490>)
 80a156c:	f7ff f8eb 	bl	80a0746 <_ZN4MQTT11isConnectedEv>
  {
  lcd.setCursor(18,3);
 80a1570:	2203      	movs	r2, #3
 80a1572:	2112      	movs	r1, #18
  else
  {
    lcd.print(Time.format(Time.now(), "%H:%M")); // print time with dot
  }

  if (mqttClient.isConnected())
 80a1574:	b120      	cbz	r0, 80a1580 <loop+0x458>
  {
  lcd.setCursor(18,3);
 80a1576:	4814      	ldr	r0, [pc, #80]	; (80a15c8 <loop+0x4a0>)
 80a1578:	f7fe ff22 	bl	80a03c0 <_ZN17LiquidCrystal_I2C9setCursorEhh>
  lcd.print("* ");
 80a157c:	491e      	ldr	r1, [pc, #120]	; (80a15f8 <loop+0x4d0>)
 80a157e:	e00c      	b.n	80a159a <loop+0x472>
  }
  else
  {
  lcd.setCursor(18,3);
 80a1580:	4811      	ldr	r0, [pc, #68]	; (80a15c8 <loop+0x4a0>)
 80a1582:	f7fe ff1d 	bl	80a03c0 <_ZN17LiquidCrystal_I2C9setCursorEhh>
  lcd.print(" ");
 80a1586:	491d      	ldr	r1, [pc, #116]	; (80a15fc <loop+0x4d4>)
 80a1588:	480f      	ldr	r0, [pc, #60]	; (80a15c8 <loop+0x4a0>)
 80a158a:	f000 ff69 	bl	80a2460 <_ZN5Print5printEPKc>
  if (!mqttClient.connect("sparkclient")) lcd.print(".");
 80a158e:	491c      	ldr	r1, [pc, #112]	; (80a1600 <loop+0x4d8>)
 80a1590:	4809      	ldr	r0, [pc, #36]	; (80a15b8 <loop+0x490>)
 80a1592:	f7ff fb13 	bl	80a0bbc <_ZN4MQTT7connectEPKc>
 80a1596:	b918      	cbnz	r0, 80a15a0 <loop+0x478>
 80a1598:	491a      	ldr	r1, [pc, #104]	; (80a1604 <loop+0x4dc>)
 80a159a:	480b      	ldr	r0, [pc, #44]	; (80a15c8 <loop+0x4a0>)
 80a159c:	f000 ff60 	bl	80a2460 <_ZN5Print5printEPKc>
  }
  mqttClient.loop();
 80a15a0:	4805      	ldr	r0, [pc, #20]	; (80a15b8 <loop+0x490>)
 80a15a2:	f7ff f8de 	bl	80a0762 <_ZN4MQTT4loopEv>

}
 80a15a6:	b009      	add	sp, #36	; 0x24
 80a15a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a15aa:	bf00      	nop
 80a15ac:	200004a1 	.word	0x200004a1
 80a15b0:	20000500 	.word	0x20000500
 80a15b4:	200004b4 	.word	0x200004b4
 80a15b8:	20000530 	.word	0x20000530
 80a15bc:	080a7cf7 	.word	0x080a7cf7
 80a15c0:	080a7c5a 	.word	0x080a7c5a
 80a15c4:	080a7cc4 	.word	0x080a7cc4
 80a15c8:	20000520 	.word	0x20000520
 80a15cc:	080a7d1d 	.word	0x080a7d1d
 80a15d0:	080a7d2c 	.word	0x080a7d2c
 80a15d4:	200004d0 	.word	0x200004d0
 80a15d8:	2000051c 	.word	0x2000051c
 80a15dc:	080a7d3a 	.word	0x080a7d3a
 80a15e0:	080a7d44 	.word	0x080a7d44
 80a15e4:	080a7d53 	.word	0x080a7d53
 80a15e8:	200004d8 	.word	0x200004d8
 80a15ec:	080a7d5f 	.word	0x080a7d5f
 80a15f0:	080a7d65 	.word	0x080a7d65
 80a15f4:	200005c8 	.word	0x200005c8
 80a15f8:	080a7d6b 	.word	0x080a7d6b
 80a15fc:	080a7c16 	.word	0x080a7c16
 80a1600:	080a7b90 	.word	0x080a7b90
 80a1604:	080a7d2a 	.word	0x080a7d2a

080a1608 <_ZN5TimerC1I12StateMachineEEjMT_FvvERS2_b>:
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
    }

    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
 80a1608:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a160a:	b087      	sub	sp, #28
 80a160c:	4604      	mov	r4, r0
 80a160e:	e88d 000c 	stmia.w	sp, {r2, r3}
 80a1612:	461e      	mov	r6, r3
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1614:	200c      	movs	r0, #12
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1616:	2300      	movs	r3, #0
 80a1618:	460d      	mov	r5, r1
 80a161a:	4617      	mov	r7, r2
 80a161c:	9304      	str	r3, [sp, #16]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a161e:	f7fe fd3c 	bl	80a009a <_Znwj>
 80a1622:	b118      	cbz	r0, 80a162c <_ZN5TimerC1I12StateMachineEEjMT_FvvERS2_b+0x24>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a1624:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	{ }

      _Bind(const _Bind&) = default;

      _Bind(_Bind&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
 80a1626:	6007      	str	r7, [r0, #0]
 80a1628:	6046      	str	r6, [r0, #4]
 80a162a:	6083      	str	r3, [r0, #8]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a162c:	4b08      	ldr	r3, [pc, #32]	; (80a1650 <_ZN5TimerC1I12StateMachineEEjMT_FvvERS2_b+0x48>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a162e:	9002      	str	r0, [sp, #8]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a1630:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
 80a1632:	4b08      	ldr	r3, [pc, #32]	; (80a1654 <_ZN5TimerC1I12StateMachineEEjMT_FvvERS2_b+0x4c>)
 80a1634:	aa02      	add	r2, sp, #8
 80a1636:	9304      	str	r3, [sp, #16]
 80a1638:	4629      	mov	r1, r5
 80a163a:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 80a163e:	4620      	mov	r0, r4
 80a1640:	f7ff fc10 	bl	80a0e64 <_ZN5TimerC1EjSt8functionIFvvEEb>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1644:	a802      	add	r0, sp, #8
 80a1646:	f7ff fc04 	bl	80a0e52 <_ZNSt14_Function_baseD1Ev>
    {
    }
 80a164a:	4620      	mov	r0, r4
 80a164c:	b007      	add	sp, #28
 80a164e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a1650:	080a0cb9 	.word	0x080a0cb9
 80a1654:	080a0e1d 	.word	0x080a0e1d

080a1658 <_GLOBAL__sub_I_lcd>:
 80a1658:	b570      	push	{r4, r5, r6, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a165a:	4b38      	ldr	r3, [pc, #224]	; (80a173c <_GLOBAL__sub_I_lcd+0xe4>)
 80a165c:	b08a      	sub	sp, #40	; 0x28
 80a165e:	2400      	movs	r4, #0
 80a1660:	701c      	strb	r4, [r3, #0]
 80a1662:	f000 f95b 	bl	80a191c <HAL_Pin_Map>
#include "StateMachine.h" // header file for main program

/**********************************************************************
instanciation of required objects
/*********************************************************************/
LiquidCrystal_I2C lcd(0x27,20,4);  // set the LCD address to 0x27 for a 20 chars and 4 line display
 80a1666:	2304      	movs	r3, #4
 80a1668:	2214      	movs	r2, #20
 80a166a:	2127      	movs	r1, #39	; 0x27
 80a166c:	4834      	ldr	r0, [pc, #208]	; (80a1740 <_GLOBAL__sub_I_lcd+0xe8>)
 80a166e:	f7fe fe2b 	bl	80a02c8 <_ZN17LiquidCrystal_I2CC1Ehhh>
 80a1672:	4a34      	ldr	r2, [pc, #208]	; (80a1744 <_GLOBAL__sub_I_lcd+0xec>)
 80a1674:	4934      	ldr	r1, [pc, #208]	; (80a1748 <_GLOBAL__sub_I_lcd+0xf0>)
 80a1676:	4832      	ldr	r0, [pc, #200]	; (80a1740 <_GLOBAL__sub_I_lcd+0xe8>)
 80a1678:	f001 fee8 	bl	80a344c <__aeabi_atexit>
LED_7Segment_4Digit led(0x38); // 4 - digit led opbject at adress 0x38
 80a167c:	2138      	movs	r1, #56	; 0x38
 80a167e:	4833      	ldr	r0, [pc, #204]	; (80a174c <_GLOBAL__sub_I_lcd+0xf4>)
 80a1680:	f7fe fd1f 	bl	80a00c2 <_ZN19LED_7Segment_4DigitC1Eh>
PCF8574 expander(0x40 >> 1); // port expander at adress 0x40 >> 1 (bitshift needed due to 7 bit adressing of photon);
 80a1684:	2120      	movs	r1, #32
 80a1686:	4832      	ldr	r0, [pc, #200]	; (80a1750 <_GLOBAL__sub_I_lcd+0xf8>)
 80a1688:	f7ff faaa 	bl	80a0be0 <_ZN7PCF8574C1Ei>

byte mqttServer[] = { 192,168,001,151 };
MQTT mqttClient(mqttServer, 1883, callback);
char buffer[50];

StateMachine State; // State machine object to hold and lookup states based upon buttons pushed or timer events occured
 80a168c:	4d31      	ldr	r5, [pc, #196]	; (80a1754 <_GLOBAL__sub_I_lcd+0xfc>)
LiquidCrystal_I2C lcd(0x27,20,4);  // set the LCD address to 0x27 for a 20 chars and 4 line display
LED_7Segment_4Digit led(0x38); // 4 - digit led opbject at adress 0x38
PCF8574 expander(0x40 >> 1); // port expander at adress 0x40 >> 1 (bitshift needed due to 7 bit adressing of photon);

byte mqttServer[] = { 192,168,001,151 };
MQTT mqttClient(mqttServer, 1883, callback);
 80a168e:	4b32      	ldr	r3, [pc, #200]	; (80a1758 <_GLOBAL__sub_I_lcd+0x100>)
 80a1690:	f240 725b 	movw	r2, #1883	; 0x75b
 80a1694:	4931      	ldr	r1, [pc, #196]	; (80a175c <_GLOBAL__sub_I_lcd+0x104>)
 80a1696:	4832      	ldr	r0, [pc, #200]	; (80a1760 <_GLOBAL__sub_I_lcd+0x108>)
 80a1698:	f7fe ff72 	bl	80a0580 <_ZN4MQTTC1EPhtPFvPcS0_jE>
 80a169c:	4a29      	ldr	r2, [pc, #164]	; (80a1744 <_GLOBAL__sub_I_lcd+0xec>)
 80a169e:	4931      	ldr	r1, [pc, #196]	; (80a1764 <_GLOBAL__sub_I_lcd+0x10c>)
 80a16a0:	482f      	ldr	r0, [pc, #188]	; (80a1760 <_GLOBAL__sub_I_lcd+0x108>)
 80a16a2:	f001 fed3 	bl	80a344c <__aeabi_atexit>

StateMachine State; // State machine object to hold and lookup states based upon buttons pushed or timer events occured

DataStorage DataStorage;

SaunaClock SaunaClock;
 80a16a6:	4e30      	ldr	r6, [pc, #192]	; (80a1768 <_GLOBAL__sub_I_lcd+0x110>)

byte mqttServer[] = { 192,168,001,151 };
MQTT mqttClient(mqttServer, 1883, callback);
char buffer[50];

StateMachine State; // State machine object to hold and lookup states based upon buttons pushed or timer events occured
 80a16a8:	4628      	mov	r0, r5
 80a16aa:	f000 f873 	bl	80a1794 <_ZN12StateMachineC1Ev>

DataStorage DataStorage;
 80a16ae:	482f      	ldr	r0, [pc, #188]	; (80a176c <_GLOBAL__sub_I_lcd+0x114>)
 80a16b0:	f000 f8a8 	bl	80a1804 <_ZN11DataStorageC1Ev>

SaunaClock SaunaClock;
 80a16b4:	4630      	mov	r0, r6
 80a16b6:	f000 f8ab 	bl	80a1810 <_ZN10SaunaClockC1Ev>

Timer timeoutTimer(ONTIMEOUT, &StateMachine::onTimeout, State); // timeoutTimer that executes the onTimeout method on a regular basis
 80a16ba:	4b2d      	ldr	r3, [pc, #180]	; (80a1770 <_GLOBAL__sub_I_lcd+0x118>)
 80a16bc:	9403      	str	r4, [sp, #12]
 80a16be:	9302      	str	r3, [sp, #8]
 80a16c0:	9401      	str	r4, [sp, #4]
 80a16c2:	9500      	str	r5, [sp, #0]
 80a16c4:	ab02      	add	r3, sp, #8
 80a16c6:	cb0c      	ldmia	r3, {r2, r3}
 80a16c8:	f247 5130 	movw	r1, #30000	; 0x7530
 80a16cc:	4829      	ldr	r0, [pc, #164]	; (80a1774 <_GLOBAL__sub_I_lcd+0x11c>)
 80a16ce:	f7ff ff9b 	bl	80a1608 <_ZN5TimerC1I12StateMachineEEjMT_FvvERS2_b>
 80a16d2:	4a1c      	ldr	r2, [pc, #112]	; (80a1744 <_GLOBAL__sub_I_lcd+0xec>)
 80a16d4:	4928      	ldr	r1, [pc, #160]	; (80a1778 <_GLOBAL__sub_I_lcd+0x120>)
 80a16d6:	4827      	ldr	r0, [pc, #156]	; (80a1774 <_GLOBAL__sub_I_lcd+0x11c>)
 80a16d8:	f001 feb8 	bl	80a344c <__aeabi_atexit>
Timer minuteTimer(30000,&StateMachine::minuteTimer, State); // Service routine that calls every Minute
 80a16dc:	4b27      	ldr	r3, [pc, #156]	; (80a177c <_GLOBAL__sub_I_lcd+0x124>)
 80a16de:	9405      	str	r4, [sp, #20]
 80a16e0:	9304      	str	r3, [sp, #16]
 80a16e2:	9401      	str	r4, [sp, #4]
 80a16e4:	9500      	str	r5, [sp, #0]
 80a16e6:	ab04      	add	r3, sp, #16
 80a16e8:	cb0c      	ldmia	r3, {r2, r3}
 80a16ea:	f247 5130 	movw	r1, #30000	; 0x7530
 80a16ee:	4824      	ldr	r0, [pc, #144]	; (80a1780 <_GLOBAL__sub_I_lcd+0x128>)
 80a16f0:	f7ff ff8a 	bl	80a1608 <_ZN5TimerC1I12StateMachineEEjMT_FvvERS2_b>
 80a16f4:	4a13      	ldr	r2, [pc, #76]	; (80a1744 <_GLOBAL__sub_I_lcd+0xec>)
 80a16f6:	4920      	ldr	r1, [pc, #128]	; (80a1778 <_GLOBAL__sub_I_lcd+0x120>)
 80a16f8:	4821      	ldr	r0, [pc, #132]	; (80a1780 <_GLOBAL__sub_I_lcd+0x128>)
 80a16fa:	f001 fea7 	bl	80a344c <__aeabi_atexit>
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a16fe:	200c      	movs	r0, #12
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1700:	9408      	str	r4, [sp, #32]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1702:	f7fe fcca 	bl	80a009a <_Znwj>
 80a1706:	b110      	cbz	r0, 80a170e <_GLOBAL__sub_I_lcd+0xb6>
	{ }

      _Bind(const _Bind&) = default;

      _Bind(_Bind&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
 80a1708:	4b1e      	ldr	r3, [pc, #120]	; (80a1784 <_GLOBAL__sub_I_lcd+0x12c>)
 80a170a:	e880 0058 	stmia.w	r0, {r3, r4, r6}
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a170e:	4b1e      	ldr	r3, [pc, #120]	; (80a1788 <_GLOBAL__sub_I_lcd+0x130>)
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
    }

    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
 80a1710:	aa06      	add	r2, sp, #24
 80a1712:	9309      	str	r3, [sp, #36]	; 0x24
	    _M_manager = &_My_handler::_M_manager;
 80a1714:	4b1d      	ldr	r3, [pc, #116]	; (80a178c <_GLOBAL__sub_I_lcd+0x134>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1716:	9006      	str	r0, [sp, #24]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
 80a1718:	9308      	str	r3, [sp, #32]
 80a171a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80a171e:	2300      	movs	r3, #0
 80a1720:	481b      	ldr	r0, [pc, #108]	; (80a1790 <_GLOBAL__sub_I_lcd+0x138>)
 80a1722:	f7ff fb9f 	bl	80a0e64 <_ZN5TimerC1EjSt8functionIFvvEEb>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1726:	a806      	add	r0, sp, #24
 80a1728:	f7ff fb93 	bl	80a0e52 <_ZNSt14_Function_baseD1Ev>
Timer secondTimer(1000, &SaunaClock::secondTimer, SaunaClock); // Foundation to count seconds in Sauna timer
 80a172c:	4a05      	ldr	r2, [pc, #20]	; (80a1744 <_GLOBAL__sub_I_lcd+0xec>)
 80a172e:	4912      	ldr	r1, [pc, #72]	; (80a1778 <_GLOBAL__sub_I_lcd+0x120>)
 80a1730:	4817      	ldr	r0, [pc, #92]	; (80a1790 <_GLOBAL__sub_I_lcd+0x138>)
 80a1732:	f001 fe8b 	bl	80a344c <__aeabi_atexit>
  lcd.print(" ");
  if (!mqttClient.connect("sparkclient")) lcd.print(".");
  }
  mqttClient.loop();

}
 80a1736:	b00a      	add	sp, #40	; 0x28
 80a1738:	bd70      	pop	{r4, r5, r6, pc}
 80a173a:	bf00      	nop
 80a173c:	200004a0 	.word	0x200004a0
 80a1740:	20000520 	.word	0x20000520
 80a1744:	20000478 	.word	0x20000478
 80a1748:	080a02b9 	.word	0x080a02b9
 80a174c:	2000051c 	.word	0x2000051c
 80a1750:	200004d8 	.word	0x200004d8
 80a1754:	200004a1 	.word	0x200004a1
 80a1758:	080a0d6d 	.word	0x080a0d6d
 80a175c:	20000380 	.word	0x20000380
 80a1760:	20000530 	.word	0x20000530
 80a1764:	080a0a01 	.word	0x080a0a01
 80a1768:	200004d0 	.word	0x200004d0
 80a176c:	2000047c 	.word	0x2000047c
 80a1770:	080a17e1 	.word	0x080a17e1
 80a1774:	20000500 	.word	0x20000500
 80a1778:	080a0f11 	.word	0x080a0f11
 80a177c:	080a17f3 	.word	0x080a17f3
 80a1780:	20000484 	.word	0x20000484
 80a1784:	080a181d 	.word	0x080a181d
 80a1788:	080a0cd5 	.word	0x080a0cd5
 80a178c:	080a0dc5 	.word	0x080a0dc5
 80a1790:	200004b4 	.word	0x200004b4

080a1794 <_ZN12StateMachineC1Ev>:
#include "MQTT.h"


/********** StateMachine ********************/
/*  initialize object                       */
StateMachine::StateMachine()
 80a1794:	4908      	ldr	r1, [pc, #32]	; (80a17b8 <_ZN12StateMachineC1Ev+0x24>)
 80a1796:	680a      	ldr	r2, [r1, #0]
 80a1798:	6042      	str	r2, [r0, #4]
 80a179a:	684a      	ldr	r2, [r1, #4]
 80a179c:	2102      	movs	r1, #2
 80a179e:	6082      	str	r2, [r0, #8]
 80a17a0:	7381      	strb	r1, [r0, #14]
 80a17a2:	2200      	movs	r2, #0
{
  _currentState = 0;
  _stateChanged = TRUE;
 80a17a4:	2101      	movs	r1, #1
#include "MQTT.h"


/********** StateMachine ********************/
/*  initialize object                       */
StateMachine::StateMachine()
 80a17a6:	7302      	strb	r2, [r0, #12]
 80a17a8:	7342      	strb	r2, [r0, #13]
 80a17aa:	73c2      	strb	r2, [r0, #15]
{
  _currentState = 0;
 80a17ac:	7042      	strb	r2, [r0, #1]
  _stateChanged = TRUE;
 80a17ae:	7081      	strb	r1, [r0, #2]
  _counter = 0;
 80a17b0:	70c2      	strb	r2, [r0, #3]
  updateData = FALSE;
 80a17b2:	7002      	strb	r2, [r0, #0]
}
 80a17b4:	4770      	bx	lr
 80a17b6:	bf00      	nop
 80a17b8:	080a7d6e 	.word	0x080a7d6e

080a17bc <_ZN12StateMachine12currentStateEv>:

uint8_t StateMachine::currentState()
{
  return _currentState;
}
 80a17bc:	7840      	ldrb	r0, [r0, #1]
 80a17be:	4770      	bx	lr

080a17c0 <_ZN12StateMachine12stateChangedEv>:

bool StateMachine::stateChanged()
{
  return _stateChanged;
}
 80a17c0:	7880      	ldrb	r0, [r0, #2]
 80a17c2:	4770      	bx	lr

080a17c4 <_ZN12StateMachine12stateChangedEb>:

bool StateMachine::stateChanged(bool value)
{
  _stateChanged = value;
 80a17c4:	7081      	strb	r1, [r0, #2]
  return _stateChanged;
}
 80a17c6:	4608      	mov	r0, r1
 80a17c8:	4770      	bx	lr

080a17ca <_ZN12StateMachine8onButtonEh>:

void StateMachine::onButton(uint8_t triggerProperty)
{
  if (_currentState != _buttonTrigger[_currentState][triggerProperty])
 80a17ca:	7842      	ldrb	r2, [r0, #1]
 80a17cc:	eb00 0342 	add.w	r3, r0, r2, lsl #1
 80a17d0:	4419      	add	r1, r3
 80a17d2:	790b      	ldrb	r3, [r1, #4]
 80a17d4:	429a      	cmp	r2, r3
  {
    _stateChanged = TRUE;
 80a17d6:	bf1e      	ittt	ne
 80a17d8:	2201      	movne	r2, #1
 80a17da:	7082      	strbne	r2, [r0, #2]
    _currentState = _buttonTrigger[_currentState][triggerProperty];
 80a17dc:	7043      	strbne	r3, [r0, #1]
 80a17de:	4770      	bx	lr

080a17e0 <_ZN12StateMachine9onTimeoutEv>:
  }
}

void StateMachine::onTimeout()
{
  if (_currentState != _timerTrigger[_currentState])
 80a17e0:	7842      	ldrb	r2, [r0, #1]
 80a17e2:	1883      	adds	r3, r0, r2
 80a17e4:	7b1b      	ldrb	r3, [r3, #12]
 80a17e6:	429a      	cmp	r2, r3
  {
    _stateChanged = TRUE;
 80a17e8:	bf1e      	ittt	ne
 80a17ea:	2201      	movne	r2, #1
 80a17ec:	7082      	strbne	r2, [r0, #2]
    _currentState = _timerTrigger[_currentState];
 80a17ee:	7043      	strbne	r3, [r0, #1]
 80a17f0:	4770      	bx	lr

080a17f2 <_ZN12StateMachine11minuteTimerEv>:

}

void StateMachine::minuteTimer()
{
  if ( _counter < 20)
 80a17f2:	78c3      	ldrb	r3, [r0, #3]
 80a17f4:	2b13      	cmp	r3, #19
  {
    _counter++;
  }
  else
  {
    updateData = TRUE;
 80a17f6:	bf89      	itett	hi
 80a17f8:	2301      	movhi	r3, #1

void StateMachine::minuteTimer()
{
  if ( _counter < 20)
  {
    _counter++;
 80a17fa:	3301      	addls	r3, #1
  }
  else
  {
    updateData = TRUE;
 80a17fc:	7003      	strbhi	r3, [r0, #0]
    _counter = 0;
 80a17fe:	2300      	movhi	r3, #0
 80a1800:	70c3      	strb	r3, [r0, #3]
 80a1802:	4770      	bx	lr

080a1804 <_ZN11DataStorageC1Ev>:
/********** DataStorage *********************/
/*  initialize object                       */
DataStorage::DataStorage()
{

  dstRequested = FALSE;
 80a1804:	2200      	movs	r2, #0
 80a1806:	7002      	strb	r2, [r0, #0]
  updateTemp = FALSE;
 80a1808:	7082      	strb	r2, [r0, #2]
  outsideTemp = 0;
 80a180a:	2200      	movs	r2, #0
 80a180c:	6042      	str	r2, [r0, #4]
}
 80a180e:	4770      	bx	lr

080a1810 <_ZN10SaunaClockC1Ev>:
/*  initialize object                       */
SaunaClock::SaunaClock()
{
  for (int i = 0; i < 4; i++)
  {
    _counter[i] = 0;
 80a1810:	2200      	movs	r2, #0
 80a1812:	7002      	strb	r2, [r0, #0]
 80a1814:	7042      	strb	r2, [r0, #1]
 80a1816:	7082      	strb	r2, [r0, #2]
 80a1818:	70c2      	strb	r2, [r0, #3]
  }
}
 80a181a:	4770      	bx	lr

080a181c <_ZN10SaunaClock11secondTimerEv>:
void SaunaClock::secondTimer()
{
  if (_counter[3] == 0)
 80a181c:	78c3      	ldrb	r3, [r0, #3]
 80a181e:	b9ab      	cbnz	r3, 80a184c <_ZN10SaunaClock11secondTimerEv+0x30>
  {
    _counter[3] = 9;
    if (_counter[2] == 0)
 80a1820:	7883      	ldrb	r3, [r0, #2]
}
void SaunaClock::secondTimer()
{
  if (_counter[3] == 0)
  {
    _counter[3] = 9;
 80a1822:	2109      	movs	r1, #9
 80a1824:	70c1      	strb	r1, [r0, #3]
    if (_counter[2] == 0)
 80a1826:	b973      	cbnz	r3, 80a1846 <_ZN10SaunaClock11secondTimerEv+0x2a>
    {
      _counter[2] = 5;
      if (_counter[1] == 0)
 80a1828:	7843      	ldrb	r3, [r0, #1]
  if (_counter[3] == 0)
  {
    _counter[3] = 9;
    if (_counter[2] == 0)
    {
      _counter[2] = 5;
 80a182a:	2205      	movs	r2, #5
 80a182c:	7082      	strb	r2, [r0, #2]
      if (_counter[1] == 0)
 80a182e:	b93b      	cbnz	r3, 80a1840 <_ZN10SaunaClock11secondTimerEv+0x24>
      {
        _counter[1] = 9;
        if (_counter[0] == 0)
 80a1830:	7803      	ldrb	r3, [r0, #0]
    if (_counter[2] == 0)
    {
      _counter[2] = 5;
      if (_counter[1] == 0)
      {
        _counter[1] = 9;
 80a1832:	7041      	strb	r1, [r0, #1]
        if (_counter[0] == 0)
 80a1834:	b90b      	cbnz	r3, 80a183a <_ZN10SaunaClock11secondTimerEv+0x1e>
        {_counter[0] = 5;}
 80a1836:	7002      	strb	r2, [r0, #0]
 80a1838:	4770      	bx	lr
        else
        {_counter[0]--;}
 80a183a:	3b01      	subs	r3, #1
 80a183c:	7003      	strb	r3, [r0, #0]
 80a183e:	4770      	bx	lr

      }
      else
      {
        _counter[1]--;
 80a1840:	3b01      	subs	r3, #1
 80a1842:	7043      	strb	r3, [r0, #1]
 80a1844:	4770      	bx	lr
      }
    }
    else
    {_counter[2]--;}
 80a1846:	3b01      	subs	r3, #1
 80a1848:	7083      	strb	r3, [r0, #2]
 80a184a:	4770      	bx	lr
  }
  else
  {_counter[3]--;}
 80a184c:	3b01      	subs	r3, #1
 80a184e:	70c3      	strb	r3, [r0, #3]
 80a1850:	4770      	bx	lr

080a1852 <_ZN10SaunaClock5resetEv>:
{

}
void SaunaClock::reset()
{
  _counter[0] = 1;
 80a1852:	2301      	movs	r3, #1
 80a1854:	7003      	strb	r3, [r0, #0]
  _counter[1] = 5;
 80a1856:	2305      	movs	r3, #5
 80a1858:	7043      	strb	r3, [r0, #1]
  _counter[2] = 0;
 80a185a:	2300      	movs	r3, #0
 80a185c:	7083      	strb	r3, [r0, #2]
  _counter[3] = 0;
 80a185e:	70c3      	strb	r3, [r0, #3]
 80a1860:	4770      	bx	lr

080a1862 <_ZN10SaunaClock8getDigitEh>:

}
uint8_t SaunaClock::getDigit(uint8_t digit)
{
  return _counter[digit];
}
 80a1862:	5c40      	ldrb	r0, [r0, r1]
 80a1864:	4770      	bx	lr

080a1866 <_GLOBAL__sub_I__ZN12StateMachineC2Ev>:
 80a1866:	f000 b859 	b.w	80a191c <HAL_Pin_Map>
	...

080a186c <os_timer_create>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
 80a186c:	b508      	push	{r3, lr}
 80a186e:	4b02      	ldr	r3, [pc, #8]	; (80a1878 <os_timer_create+0xc>)
 80a1870:	681b      	ldr	r3, [r3, #0]
 80a1872:	6a1b      	ldr	r3, [r3, #32]
 80a1874:	9301      	str	r3, [sp, #4]
 80a1876:	bd08      	pop	{r3, pc}
 80a1878:	080601d0 	.word	0x080601d0

080a187c <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
 80a187c:	b508      	push	{r3, lr}
 80a187e:	4b02      	ldr	r3, [pc, #8]	; (80a1888 <os_timer_destroy+0xc>)
 80a1880:	681b      	ldr	r3, [r3, #0]
 80a1882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1884:	9301      	str	r3, [sp, #4]
 80a1886:	bd08      	pop	{r3, pc}
 80a1888:	080601d0 	.word	0x080601d0

080a188c <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
 80a188c:	b508      	push	{r3, lr}
 80a188e:	4b02      	ldr	r3, [pc, #8]	; (80a1898 <os_timer_get_id+0xc>)
 80a1890:	681b      	ldr	r3, [r3, #0]
 80a1892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a1894:	9301      	str	r3, [sp, #4]
 80a1896:	bd08      	pop	{r3, pc}
 80a1898:	080601d0 	.word	0x080601d0

080a189c <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
 80a189c:	b508      	push	{r3, lr}
 80a189e:	4b02      	ldr	r3, [pc, #8]	; (80a18a8 <os_timer_change+0xc>)
 80a18a0:	681b      	ldr	r3, [r3, #0]
 80a18a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a18a4:	9301      	str	r3, [sp, #4]
 80a18a6:	bd08      	pop	{r3, pc}
 80a18a8:	080601d0 	.word	0x080601d0

080a18ac <os_mutex_create>:

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a18ac:	b508      	push	{r3, lr}
 80a18ae:	4b02      	ldr	r3, [pc, #8]	; (80a18b8 <os_mutex_create+0xc>)
 80a18b0:	681b      	ldr	r3, [r3, #0]
 80a18b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a18b4:	9301      	str	r3, [sp, #4]
 80a18b6:	bd08      	pop	{r3, pc}
 80a18b8:	080601d0 	.word	0x080601d0

080a18bc <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
 80a18bc:	b508      	push	{r3, lr}
 80a18be:	4b02      	ldr	r3, [pc, #8]	; (80a18c8 <HAL_Core_Get_Last_Reset_Info+0xc>)
 80a18c0:	681b      	ldr	r3, [r3, #0]
 80a18c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a18c4:	9301      	str	r3, [sp, #4]
 80a18c6:	bd08      	pop	{r3, pc}
 80a18c8:	080601b8 	.word	0x080601b8

080a18cc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a18cc:	b508      	push	{r3, lr}
 80a18ce:	4b02      	ldr	r3, [pc, #8]	; (80a18d8 <HAL_RNG_GetRandomNumber+0xc>)
 80a18d0:	681b      	ldr	r3, [r3, #0]
 80a18d2:	685b      	ldr	r3, [r3, #4]
 80a18d4:	9301      	str	r3, [sp, #4]
 80a18d6:	bd08      	pop	{r3, pc}
 80a18d8:	0806019c 	.word	0x0806019c

080a18dc <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a18dc:	b508      	push	{r3, lr}
 80a18de:	4b02      	ldr	r3, [pc, #8]	; (80a18e8 <HAL_Delay_Microseconds+0xc>)
 80a18e0:	681b      	ldr	r3, [r3, #0]
 80a18e2:	68db      	ldr	r3, [r3, #12]
 80a18e4:	9301      	str	r3, [sp, #4]
 80a18e6:	bd08      	pop	{r3, pc}
 80a18e8:	0806019c 	.word	0x0806019c

080a18ec <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a18ec:	b508      	push	{r3, lr}
 80a18ee:	4b02      	ldr	r3, [pc, #8]	; (80a18f8 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a18f0:	681b      	ldr	r3, [r3, #0]
 80a18f2:	695b      	ldr	r3, [r3, #20]
 80a18f4:	9301      	str	r3, [sp, #4]
 80a18f6:	bd08      	pop	{r3, pc}
 80a18f8:	0806019c 	.word	0x0806019c

080a18fc <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
 80a18fc:	b508      	push	{r3, lr}
 80a18fe:	4b02      	ldr	r3, [pc, #8]	; (80a1908 <HAL_RTC_Get_UnixTime+0xc>)
 80a1900:	681b      	ldr	r3, [r3, #0]
 80a1902:	69db      	ldr	r3, [r3, #28]
 80a1904:	9301      	str	r3, [sp, #4]
 80a1906:	bd08      	pop	{r3, pc}
 80a1908:	0806019c 	.word	0x0806019c

080a190c <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
 80a190c:	b508      	push	{r3, lr}
 80a190e:	4b02      	ldr	r3, [pc, #8]	; (80a1918 <HAL_RTC_Time_Is_Valid+0xc>)
 80a1910:	681b      	ldr	r3, [r3, #0]
 80a1912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a1914:	9301      	str	r3, [sp, #4]
 80a1916:	bd08      	pop	{r3, pc}
 80a1918:	0806019c 	.word	0x0806019c

080a191c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 80a191c:	b508      	push	{r3, lr}
 80a191e:	4b02      	ldr	r3, [pc, #8]	; (80a1928 <HAL_Pin_Map+0xc>)
 80a1920:	681b      	ldr	r3, [r3, #0]
 80a1922:	681b      	ldr	r3, [r3, #0]
 80a1924:	9301      	str	r3, [sp, #4]
 80a1926:	bd08      	pop	{r3, pc}
 80a1928:	080601b0 	.word	0x080601b0

080a192c <HAL_I2C_Set_Speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
 80a192c:	b508      	push	{r3, lr}
 80a192e:	4b02      	ldr	r3, [pc, #8]	; (80a1938 <HAL_I2C_Set_Speed+0xc>)
 80a1930:	681b      	ldr	r3, [r3, #0]
 80a1932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1934:	9301      	str	r3, [sp, #4]
 80a1936:	bd08      	pop	{r3, pc}
 80a1938:	080601ac 	.word	0x080601ac

080a193c <HAL_I2C_Stretch_Clock>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
 80a193c:	b508      	push	{r3, lr}
 80a193e:	4b02      	ldr	r3, [pc, #8]	; (80a1948 <HAL_I2C_Stretch_Clock+0xc>)
 80a1940:	681b      	ldr	r3, [r3, #0]
 80a1942:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1944:	9301      	str	r3, [sp, #4]
 80a1946:	bd08      	pop	{r3, pc}
 80a1948:	080601ac 	.word	0x080601ac

080a194c <HAL_I2C_Begin>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80a194c:	b508      	push	{r3, lr}
 80a194e:	4b02      	ldr	r3, [pc, #8]	; (80a1958 <HAL_I2C_Begin+0xc>)
 80a1950:	681b      	ldr	r3, [r3, #0]
 80a1952:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a1954:	9301      	str	r3, [sp, #4]
 80a1956:	bd08      	pop	{r3, pc}
 80a1958:	080601ac 	.word	0x080601ac

080a195c <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 80a195c:	b508      	push	{r3, lr}
 80a195e:	4b02      	ldr	r3, [pc, #8]	; (80a1968 <HAL_I2C_Request_Data+0xc>)
 80a1960:	681b      	ldr	r3, [r3, #0]
 80a1962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a1964:	9301      	str	r3, [sp, #4]
 80a1966:	bd08      	pop	{r3, pc}
 80a1968:	080601ac 	.word	0x080601ac

080a196c <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 80a196c:	b508      	push	{r3, lr}
 80a196e:	4b02      	ldr	r3, [pc, #8]	; (80a1978 <HAL_I2C_Begin_Transmission+0xc>)
 80a1970:	681b      	ldr	r3, [r3, #0]
 80a1972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a1974:	9301      	str	r3, [sp, #4]
 80a1976:	bd08      	pop	{r3, pc}
 80a1978:	080601ac 	.word	0x080601ac

080a197c <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80a197c:	b508      	push	{r3, lr}
 80a197e:	4b02      	ldr	r3, [pc, #8]	; (80a1988 <HAL_I2C_End_Transmission+0xc>)
 80a1980:	681b      	ldr	r3, [r3, #0]
 80a1982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a1984:	9301      	str	r3, [sp, #4]
 80a1986:	bd08      	pop	{r3, pc}
 80a1988:	080601ac 	.word	0x080601ac

080a198c <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a198c:	b508      	push	{r3, lr}
 80a198e:	4b02      	ldr	r3, [pc, #8]	; (80a1998 <HAL_I2C_Write_Data+0xc>)
 80a1990:	681b      	ldr	r3, [r3, #0]
 80a1992:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a1994:	9301      	str	r3, [sp, #4]
 80a1996:	bd08      	pop	{r3, pc}
 80a1998:	080601ac 	.word	0x080601ac

080a199c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a199c:	b508      	push	{r3, lr}
 80a199e:	4b02      	ldr	r3, [pc, #8]	; (80a19a8 <HAL_I2C_Available_Data+0xc>)
 80a19a0:	681b      	ldr	r3, [r3, #0]
 80a19a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a19a4:	9301      	str	r3, [sp, #4]
 80a19a6:	bd08      	pop	{r3, pc}
 80a19a8:	080601ac 	.word	0x080601ac

080a19ac <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a19ac:	b508      	push	{r3, lr}
 80a19ae:	4b02      	ldr	r3, [pc, #8]	; (80a19b8 <HAL_I2C_Read_Data+0xc>)
 80a19b0:	681b      	ldr	r3, [r3, #0]
 80a19b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a19b4:	9301      	str	r3, [sp, #4]
 80a19b6:	bd08      	pop	{r3, pc}
 80a19b8:	080601ac 	.word	0x080601ac

080a19bc <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a19bc:	b508      	push	{r3, lr}
 80a19be:	4b02      	ldr	r3, [pc, #8]	; (80a19c8 <HAL_I2C_Peek_Data+0xc>)
 80a19c0:	681b      	ldr	r3, [r3, #0]
 80a19c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a19c4:	9301      	str	r3, [sp, #4]
 80a19c6:	bd08      	pop	{r3, pc}
 80a19c8:	080601ac 	.word	0x080601ac

080a19cc <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a19cc:	b508      	push	{r3, lr}
 80a19ce:	4b02      	ldr	r3, [pc, #8]	; (80a19d8 <HAL_I2C_Flush_Data+0xc>)
 80a19d0:	681b      	ldr	r3, [r3, #0]
 80a19d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a19d4:	9301      	str	r3, [sp, #4]
 80a19d6:	bd08      	pop	{r3, pc}
 80a19d8:	080601ac 	.word	0x080601ac

080a19dc <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a19dc:	b508      	push	{r3, lr}
 80a19de:	4b03      	ldr	r3, [pc, #12]	; (80a19ec <HAL_I2C_Init+0x10>)
 80a19e0:	681b      	ldr	r3, [r3, #0]
 80a19e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a19e6:	9301      	str	r3, [sp, #4]
 80a19e8:	bd08      	pop	{r3, pc}
 80a19ea:	0000      	.short	0x0000
 80a19ec:	080601ac 	.word	0x080601ac

080a19f0 <socket_active_status>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
 80a19f0:	b508      	push	{r3, lr}
 80a19f2:	4b02      	ldr	r3, [pc, #8]	; (80a19fc <socket_active_status+0xc>)
 80a19f4:	681b      	ldr	r3, [r3, #0]
 80a19f6:	681b      	ldr	r3, [r3, #0]
 80a19f8:	9301      	str	r3, [sp, #4]
 80a19fa:	bd08      	pop	{r3, pc}
 80a19fc:	080601bc 	.word	0x080601bc

080a1a00 <socket_handle_valid>:
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80a1a00:	b508      	push	{r3, lr}
 80a1a02:	4b02      	ldr	r3, [pc, #8]	; (80a1a0c <socket_handle_valid+0xc>)
 80a1a04:	681b      	ldr	r3, [r3, #0]
 80a1a06:	685b      	ldr	r3, [r3, #4]
 80a1a08:	9301      	str	r3, [sp, #4]
 80a1a0a:	bd08      	pop	{r3, pc}
 80a1a0c:	080601bc 	.word	0x080601bc

080a1a10 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80a1a10:	b508      	push	{r3, lr}
 80a1a12:	4b02      	ldr	r3, [pc, #8]	; (80a1a1c <socket_create+0xc>)
 80a1a14:	681b      	ldr	r3, [r3, #0]
 80a1a16:	689b      	ldr	r3, [r3, #8]
 80a1a18:	9301      	str	r3, [sp, #4]
 80a1a1a:	bd08      	pop	{r3, pc}
 80a1a1c:	080601bc 	.word	0x080601bc

080a1a20 <socket_connect>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
 80a1a20:	b508      	push	{r3, lr}
 80a1a22:	4b02      	ldr	r3, [pc, #8]	; (80a1a2c <socket_connect+0xc>)
 80a1a24:	681b      	ldr	r3, [r3, #0]
 80a1a26:	68db      	ldr	r3, [r3, #12]
 80a1a28:	9301      	str	r3, [sp, #4]
 80a1a2a:	bd08      	pop	{r3, pc}
 80a1a2c:	080601bc 	.word	0x080601bc

080a1a30 <socket_receive>:
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
 80a1a30:	b508      	push	{r3, lr}
 80a1a32:	4b02      	ldr	r3, [pc, #8]	; (80a1a3c <socket_receive+0xc>)
 80a1a34:	681b      	ldr	r3, [r3, #0]
 80a1a36:	691b      	ldr	r3, [r3, #16]
 80a1a38:	9301      	str	r3, [sp, #4]
 80a1a3a:	bd08      	pop	{r3, pc}
 80a1a3c:	080601bc 	.word	0x080601bc

080a1a40 <socket_close>:
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80a1a40:	b508      	push	{r3, lr}
 80a1a42:	4b02      	ldr	r3, [pc, #8]	; (80a1a4c <socket_close+0xc>)
 80a1a44:	681b      	ldr	r3, [r3, #0]
 80a1a46:	6a1b      	ldr	r3, [r3, #32]
 80a1a48:	9301      	str	r3, [sp, #4]
 80a1a4a:	bd08      	pop	{r3, pc}
 80a1a4c:	080601bc 	.word	0x080601bc

080a1a50 <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80a1a50:	b508      	push	{r3, lr}
 80a1a52:	4b02      	ldr	r3, [pc, #8]	; (80a1a5c <socket_handle_invalid+0xc>)
 80a1a54:	681b      	ldr	r3, [r3, #0]
 80a1a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1a58:	9301      	str	r3, [sp, #4]
 80a1a5a:	bd08      	pop	{r3, pc}
 80a1a5c:	080601bc 	.word	0x080601bc

080a1a60 <socket_send_ex>:
DYNALIB_FN(13, hal_socket, socket_join_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(14, hal_socket, socket_leave_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(15, hal_socket, socket_peer, sock_result_t(sock_handle_t, sock_peer_t*, void*))
DYNALIB_FN(16, hal_socket, socket_shutdown, sock_result_t(sock_handle_t, int))
DYNALIB_FN(17, hal_socket, socket_send_ex, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, system_tick_t, void*))
 80a1a60:	b508      	push	{r3, lr}
 80a1a62:	4b02      	ldr	r3, [pc, #8]	; (80a1a6c <socket_send_ex+0xc>)
 80a1a64:	681b      	ldr	r3, [r3, #0]
 80a1a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1a68:	9301      	str	r3, [sp, #4]
 80a1a6a:	bd08      	pop	{r3, pc}
 80a1a6c:	080601bc 	.word	0x080601bc

080a1a70 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a1a70:	b508      	push	{r3, lr}
 80a1a72:	4b02      	ldr	r3, [pc, #8]	; (80a1a7c <HAL_SPI_Init+0xc>)
 80a1a74:	681b      	ldr	r3, [r3, #0]
 80a1a76:	69db      	ldr	r3, [r3, #28]
 80a1a78:	9301      	str	r3, [sp, #4]
 80a1a7a:	bd08      	pop	{r3, pc}
 80a1a7c:	080601b4 	.word	0x080601b4

080a1a80 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a1a80:	b508      	push	{r3, lr}
 80a1a82:	4b02      	ldr	r3, [pc, #8]	; (80a1a8c <HAL_USART_Init+0xc>)
 80a1a84:	681b      	ldr	r3, [r3, #0]
 80a1a86:	699b      	ldr	r3, [r3, #24]
 80a1a88:	9301      	str	r3, [sp, #4]
 80a1a8a:	bd08      	pop	{r3, pc}
 80a1a8c:	080601c4 	.word	0x080601c4

080a1a90 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a1a90:	b508      	push	{r3, lr}
 80a1a92:	4b02      	ldr	r3, [pc, #8]	; (80a1a9c <HAL_USART_Write_Data+0xc>)
 80a1a94:	681b      	ldr	r3, [r3, #0]
 80a1a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1a98:	9301      	str	r3, [sp, #4]
 80a1a9a:	bd08      	pop	{r3, pc}
 80a1a9c:	080601c4 	.word	0x080601c4

080a1aa0 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a1aa0:	b508      	push	{r3, lr}
 80a1aa2:	4b02      	ldr	r3, [pc, #8]	; (80a1aac <HAL_USART_Available_Data+0xc>)
 80a1aa4:	681b      	ldr	r3, [r3, #0]
 80a1aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a1aa8:	9301      	str	r3, [sp, #4]
 80a1aaa:	bd08      	pop	{r3, pc}
 80a1aac:	080601c4 	.word	0x080601c4

080a1ab0 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a1ab0:	b508      	push	{r3, lr}
 80a1ab2:	4b02      	ldr	r3, [pc, #8]	; (80a1abc <HAL_USART_Read_Data+0xc>)
 80a1ab4:	681b      	ldr	r3, [r3, #0]
 80a1ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1ab8:	9301      	str	r3, [sp, #4]
 80a1aba:	bd08      	pop	{r3, pc}
 80a1abc:	080601c4 	.word	0x080601c4

080a1ac0 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a1ac0:	b508      	push	{r3, lr}
 80a1ac2:	4b02      	ldr	r3, [pc, #8]	; (80a1acc <HAL_USART_Peek_Data+0xc>)
 80a1ac4:	681b      	ldr	r3, [r3, #0]
 80a1ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1ac8:	9301      	str	r3, [sp, #4]
 80a1aca:	bd08      	pop	{r3, pc}
 80a1acc:	080601c4 	.word	0x080601c4

080a1ad0 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a1ad0:	b508      	push	{r3, lr}
 80a1ad2:	4b02      	ldr	r3, [pc, #8]	; (80a1adc <HAL_USART_Flush_Data+0xc>)
 80a1ad4:	681b      	ldr	r3, [r3, #0]
 80a1ad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1ad8:	9301      	str	r3, [sp, #4]
 80a1ada:	bd08      	pop	{r3, pc}
 80a1adc:	080601c4 	.word	0x080601c4

080a1ae0 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a1ae0:	b508      	push	{r3, lr}
 80a1ae2:	4b02      	ldr	r3, [pc, #8]	; (80a1aec <HAL_USART_Available_Data_For_Write+0xc>)
 80a1ae4:	681b      	ldr	r3, [r3, #0]
 80a1ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1ae8:	9301      	str	r3, [sp, #4]
 80a1aea:	bd08      	pop	{r3, pc}
 80a1aec:	080601c4 	.word	0x080601c4

080a1af0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a1af0:	b508      	push	{r3, lr}
 80a1af2:	4b02      	ldr	r3, [pc, #8]	; (80a1afc <HAL_USB_USART_Init+0xc>)
 80a1af4:	681b      	ldr	r3, [r3, #0]
 80a1af6:	681b      	ldr	r3, [r3, #0]
 80a1af8:	9301      	str	r3, [sp, #4]
 80a1afa:	bd08      	pop	{r3, pc}
 80a1afc:	080601d8 	.word	0x080601d8

080a1b00 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a1b00:	b508      	push	{r3, lr}
 80a1b02:	4b02      	ldr	r3, [pc, #8]	; (80a1b0c <HAL_USB_USART_Available_Data+0xc>)
 80a1b04:	681b      	ldr	r3, [r3, #0]
 80a1b06:	691b      	ldr	r3, [r3, #16]
 80a1b08:	9301      	str	r3, [sp, #4]
 80a1b0a:	bd08      	pop	{r3, pc}
 80a1b0c:	080601d8 	.word	0x080601d8

080a1b10 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a1b10:	b508      	push	{r3, lr}
 80a1b12:	4b02      	ldr	r3, [pc, #8]	; (80a1b1c <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a1b14:	681b      	ldr	r3, [r3, #0]
 80a1b16:	695b      	ldr	r3, [r3, #20]
 80a1b18:	9301      	str	r3, [sp, #4]
 80a1b1a:	bd08      	pop	{r3, pc}
 80a1b1c:	080601d8 	.word	0x080601d8

080a1b20 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1b20:	b508      	push	{r3, lr}
 80a1b22:	4b02      	ldr	r3, [pc, #8]	; (80a1b2c <HAL_USB_USART_Receive_Data+0xc>)
 80a1b24:	681b      	ldr	r3, [r3, #0]
 80a1b26:	699b      	ldr	r3, [r3, #24]
 80a1b28:	9301      	str	r3, [sp, #4]
 80a1b2a:	bd08      	pop	{r3, pc}
 80a1b2c:	080601d8 	.word	0x080601d8

080a1b30 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1b30:	b508      	push	{r3, lr}
 80a1b32:	4b02      	ldr	r3, [pc, #8]	; (80a1b3c <HAL_USB_USART_Send_Data+0xc>)
 80a1b34:	681b      	ldr	r3, [r3, #0]
 80a1b36:	69db      	ldr	r3, [r3, #28]
 80a1b38:	9301      	str	r3, [sp, #4]
 80a1b3a:	bd08      	pop	{r3, pc}
 80a1b3c:	080601d8 	.word	0x080601d8

080a1b40 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a1b40:	b508      	push	{r3, lr}
 80a1b42:	4b02      	ldr	r3, [pc, #8]	; (80a1b4c <HAL_USB_USART_Flush_Data+0xc>)
 80a1b44:	681b      	ldr	r3, [r3, #0]
 80a1b46:	6a1b      	ldr	r3, [r3, #32]
 80a1b48:	9301      	str	r3, [sp, #4]
 80a1b4a:	bd08      	pop	{r3, pc}
 80a1b4c:	080601d8 	.word	0x080601d8

080a1b50 <HAL_NET_SetNetWatchDog>:

DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, void(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
 80a1b50:	b508      	push	{r3, lr}
 80a1b52:	4b02      	ldr	r3, [pc, #8]	; (80a1b5c <HAL_NET_SetNetWatchDog+0xc>)
 80a1b54:	681b      	ldr	r3, [r3, #0]
 80a1b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1b58:	9301      	str	r3, [sp, #4]
 80a1b5a:	bd08      	pop	{r3, pc}
 80a1b5c:	080601c0 	.word	0x080601c0

080a1b60 <inet_gethostbyname>:
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a1b60:	b508      	push	{r3, lr}
 80a1b62:	4b02      	ldr	r3, [pc, #8]	; (80a1b6c <inet_gethostbyname+0xc>)
 80a1b64:	681b      	ldr	r3, [r3, #0]
 80a1b66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1b68:	9301      	str	r3, [sp, #4]
 80a1b6a:	bd08      	pop	{r3, pc}
 80a1b6c:	080601c0 	.word	0x080601c0

080a1b70 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 80a1b70:	b508      	push	{r3, lr}
 80a1b72:	4b02      	ldr	r3, [pc, #8]	; (80a1b7c <log_message+0xc>)
 80a1b74:	681b      	ldr	r3, [r3, #0]
 80a1b76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80a1b78:	9301      	str	r3, [sp, #4]
 80a1b7a:	bd08      	pop	{r3, pc}
 80a1b7c:	080201a8 	.word	0x080201a8

080a1b80 <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80a1b80:	b508      	push	{r3, lr}
 80a1b82:	4b02      	ldr	r3, [pc, #8]	; (80a1b8c <system_mode+0xc>)
 80a1b84:	681b      	ldr	r3, [r3, #0]
 80a1b86:	681b      	ldr	r3, [r3, #0]
 80a1b88:	9301      	str	r3, [sp, #4]
 80a1b8a:	bd08      	pop	{r3, pc}
 80a1b8c:	080601a4 	.word	0x080601a4

080a1b90 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a1b90:	b508      	push	{r3, lr}
 80a1b92:	4b02      	ldr	r3, [pc, #8]	; (80a1b9c <set_system_mode+0xc>)
 80a1b94:	681b      	ldr	r3, [r3, #0]
 80a1b96:	685b      	ldr	r3, [r3, #4]
 80a1b98:	9301      	str	r3, [sp, #4]
 80a1b9a:	bd08      	pop	{r3, pc}
 80a1b9c:	080601a4 	.word	0x080601a4

080a1ba0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a1ba0:	b508      	push	{r3, lr}
 80a1ba2:	4b02      	ldr	r3, [pc, #8]	; (80a1bac <system_delay_ms+0xc>)
 80a1ba4:	681b      	ldr	r3, [r3, #0]
 80a1ba6:	695b      	ldr	r3, [r3, #20]
 80a1ba8:	9301      	str	r3, [sp, #4]
 80a1baa:	bd08      	pop	{r3, pc}
 80a1bac:	080601a4 	.word	0x080601a4

080a1bb0 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a1bb0:	b508      	push	{r3, lr}
 80a1bb2:	4b02      	ldr	r3, [pc, #8]	; (80a1bbc <application_thread_current+0xc>)
 80a1bb4:	681b      	ldr	r3, [r3, #0]
 80a1bb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a1bb8:	9301      	str	r3, [sp, #4]
 80a1bba:	bd08      	pop	{r3, pc}
 80a1bbc:	080601a4 	.word	0x080601a4

080a1bc0 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a1bc0:	b508      	push	{r3, lr}
 80a1bc2:	4b02      	ldr	r3, [pc, #8]	; (80a1bcc <application_thread_invoke+0xc>)
 80a1bc4:	681b      	ldr	r3, [r3, #0]
 80a1bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a1bc8:	9301      	str	r3, [sp, #4]
 80a1bca:	bd08      	pop	{r3, pc}
 80a1bcc:	080601a4 	.word	0x080601a4

080a1bd0 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 80a1bd0:	b508      	push	{r3, lr}
 80a1bd2:	4b02      	ldr	r3, [pc, #8]	; (80a1bdc <system_thread_get_state+0xc>)
 80a1bd4:	681b      	ldr	r3, [r3, #0]
 80a1bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a1bd8:	9301      	str	r3, [sp, #4]
 80a1bda:	bd08      	pop	{r3, pc}
 80a1bdc:	080601a4 	.word	0x080601a4

080a1be0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a1be0:	b508      	push	{r3, lr}
 80a1be2:	4b03      	ldr	r3, [pc, #12]	; (80a1bf0 <system_ctrl_set_app_request_handler+0x10>)
 80a1be4:	681b      	ldr	r3, [r3, #0]
 80a1be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a1bea:	9301      	str	r3, [sp, #4]
 80a1bec:	bd08      	pop	{r3, pc}
 80a1bee:	0000      	.short	0x0000
 80a1bf0:	080601a4 	.word	0x080601a4

080a1bf4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a1bf4:	b508      	push	{r3, lr}
 80a1bf6:	4b03      	ldr	r3, [pc, #12]	; (80a1c04 <system_ctrl_set_result+0x10>)
 80a1bf8:	681b      	ldr	r3, [r3, #0]
 80a1bfa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a1bfe:	9301      	str	r3, [sp, #4]
 80a1c00:	bd08      	pop	{r3, pc}
 80a1c02:	0000      	.short	0x0000
 80a1c04:	080601a4 	.word	0x080601a4

080a1c08 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a1c08:	b508      	push	{r3, lr}
 80a1c0a:	4b02      	ldr	r3, [pc, #8]	; (80a1c14 <spark_process+0xc>)
 80a1c0c:	681b      	ldr	r3, [r3, #0]
 80a1c0e:	689b      	ldr	r3, [r3, #8]
 80a1c10:	9301      	str	r3, [sp, #4]
 80a1c12:	bd08      	pop	{r3, pc}
 80a1c14:	080601cc 	.word	0x080601cc

080a1c18 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a1c18:	b508      	push	{r3, lr}
 80a1c1a:	4b02      	ldr	r3, [pc, #8]	; (80a1c24 <spark_cloud_flag_connected+0xc>)
 80a1c1c:	681b      	ldr	r3, [r3, #0]
 80a1c1e:	695b      	ldr	r3, [r3, #20]
 80a1c20:	9301      	str	r3, [sp, #4]
 80a1c22:	bd08      	pop	{r3, pc}
 80a1c24:	080601cc 	.word	0x080601cc

080a1c28 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a1c28:	b508      	push	{r3, lr}
 80a1c2a:	4b02      	ldr	r3, [pc, #8]	; (80a1c34 <spark_send_event+0xc>)
 80a1c2c:	681b      	ldr	r3, [r3, #0]
 80a1c2e:	6a1b      	ldr	r3, [r3, #32]
 80a1c30:	9301      	str	r3, [sp, #4]
 80a1c32:	bd08      	pop	{r3, pc}
 80a1c34:	080601cc 	.word	0x080601cc

080a1c38 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
 80a1c38:	b508      	push	{r3, lr}
 80a1c3a:	4b02      	ldr	r3, [pc, #8]	; (80a1c44 <spark_subscribe+0xc>)
 80a1c3c:	681b      	ldr	r3, [r3, #0]
 80a1c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1c40:	9301      	str	r3, [sp, #4]
 80a1c42:	bd08      	pop	{r3, pc}
 80a1c44:	080601cc 	.word	0x080601cc

080a1c48 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 80a1c48:	b508      	push	{r3, lr}
 80a1c4a:	4b02      	ldr	r3, [pc, #8]	; (80a1c54 <spark_sync_time_pending+0xc>)
 80a1c4c:	681b      	ldr	r3, [r3, #0]
 80a1c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1c50:	9301      	str	r3, [sp, #4]
 80a1c52:	bd08      	pop	{r3, pc}
 80a1c54:	080601cc 	.word	0x080601cc

080a1c58 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a1c58:	b508      	push	{r3, lr}
 80a1c5a:	4b02      	ldr	r3, [pc, #8]	; (80a1c64 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a1c5c:	681b      	ldr	r3, [r3, #0]
 80a1c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a1c60:	9301      	str	r3, [sp, #4]
 80a1c62:	bd08      	pop	{r3, pc}
 80a1c64:	080601cc 	.word	0x080601cc

080a1c68 <network_ready>:

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a1c68:	b508      	push	{r3, lr}
 80a1c6a:	4b02      	ldr	r3, [pc, #8]	; (80a1c74 <network_ready+0xc>)
 80a1c6c:	681b      	ldr	r3, [r3, #0]
 80a1c6e:	691b      	ldr	r3, [r3, #16]
 80a1c70:	9301      	str	r3, [sp, #4]
 80a1c72:	bd08      	pop	{r3, pc}
 80a1c74:	080601c8 	.word	0x080601c8

080a1c78 <malloc>:

#include "dynalib.h"

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a1c78:	b508      	push	{r3, lr}
 80a1c7a:	4b02      	ldr	r3, [pc, #8]	; (80a1c84 <malloc+0xc>)
 80a1c7c:	681b      	ldr	r3, [r3, #0]
 80a1c7e:	681b      	ldr	r3, [r3, #0]
 80a1c80:	9301      	str	r3, [sp, #4]
 80a1c82:	bd08      	pop	{r3, pc}
 80a1c84:	080601a0 	.word	0x080601a0

080a1c88 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a1c88:	b508      	push	{r3, lr}
 80a1c8a:	4b02      	ldr	r3, [pc, #8]	; (80a1c94 <free+0xc>)
 80a1c8c:	681b      	ldr	r3, [r3, #0]
 80a1c8e:	685b      	ldr	r3, [r3, #4]
 80a1c90:	9301      	str	r3, [sp, #4]
 80a1c92:	bd08      	pop	{r3, pc}
 80a1c94:	080601a0 	.word	0x080601a0

080a1c98 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a1c98:	b508      	push	{r3, lr}
 80a1c9a:	4b02      	ldr	r3, [pc, #8]	; (80a1ca4 <realloc+0xc>)
 80a1c9c:	681b      	ldr	r3, [r3, #0]
 80a1c9e:	689b      	ldr	r3, [r3, #8]
 80a1ca0:	9301      	str	r3, [sp, #4]
 80a1ca2:	bd08      	pop	{r3, pc}
 80a1ca4:	080601a0 	.word	0x080601a0

080a1ca8 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 80a1ca8:	b508      	push	{r3, lr}
 80a1caa:	4b02      	ldr	r3, [pc, #8]	; (80a1cb4 <siprintf+0xc>)
 80a1cac:	681b      	ldr	r3, [r3, #0]
 80a1cae:	691b      	ldr	r3, [r3, #16]
 80a1cb0:	9301      	str	r3, [sp, #4]
 80a1cb2:	bd08      	pop	{r3, pc}
 80a1cb4:	080601a0 	.word	0x080601a0

080a1cb8 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 80a1cb8:	b508      	push	{r3, lr}
 80a1cba:	4b02      	ldr	r3, [pc, #8]	; (80a1cc4 <siscanf+0xc>)
 80a1cbc:	681b      	ldr	r3, [r3, #0]
 80a1cbe:	699b      	ldr	r3, [r3, #24]
 80a1cc0:	9301      	str	r3, [sp, #4]
 80a1cc2:	bd08      	pop	{r3, pc}
 80a1cc4:	080601a0 	.word	0x080601a0

080a1cc8 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 80a1cc8:	b508      	push	{r3, lr}
 80a1cca:	4b02      	ldr	r3, [pc, #8]	; (80a1cd4 <snprintf+0xc>)
 80a1ccc:	681b      	ldr	r3, [r3, #0]
 80a1cce:	69db      	ldr	r3, [r3, #28]
 80a1cd0:	9301      	str	r3, [sp, #4]
 80a1cd2:	bd08      	pop	{r3, pc}
 80a1cd4:	080601a0 	.word	0x080601a0

080a1cd8 <sniprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
 80a1cd8:	b508      	push	{r3, lr}
 80a1cda:	4b02      	ldr	r3, [pc, #8]	; (80a1ce4 <sniprintf+0xc>)
 80a1cdc:	681b      	ldr	r3, [r3, #0]
 80a1cde:	6a1b      	ldr	r3, [r3, #32]
 80a1ce0:	9301      	str	r3, [sp, #4]
 80a1ce2:	bd08      	pop	{r3, pc}
 80a1ce4:	080601a0 	.word	0x080601a0

080a1ce8 <vsnprintf>:
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a1ce8:	b508      	push	{r3, lr}
 80a1cea:	4b02      	ldr	r3, [pc, #8]	; (80a1cf4 <vsnprintf+0xc>)
 80a1cec:	681b      	ldr	r3, [r3, #0]
 80a1cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1cf0:	9301      	str	r3, [sp, #4]
 80a1cf2:	bd08      	pop	{r3, pc}
 80a1cf4:	080601a0 	.word	0x080601a0

080a1cf8 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a1cf8:	b508      	push	{r3, lr}
 80a1cfa:	4b02      	ldr	r3, [pc, #8]	; (80a1d04 <abort+0xc>)
 80a1cfc:	681b      	ldr	r3, [r3, #0]
 80a1cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1d00:	9301      	str	r3, [sp, #4]
 80a1d02:	bd08      	pop	{r3, pc}
 80a1d04:	080601a0 	.word	0x080601a0

080a1d08 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a1d08:	b508      	push	{r3, lr}
 80a1d0a:	4b02      	ldr	r3, [pc, #8]	; (80a1d14 <_malloc_r+0xc>)
 80a1d0c:	681b      	ldr	r3, [r3, #0]
 80a1d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1d10:	9301      	str	r3, [sp, #4]
 80a1d12:	bd08      	pop	{r3, pc}
 80a1d14:	080601a0 	.word	0x080601a0

080a1d18 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a1d18:	2100      	movs	r1, #0
 80a1d1a:	f7ff bf41 	b.w	80a1ba0 <system_delay_ms>

080a1d1e <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a1d1e:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1d20:	6883      	ldr	r3, [r0, #8]
 80a1d22:	4604      	mov	r4, r0
 80a1d24:	b90b      	cbnz	r3, 80a1d2a <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a1d26:	f001 fb96 	bl	80a3456 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1d2a:	68c3      	ldr	r3, [r0, #12]
 80a1d2c:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 80a1d2e:	68a3      	ldr	r3, [r4, #8]
 80a1d30:	b11b      	cbz	r3, 80a1d3a <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a1d32:	2203      	movs	r2, #3
 80a1d34:	4621      	mov	r1, r4
 80a1d36:	4620      	mov	r0, r4
 80a1d38:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a1d3a:	4620      	mov	r0, r4
}
 80a1d3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a1d40:	f7fe b9af 	b.w	80a00a2 <_ZdlPv>

080a1d44 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a1d44:	4770      	bx	lr

080a1d46 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 80a1d46:	2000      	movs	r0, #0
 80a1d48:	4770      	bx	lr

080a1d4a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a1d4a:	b510      	push	{r4, lr}
 80a1d4c:	4604      	mov	r4, r0
 80a1d4e:	f7fe f9a8 	bl	80a00a2 <_ZdlPv>
 80a1d52:	4620      	mov	r0, r4
 80a1d54:	bd10      	pop	{r4, pc}

080a1d56 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 80a1d56:	b508      	push	{r3, lr}
      { delete this; }
 80a1d58:	b108      	cbz	r0, 80a1d5e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 80a1d5a:	f7ff fff6 	bl	80a1d4a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a1d5e:	bd08      	pop	{r3, pc}

080a1d60 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 80a1d60:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a1d62:	68c4      	ldr	r4, [r0, #12]
 80a1d64:	b1d4      	cbz	r4, 80a1d9c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x3c>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 80a1d66:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a1d68:	2b02      	cmp	r3, #2
 80a1d6a:	d102      	bne.n	80a1d72 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x12>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a1d6c:	68e0      	ldr	r0, [r4, #12]
 80a1d6e:	f7ff ff8b 	bl	80a1c88 <free>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 80a1d72:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 80a1d74:	b12d      	cbz	r5, 80a1d82 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x22>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1d76:	4628      	mov	r0, r5
 80a1d78:	f7ff f86b 	bl	80a0e52 <_ZNSt14_Function_baseD1Ev>
 80a1d7c:	4628      	mov	r0, r5
 80a1d7e:	f7fe f990 	bl	80a00a2 <_ZdlPv>
 80a1d82:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a1d84:	b12d      	cbz	r5, 80a1d92 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x32>
 80a1d86:	4628      	mov	r0, r5
 80a1d88:	f7ff f863 	bl	80a0e52 <_ZNSt14_Function_baseD1Ev>
 80a1d8c:	4628      	mov	r0, r5
 80a1d8e:	f7fe f988 	bl	80a00a2 <_ZdlPv>
 80a1d92:	4620      	mov	r0, r4
 80a1d94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a1d98:	f7fe b983 	b.w	80a00a2 <_ZdlPv>
 80a1d9c:	bd38      	pop	{r3, r4, r5, pc}

080a1d9e <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 80a1d9e:	b513      	push	{r0, r1, r4, lr}
 80a1da0:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a1da2:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 80a1da6:	2300      	movs	r3, #0
 80a1da8:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a1daa:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a1dac:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a1dae:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a1db0:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a1db2:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a1db4:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a1db6:	f7ff f8d4 	bl	80a0f62 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1dba:	4620      	mov	r0, r4
 80a1dbc:	b002      	add	sp, #8
 80a1dbe:	bd10      	pop	{r4, pc}

080a1dc0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80a1dc0:	680b      	ldr	r3, [r1, #0]
 80a1dc2:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80a1dc4:	b113      	cbz	r3, 80a1dcc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80a1dc6:	685a      	ldr	r2, [r3, #4]
 80a1dc8:	3201      	adds	r2, #1
 80a1dca:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 80a1dcc:	4770      	bx	lr

080a1dce <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a1dce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1dd0:	460c      	mov	r4, r1
 80a1dd2:	4606      	mov	r6, r0
 80a1dd4:	460f      	mov	r7, r1
 80a1dd6:	f854 3b04 	ldr.w	r3, [r4], #4
 80a1dda:	ad02      	add	r5, sp, #8
 80a1ddc:	f845 3d08 	str.w	r3, [r5, #-8]!
 80a1de0:	4621      	mov	r1, r4
 80a1de2:	a801      	add	r0, sp, #4
 80a1de4:	f7ff ffec 	bl	80a1dc0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 80a1de8:	4629      	mov	r1, r5
 80a1dea:	4630      	mov	r0, r6
 80a1dec:	f7ff ffd7 	bl	80a1d9e <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a1df0:	a801      	add	r0, sp, #4
 80a1df2:	f7ff f8b6 	bl	80a0f62 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1df6:	4620      	mov	r0, r4
 80a1df8:	f7ff f8b3 	bl	80a0f62 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 80a1dfc:	4638      	mov	r0, r7
 80a1dfe:	f7fe f950 	bl	80a00a2 <_ZdlPv>
        return p;
    }
 80a1e02:	4630      	mov	r0, r6
 80a1e04:	b003      	add	sp, #12
 80a1e06:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1e08 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 80a1e08:	b513      	push	{r0, r1, r4, lr}
 80a1e0a:	460b      	mov	r3, r1
 80a1e0c:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1e0e:	c803      	ldmia	r0, {r0, r1}
 80a1e10:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a1e14:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a1e18:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a1e1c:	e89d 0003 	ldmia.w	sp, {r0, r1}
 80a1e20:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a1e24:	b002      	add	sp, #8
 80a1e26:	bd10      	pop	{r4, pc}

080a1e28 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1e28:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a1e2a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1e2c:	b90a      	cbnz	r2, 80a1e32 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a1e2e:	f001 fb12 	bl	80a3456 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1e32:	68c3      	ldr	r3, [r0, #12]
    }
 80a1e34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1e38:	4718      	bx	r3

080a1e3a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a1e3a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a1e3c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a1e3e:	f100 0110 	add.w	r1, r0, #16
 80a1e42:	f7ff fff1 	bl	80a1e28 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a1e46:	bd08      	pop	{r3, pc}

080a1e48 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1e48:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a1e4a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1e4c:	b90a      	cbnz	r2, 80a1e52 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a1e4e:	f001 fb02 	bl	80a3456 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1e52:	68c3      	ldr	r3, [r0, #12]
    }
 80a1e54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1e58:	4718      	bx	r3

080a1e5a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a1e5a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a1e5c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a1e5e:	f100 0110 	add.w	r1, r0, #16
 80a1e62:	f7ff fff1 	bl	80a1e48 <_ZNKSt8functionIFvRKbEEclES1_>
 80a1e66:	bd08      	pop	{r3, pc}

080a1e68 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a1e68:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1e6a:	2300      	movs	r3, #0
 80a1e6c:	6083      	str	r3, [r0, #8]
 80a1e6e:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a1e70:	4604      	mov	r4, r0
 80a1e72:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a1e74:	b12b      	cbz	r3, 80a1e82 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a1e76:	2202      	movs	r2, #2
 80a1e78:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a1e7a:	68eb      	ldr	r3, [r5, #12]
 80a1e7c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a1e7e:	68ab      	ldr	r3, [r5, #8]
 80a1e80:	60a3      	str	r3, [r4, #8]
	}
    }
 80a1e82:	4620      	mov	r0, r4
 80a1e84:	bd38      	pop	{r3, r4, r5, pc}
	...

080a1e88 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 80a1e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
 80a1e8c:	f64f 739c 	movw	r3, #65436	; 0xff9c
 80a1e90:	6804      	ldr	r4, [r0, #0]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a1e92:	f04f 0002 	mov.w	r0, #2
 80a1e96:	b086      	sub	sp, #24
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a1e98:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1e9c:	808b      	strh	r3, [r1, #4]
 80a1e9e:	2300      	movs	r3, #0
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a1ea0:	680f      	ldr	r7, [r1, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a1ea2:	f88d 3000 	strb.w	r3, [sp]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1ea6:	600b      	str	r3, [r1, #0]
 80a1ea8:	e8d4 1f4f 	ldrexb	r1, [r4]
 80a1eac:	4299      	cmp	r1, r3
 80a1eae:	d103      	bne.n	80a1eb8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x30>
 80a1eb0:	e8c4 0f45 	strexb	r5, r0, [r4]
 80a1eb4:	2d00      	cmp	r5, #0
 80a1eb6:	d1f7      	bne.n	80a1ea8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 80a1eb8:	d002      	beq.n	80a1ec0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x38>
 80a1eba:	f88d 1000 	strb.w	r1, [sp]
 80a1ebe:	e06b      	b.n	80a1f98 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 80a1ec0:	f114 050c 	adds.w	r5, r4, #12
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a1ec4:	bf1c      	itt	ne
 80a1ec6:	60e7      	strne	r7, [r4, #12]
 80a1ec8:	8222      	strhne	r2, [r4, #16]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a1eca:	f3bf 8f5f 	dmb	sy
      __b = _GLIBCXX_MOVE(__tmp);
 80a1ece:	bf18      	it	ne
 80a1ed0:	461f      	movne	r7, r3
 80a1ed2:	2301      	movs	r3, #1
 80a1ed4:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a1ed6:	f3bf 8f5f 	dmb	sy
 80a1eda:	f104 0308 	add.w	r3, r4, #8
 80a1ede:	2000      	movs	r0, #0
 80a1ee0:	e853 6f00 	ldrex	r6, [r3]
 80a1ee4:	e843 0200 	strex	r2, r0, [r3]
 80a1ee8:	2a00      	cmp	r2, #0
 80a1eea:	d1f9      	bne.n	80a1ee0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x58>
 80a1eec:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a1ef0:	2e00      	cmp	r6, #0
 80a1ef2:	d051      	beq.n	80a1f98 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a1ef4:	f7ff fe5c 	bl	80a1bb0 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a1ef8:	b120      	cbz	r0, 80a1f04 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x7c>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a1efa:	4629      	mov	r1, r5
 80a1efc:	4630      	mov	r0, r6
 80a1efe:	f7ff ff93 	bl	80a1e28 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a1f02:	e043      	b.n	80a1f8c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a1f04:	4631      	mov	r1, r6
 80a1f06:	4668      	mov	r0, sp
 80a1f08:	f7ff ffae 	bl	80a1e68 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a1f0c:	68e0      	ldr	r0, [r4, #12]
 80a1f0e:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a1f12:	b108      	cbz	r0, 80a1f18 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x90>
 80a1f14:	f002 ff1e 	bl	80a4d54 <strdup>
 80a1f18:	9004      	str	r0, [sp, #16]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a1f1a:	2010      	movs	r0, #16
 80a1f1c:	f8ad 5014 	strh.w	r5, [sp, #20]
 80a1f20:	f7fe f8bb 	bl	80a009a <_Znwj>
 80a1f24:	4605      	mov	r5, r0
 80a1f26:	b330      	cbz	r0, 80a1f76 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xee>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1f28:	f04f 0800 	mov.w	r8, #0
 80a1f2c:	f8c0 8008 	str.w	r8, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1f30:	2018      	movs	r0, #24
 80a1f32:	f7fe f8b2 	bl	80a009a <_Znwj>
 80a1f36:	4604      	mov	r4, r0
 80a1f38:	b1c0      	cbz	r0, 80a1f6c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe4>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1f3a:	f8c0 8008 	str.w	r8, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a1f3e:	4601      	mov	r1, r0
 80a1f40:	4668      	mov	r0, sp
 80a1f42:	f7ff ff61 	bl	80a1e08 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1f46:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
 80a1f48:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1f4a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1f4c:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a1f4e:	9202      	str	r2, [sp, #8]
 80a1f50:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1f52:	60e3      	str	r3, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a1f54:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80a1f58:	9203      	str	r2, [sp, #12]
 80a1f5a:	82a3      	strh	r3, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1f5c:	f64f 739c 	movw	r3, #65436	; 0xff9c
 80a1f60:	f8ad 3014 	strh.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a1f64:	9b04      	ldr	r3, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1f66:	f8cd 8010 	str.w	r8, [sp, #16]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a1f6a:	6123      	str	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a1f6c:	4b0d      	ldr	r3, [pc, #52]	; (80a1fa4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x11c>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1f6e:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a1f70:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a1f72:	4b0d      	ldr	r3, [pc, #52]	; (80a1fa8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x120>)
 80a1f74:	60ab      	str	r3, [r5, #8]
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a1f76:	9804      	ldr	r0, [sp, #16]
 80a1f78:	f7ff fe86 	bl	80a1c88 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1f7c:	4668      	mov	r0, sp
 80a1f7e:	f7fe ff68 	bl	80a0e52 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a1f82:	2200      	movs	r2, #0
 80a1f84:	4629      	mov	r1, r5
 80a1f86:	4809      	ldr	r0, [pc, #36]	; (80a1fac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x124>)
 80a1f88:	f7ff fe1a 	bl	80a1bc0 <application_thread_invoke>
 80a1f8c:	4630      	mov	r0, r6
 80a1f8e:	f7fe ff60 	bl	80a0e52 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a1f92:	4630      	mov	r0, r6
 80a1f94:	f7fe f885 	bl	80a00a2 <_ZdlPv>
 80a1f98:	4638      	mov	r0, r7
 80a1f9a:	f7ff fe75 	bl	80a1c88 <free>
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
    }
 80a1f9e:	b006      	add	sp, #24
 80a1fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a1fa4:	080a1e3b 	.word	0x080a1e3b
 80a1fa8:	080a2099 	.word	0x080a2099
 80a1fac:	080a1d1f 	.word	0x080a1d1f

080a1fb0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a1fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1fb4:	b08b      	sub	sp, #44	; 0x2c
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a1fb6:	ad07      	add	r5, sp, #28
 80a1fb8:	f04f 0b00 	mov.w	fp, #0
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a1fbc:	4606      	mov	r6, r0
 80a1fbe:	4699      	mov	r9, r3
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a1fc0:	2014      	movs	r0, #20
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a1fc2:	230c      	movs	r3, #12
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a1fc4:	460f      	mov	r7, r1
 80a1fc6:	4690      	mov	r8, r2
 80a1fc8:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a1fcc:	f8c5 b004 	str.w	fp, [r5, #4]
 80a1fd0:	f8c5 b008 	str.w	fp, [r5, #8]
 80a1fd4:	9307      	str	r3, [sp, #28]
 80a1fd6:	f7fe f860 	bl	80a009a <_Znwj>
 80a1fda:	4604      	mov	r4, r0
 80a1fdc:	b138      	cbz	r0, 80a1fee <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x3e>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a1fde:	f880 b000 	strb.w	fp, [r0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a1fe2:	f880 b001 	strb.w	fp, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a1fe6:	f8c0 b004 	str.w	fp, [r0, #4]
 80a1fea:	f8c0 b008 	str.w	fp, [r0, #8]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a1fee:	2300      	movs	r3, #0
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a1ff0:	2010      	movs	r0, #16
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 80a1ff2:	9403      	str	r4, [sp, #12]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a1ff4:	9304      	str	r3, [sp, #16]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a1ff6:	f7fe f850 	bl	80a009a <_Znwj>
 80a1ffa:	b128      	cbz	r0, 80a2008 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x58>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a1ffc:	2301      	movs	r3, #1
 80a1ffe:	6043      	str	r3, [r0, #4]
 80a2000:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 80a2002:	4b23      	ldr	r3, [pc, #140]	; (80a2090 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe0>)
 80a2004:	60c4      	str	r4, [r0, #12]
 80a2006:	6003      	str	r3, [r0, #0]

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 80a2008:	4b22      	ldr	r3, [pc, #136]	; (80a2094 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe4>)
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a200a:	9004      	str	r0, [sp, #16]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a200c:	2008      	movs	r0, #8
 80a200e:	9308      	str	r3, [sp, #32]
 80a2010:	f7fe f843 	bl	80a009a <_Znwj>
 80a2014:	4604      	mov	r4, r0
 80a2016:	b128      	cbz	r0, 80a2024 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x74>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a2018:	9b03      	ldr	r3, [sp, #12]
 80a201a:	a904      	add	r1, sp, #16
 80a201c:	f840 3b04 	str.w	r3, [r0], #4
 80a2020:	f7ff fece 	bl	80a1dc0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a2024:	9500      	str	r5, [sp, #0]
 80a2026:	fa5f f38a 	uxtb.w	r3, sl
 80a202a:	464a      	mov	r2, r9
 80a202c:	4641      	mov	r1, r8
 80a202e:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 80a2030:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a2032:	f7ff fdf9 	bl	80a1c28 <spark_send_event>
 80a2036:	b9b8      	cbnz	r0, 80a2068 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 80a2038:	9b03      	ldr	r3, [sp, #12]
 80a203a:	785b      	ldrb	r3, [r3, #1]
 80a203c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a2040:	b993      	cbnz	r3, 80a2068 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a2042:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 80a2046:	a905      	add	r1, sp, #20
 80a2048:	a803      	add	r0, sp, #12
 80a204a:	9205      	str	r2, [sp, #20]
 80a204c:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a2050:	f7ff ff1a 	bl	80a1e88 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a2054:	9805      	ldr	r0, [sp, #20]
 80a2056:	f7ff fe17 	bl	80a1c88 <free>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a205a:	a805      	add	r0, sp, #20
 80a205c:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a205e:	f7ff feb6 	bl	80a1dce <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a2062:	a806      	add	r0, sp, #24
 80a2064:	f7fe ff7d 	bl	80a0f62 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a2068:	9b03      	ldr	r3, [sp, #12]
 80a206a:	a904      	add	r1, sp, #16
 80a206c:	a806      	add	r0, sp, #24
 80a206e:	9305      	str	r3, [sp, #20]
 80a2070:	f7ff fea6 	bl	80a1dc0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 80a2074:	a905      	add	r1, sp, #20
 80a2076:	4630      	mov	r0, r6
 80a2078:	f7ff fe91 	bl	80a1d9e <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a207c:	a806      	add	r0, sp, #24
 80a207e:	f7fe ff70 	bl	80a0f62 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a2082:	a804      	add	r0, sp, #16
 80a2084:	f7fe ff6d 	bl	80a0f62 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
 80a2088:	4630      	mov	r0, r6
 80a208a:	b00b      	add	sp, #44	; 0x2c
 80a208c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2090:	080a7d80 	.word	0x080a7d80
 80a2094:	080a2201 	.word	0x080a2201

080a2098 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a2098:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a209a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a209c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a209e:	d006      	beq.n	80a20ae <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 80a20a0:	2a03      	cmp	r2, #3
 80a20a2:	d017      	beq.n	80a20d4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 80a20a4:	2a01      	cmp	r2, #1
 80a20a6:	d120      	bne.n	80a20ea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a20a8:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a20aa:	6003      	str	r3, [r0, #0]
	      break;
 80a20ac:	e01d      	b.n	80a20ea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a20ae:	2018      	movs	r0, #24
 80a20b0:	680e      	ldr	r6, [r1, #0]
 80a20b2:	f7fd fff2 	bl	80a009a <_Znwj>
 80a20b6:	4605      	mov	r5, r0
 80a20b8:	b150      	cbz	r0, 80a20d0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a20ba:	4631      	mov	r1, r6
 80a20bc:	f7ff fed4 	bl	80a1e68 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a20c0:	6930      	ldr	r0, [r6, #16]
 80a20c2:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a20c6:	b108      	cbz	r0, 80a20cc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 80a20c8:	f002 fe44 	bl	80a4d54 <strdup>
 80a20cc:	6128      	str	r0, [r5, #16]
 80a20ce:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a20d0:	6025      	str	r5, [r4, #0]
 80a20d2:	e00a      	b.n	80a20ea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a20d4:	6804      	ldr	r4, [r0, #0]
 80a20d6:	b144      	cbz	r4, 80a20ea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a20d8:	6920      	ldr	r0, [r4, #16]
 80a20da:	f7ff fdd5 	bl	80a1c88 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a20de:	4620      	mov	r0, r4
 80a20e0:	f7fe feb7 	bl	80a0e52 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a20e4:	4620      	mov	r0, r4
 80a20e6:	f7fd ffdc 	bl	80a00a2 <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a20ea:	2000      	movs	r0, #0
 80a20ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a20ee <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a20ee:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a20f0:	2300      	movs	r3, #0
 80a20f2:	6083      	str	r3, [r0, #8]
 80a20f4:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a20f6:	4604      	mov	r4, r0
 80a20f8:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a20fa:	b12b      	cbz	r3, 80a2108 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a20fc:	2202      	movs	r2, #2
 80a20fe:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a2100:	68eb      	ldr	r3, [r5, #12]
 80a2102:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a2104:	68ab      	ldr	r3, [r5, #8]
 80a2106:	60a3      	str	r3, [r4, #8]
	}
    }
 80a2108:	4620      	mov	r0, r4
 80a210a:	bd38      	pop	{r3, r4, r5, pc}

080a210c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a210c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a210e:	b570      	push	{r4, r5, r6, lr}
 80a2110:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a2112:	d006      	beq.n	80a2122 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 80a2114:	2a03      	cmp	r2, #3
 80a2116:	d011      	beq.n	80a213c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 80a2118:	2a01      	cmp	r2, #1
 80a211a:	d117      	bne.n	80a214c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a211c:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a211e:	6003      	str	r3, [r0, #0]
	      break;
 80a2120:	e014      	b.n	80a214c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a2122:	2014      	movs	r0, #20
 80a2124:	680e      	ldr	r6, [r1, #0]
 80a2126:	f7fd ffb8 	bl	80a009a <_Znwj>
 80a212a:	4605      	mov	r5, r0
 80a212c:	b120      	cbz	r0, 80a2138 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a212e:	4631      	mov	r1, r6
 80a2130:	f7ff ffdd 	bl	80a20ee <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a2134:	7c33      	ldrb	r3, [r6, #16]
 80a2136:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a2138:	6025      	str	r5, [r4, #0]
 80a213a:	e007      	b.n	80a214c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a213c:	6804      	ldr	r4, [r0, #0]
 80a213e:	b12c      	cbz	r4, 80a214c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a2140:	4620      	mov	r0, r4
 80a2142:	f7fe fe86 	bl	80a0e52 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a2146:	4620      	mov	r0, r4
 80a2148:	f7fd ffab 	bl	80a00a2 <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a214c:	2000      	movs	r0, #0
 80a214e:	bd70      	pop	{r4, r5, r6, pc}

080a2150 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 80a2150:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2152:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a2154:	f3bf 8f5f 	dmb	sy
 80a2158:	b087      	sub	sp, #28
 80a215a:	2300      	movs	r3, #0
 80a215c:	e850 6f00 	ldrex	r6, [r0]
 80a2160:	e840 3200 	strex	r2, r3, [r0]
 80a2164:	2a00      	cmp	r2, #0
 80a2166:	d1f9      	bne.n	80a215c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 80a2168:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a216c:	2e00      	cmp	r6, #0
 80a216e:	d03e      	beq.n	80a21ee <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x9e>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a2170:	4618      	mov	r0, r3
 80a2172:	f7ff fd1d 	bl	80a1bb0 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a2176:	4607      	mov	r7, r0
 80a2178:	b120      	cbz	r0, 80a2184 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a217a:	4621      	mov	r1, r4
 80a217c:	4630      	mov	r0, r6
 80a217e:	f7ff fe63 	bl	80a1e48 <_ZNKSt8functionIFvRKbEEclES1_>
 80a2182:	e02e      	b.n	80a21e2 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a2184:	4631      	mov	r1, r6
 80a2186:	a801      	add	r0, sp, #4
 80a2188:	f7ff ffb1 	bl	80a20ee <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a218c:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a218e:	2010      	movs	r0, #16
 80a2190:	f88d 3014 	strb.w	r3, [sp, #20]
 80a2194:	f7fd ff81 	bl	80a009a <_Znwj>
 80a2198:	4605      	mov	r5, r0
 80a219a:	b1d0      	cbz	r0, 80a21d2 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a219c:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a219e:	2014      	movs	r0, #20
 80a21a0:	f7fd ff7b 	bl	80a009a <_Znwj>
 80a21a4:	4604      	mov	r4, r0
 80a21a6:	b178      	cbz	r0, 80a21c8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a21a8:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a21aa:	4601      	mov	r1, r0
 80a21ac:	a801      	add	r0, sp, #4
 80a21ae:	f7ff fe2b 	bl	80a1e08 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a21b2:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a21b4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a21b6:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a21b8:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a21ba:	9203      	str	r2, [sp, #12]
 80a21bc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a21be:	60e3      	str	r3, [r4, #12]
 80a21c0:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a21c4:	9204      	str	r2, [sp, #16]
 80a21c6:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a21c8:	4b0a      	ldr	r3, [pc, #40]	; (80a21f4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a21ca:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a21cc:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a21ce:	4b0a      	ldr	r3, [pc, #40]	; (80a21f8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 80a21d0:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a21d2:	a801      	add	r0, sp, #4
 80a21d4:	f7fe fe3d 	bl	80a0e52 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a21d8:	2200      	movs	r2, #0
 80a21da:	4629      	mov	r1, r5
 80a21dc:	4807      	ldr	r0, [pc, #28]	; (80a21fc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 80a21de:	f7ff fcef 	bl	80a1bc0 <application_thread_invoke>
 80a21e2:	4630      	mov	r0, r6
 80a21e4:	f7fe fe35 	bl	80a0e52 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a21e8:	4630      	mov	r0, r6
 80a21ea:	f7fd ff5a 	bl	80a00a2 <_ZdlPv>
        }
    }
 80a21ee:	b007      	add	sp, #28
 80a21f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a21f2:	bf00      	nop
 80a21f4:	080a1e5b 	.word	0x080a1e5b
 80a21f8:	080a210d 	.word	0x080a210d
 80a21fc:	080a1d1f 	.word	0x080a1d1f

080a2200 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a2200:	b530      	push	{r4, r5, lr}
 80a2202:	4604      	mov	r4, r0
 80a2204:	b085      	sub	sp, #20
 80a2206:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a2208:	4668      	mov	r0, sp
 80a220a:	4611      	mov	r1, r2
 80a220c:	f7ff fddf 	bl	80a1dce <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a2210:	b17c      	cbz	r4, 80a2232 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a2212:	b224      	sxth	r4, r4
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a2214:	4628      	mov	r0, r5
 80a2216:	b10d      	cbz	r5, 80a221c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 80a2218:	f002 fd9c 	bl	80a4d54 <strdup>
 80a221c:	9002      	str	r0, [sp, #8]
 80a221e:	a902      	add	r1, sp, #8
 80a2220:	4668      	mov	r0, sp
 80a2222:	f8ad 400c 	strh.w	r4, [sp, #12]
 80a2226:	f7ff fe2f 	bl	80a1e88 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a222a:	9802      	ldr	r0, [sp, #8]
 80a222c:	f7ff fd2c 	bl	80a1c88 <free>
 80a2230:	e01d      	b.n	80a226e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a2232:	f04f 0201 	mov.w	r2, #1
 80a2236:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a2238:	f88d 4008 	strb.w	r4, [sp, #8]
 80a223c:	e8d0 3f4f 	ldrexb	r3, [r0]
 80a2240:	42a3      	cmp	r3, r4
 80a2242:	d103      	bne.n	80a224c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 80a2244:	e8c0 2f41 	strexb	r1, r2, [r0]
 80a2248:	2900      	cmp	r1, #0
 80a224a:	d1f7      	bne.n	80a223c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 80a224c:	d002      	beq.n	80a2254 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 80a224e:	f88d 3008 	strb.w	r3, [sp, #8]
 80a2252:	e00c      	b.n	80a226e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 80a2254:	f110 010c 	adds.w	r1, r0, #12
 80a2258:	f04f 0301 	mov.w	r3, #1
 80a225c:	bf18      	it	ne
 80a225e:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a2260:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 80a2264:	3004      	adds	r0, #4
 80a2266:	f800 3c03 	strb.w	r3, [r0, #-3]
 80a226a:	f7ff ff71 	bl	80a2150 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 80a226e:	a801      	add	r0, sp, #4
 80a2270:	f7fe fe77 	bl	80a0f62 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 80a2274:	b005      	add	sp, #20
 80a2276:	bd30      	pop	{r4, r5, pc}

080a2278 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a2278:	4770      	bx	lr

080a227a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a227a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a227c:	4606      	mov	r6, r0
 80a227e:	4615      	mov	r5, r2
 80a2280:	460c      	mov	r4, r1
 80a2282:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a2284:	42bc      	cmp	r4, r7
 80a2286:	d006      	beq.n	80a2296 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a2288:	6833      	ldr	r3, [r6, #0]
 80a228a:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a228e:	689b      	ldr	r3, [r3, #8]
 80a2290:	4630      	mov	r0, r6
 80a2292:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a2294:	e7f6      	b.n	80a2284 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a2296:	4628      	mov	r0, r5
 80a2298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a229a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a229a:	2200      	movs	r2, #0
 80a229c:	7c00      	ldrb	r0, [r0, #16]
 80a229e:	f7ff bb75 	b.w	80a198c <HAL_I2C_Write_Data>

080a22a2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a22a2:	2100      	movs	r1, #0
 80a22a4:	7c00      	ldrb	r0, [r0, #16]
 80a22a6:	f7ff bb79 	b.w	80a199c <HAL_I2C_Available_Data>

080a22aa <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a22aa:	2100      	movs	r1, #0
 80a22ac:	7c00      	ldrb	r0, [r0, #16]
 80a22ae:	f7ff bb7d 	b.w	80a19ac <HAL_I2C_Read_Data>

080a22b2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a22b2:	2100      	movs	r1, #0
 80a22b4:	7c00      	ldrb	r0, [r0, #16]
 80a22b6:	f7ff bb81 	b.w	80a19bc <HAL_I2C_Peek_Data>

080a22ba <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a22ba:	2100      	movs	r1, #0
 80a22bc:	7c00      	ldrb	r0, [r0, #16]
 80a22be:	f7ff bb85 	b.w	80a19cc <HAL_I2C_Flush_Data>

080a22c2 <_ZN7TwoWireD0Ev>:
 80a22c2:	b510      	push	{r4, lr}
 80a22c4:	4604      	mov	r4, r0
 80a22c6:	f7fd feec 	bl	80a00a2 <_ZdlPv>
 80a22ca:	4620      	mov	r0, r4
 80a22cc:	bd10      	pop	{r4, pc}
	...

080a22d0 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a22d0:	b510      	push	{r4, lr}
 80a22d2:	4604      	mov	r4, r0
 80a22d4:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a22d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a22da:	60a3      	str	r3, [r4, #8]
 80a22dc:	4b04      	ldr	r3, [pc, #16]	; (80a22f0 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a22de:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a22e0:	7420      	strb	r0, [r4, #16]
 80a22e2:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a22e4:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a22e6:	f7ff fb79 	bl	80a19dc <HAL_I2C_Init>

}
 80a22ea:	4620      	mov	r0, r4
 80a22ec:	bd10      	pop	{r4, pc}
 80a22ee:	bf00      	nop
 80a22f0:	080a7d9c 	.word	0x080a7d9c

080a22f4 <_ZN7TwoWire8setSpeedEm>:
// Public Methods //////////////////////////////////////////////////////////////

//setSpeed() should be called before begin() else default to 100KHz
void TwoWire::setSpeed(uint32_t clockSpeed)
{
  HAL_I2C_Set_Speed(_i2c, clockSpeed, NULL);
 80a22f4:	2200      	movs	r2, #0
 80a22f6:	7c00      	ldrb	r0, [r0, #16]
 80a22f8:	f7ff bb18 	b.w	80a192c <HAL_I2C_Set_Speed>

080a22fc <_ZN7TwoWire12stretchClockEb>:
  HAL_I2C_Enable_DMA_Mode(_i2c, enableDMAMode, NULL);
}

void TwoWire::stretchClock(bool stretch)
{
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
 80a22fc:	2200      	movs	r2, #0
 80a22fe:	7c00      	ldrb	r0, [r0, #16]
 80a2300:	f7ff bb1c 	b.w	80a193c <HAL_I2C_Stretch_Clock>

080a2304 <_ZN7TwoWire5beginEv>:
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a2304:	2300      	movs	r3, #0
 80a2306:	461a      	mov	r2, r3
 80a2308:	4619      	mov	r1, r3
 80a230a:	7c00      	ldrb	r0, [r0, #16]
 80a230c:	f7ff bb1e 	b.w	80a194c <HAL_I2C_Begin>

080a2310 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80a2310:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 80a2312:	2400      	movs	r4, #0
 80a2314:	7c00      	ldrb	r0, [r0, #16]
 80a2316:	9400      	str	r4, [sp, #0]
 80a2318:	f7ff fb20 	bl	80a195c <HAL_I2C_Request_Data>
  return result;
}
 80a231c:	b2c0      	uxtb	r0, r0
 80a231e:	b002      	add	sp, #8
 80a2320:	bd10      	pop	{r4, pc}

080a2322 <_ZN7TwoWire11requestFromEii>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a2322:	2301      	movs	r3, #1
 80a2324:	b2d2      	uxtb	r2, r2
 80a2326:	b2c9      	uxtb	r1, r1
 80a2328:	f7ff bff2 	b.w	80a2310 <_ZN7TwoWire11requestFromEhhh>

080a232c <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80a232c:	2200      	movs	r2, #0
 80a232e:	7c00      	ldrb	r0, [r0, #16]
 80a2330:	f7ff bb1c 	b.w	80a196c <HAL_I2C_Begin_Transmission>

080a2334 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
 80a2334:	b2c9      	uxtb	r1, r1
 80a2336:	f7ff bff9 	b.w	80a232c <_ZN7TwoWire17beginTransmissionEh>

080a233a <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80a233a:	2200      	movs	r2, #0
 80a233c:	7c00      	ldrb	r0, [r0, #16]
 80a233e:	f7ff bb1d 	b.w	80a197c <HAL_I2C_End_Transmission>

080a2342 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80a2342:	2101      	movs	r1, #1
 80a2344:	f7ff bff9 	b.w	80a233a <_ZN7TwoWire15endTransmissionEh>

080a2348 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a2348:	4770      	bx	lr

080a234a <_ZN9IPAddressD0Ev>:
 80a234a:	b510      	push	{r4, lr}
 80a234c:	4604      	mov	r4, r0
 80a234e:	f7fd fea8 	bl	80a00a2 <_ZdlPv>
 80a2352:	4620      	mov	r0, r4
 80a2354:	bd10      	pop	{r4, pc}

080a2356 <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a2356:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2358:	460f      	mov	r7, r1
 80a235a:	f100 0608 	add.w	r6, r0, #8
 80a235e:	1d05      	adds	r5, r0, #4
 80a2360:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a2362:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a2366:	220a      	movs	r2, #10
 80a2368:	4638      	mov	r0, r7
 80a236a:	f000 f8b6 	bl	80a24da <_ZN5Print5printEhi>
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a236e:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a2370:	4404      	add	r4, r0
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a2372:	d007      	beq.n	80a2384 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a2374:	2c00      	cmp	r4, #0
 80a2376:	d0f4      	beq.n	80a2362 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a2378:	212e      	movs	r1, #46	; 0x2e
 80a237a:	4638      	mov	r0, r7
 80a237c:	f000 f874 	bl	80a2468 <_ZN5Print5printEc>
 80a2380:	4404      	add	r4, r0
 80a2382:	e7ee      	b.n	80a2362 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a2384:	4620      	mov	r0, r4
 80a2386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2388 <_ZN9IPAddressC1Ev>:
#include "spark_wiring_ipaddress.h"
#include "spark_wiring_print.h"
#include "spark_wiring_platform.h"
#include "string.h"

IPAddress::IPAddress()
 80a2388:	b510      	push	{r4, lr}
 80a238a:	4604      	mov	r4, r0
 80a238c:	4b04      	ldr	r3, [pc, #16]	; (80a23a0 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a238e:	2211      	movs	r2, #17
 80a2390:	f840 3b04 	str.w	r3, [r0], #4
 80a2394:	2100      	movs	r1, #0
 80a2396:	f002 fc9a 	bl	80a4cce <memset>
{
    clear();
}
 80a239a:	4620      	mov	r0, r4
 80a239c:	bd10      	pop	{r4, pc}
 80a239e:	bf00      	nop
 80a23a0:	080a7dc4 	.word	0x080a7dc4

080a23a4 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a23a4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a23a6:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a23aa:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a23ae:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a23b2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a23b6:	2304      	movs	r3, #4
 80a23b8:	6041      	str	r1, [r0, #4]
 80a23ba:	7503      	strb	r3, [r0, #20]
 80a23bc:	bd10      	pop	{r4, pc}
	...

080a23c0 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a23c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a23c2:	4d04      	ldr	r5, [pc, #16]	; (80a23d4 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a23c4:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a23c6:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a23ca:	9500      	str	r5, [sp, #0]
 80a23cc:	f7ff ffea 	bl	80a23a4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a23d0:	b003      	add	sp, #12
 80a23d2:	bd30      	pop	{r4, r5, pc}
 80a23d4:	080a7dc4 	.word	0x080a7dc4

080a23d8 <_ZN9IPAddressaSEPKh>:
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
 80a23d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
 80a23da:	780d      	ldrb	r5, [r1, #0]
 80a23dc:	788b      	ldrb	r3, [r1, #2]
 80a23de:	784a      	ldrb	r2, [r1, #1]
 80a23e0:	78c9      	ldrb	r1, [r1, #3]
 80a23e2:	9100      	str	r1, [sp, #0]
 80a23e4:	4629      	mov	r1, r5
 80a23e6:	f7ff ffdd 	bl	80a23a4 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
 80a23ea:	b003      	add	sp, #12
 80a23ec:	bd30      	pop	{r4, r5, pc}
	...

080a23f0 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(uint32_t address)
{
    *this = address;
}

IPAddress::IPAddress(const uint8_t* address)
 80a23f0:	b510      	push	{r4, lr}
 80a23f2:	4604      	mov	r4, r0
 80a23f4:	4b02      	ldr	r3, [pc, #8]	; (80a2400 <_ZN9IPAddressC1EPKh+0x10>)
 80a23f6:	6003      	str	r3, [r0, #0]
{
    *this = address;
 80a23f8:	f7ff ffee 	bl	80a23d8 <_ZN9IPAddressaSEPKh>
}
 80a23fc:	4620      	mov	r0, r4
 80a23fe:	bd10      	pop	{r4, pc}
 80a2400:	080a7dc4 	.word	0x080a7dc4

080a2404 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a2404:	4a01      	ldr	r2, [pc, #4]	; (80a240c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a2406:	4b02      	ldr	r3, [pc, #8]	; (80a2410 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a2408:	601a      	str	r2, [r3, #0]
 80a240a:	4770      	bx	lr
 80a240c:	080a7e86 	.word	0x080a7e86
 80a2410:	20000588 	.word	0x20000588

080a2414 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a2414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2416:	4606      	mov	r6, r0
 80a2418:	460d      	mov	r5, r1
 80a241a:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a241c:	2400      	movs	r4, #0
  while (size--) {
 80a241e:	42bd      	cmp	r5, r7
 80a2420:	d00c      	beq.n	80a243c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a2422:	6833      	ldr	r3, [r6, #0]
 80a2424:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a2428:	689b      	ldr	r3, [r3, #8]
 80a242a:	4630      	mov	r0, r6
 80a242c:	4798      	blx	r3
     if (chunk>=0)
 80a242e:	2800      	cmp	r0, #0
 80a2430:	db01      	blt.n	80a2436 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a2432:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a2434:	e7f3      	b.n	80a241e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a2436:	2c00      	cmp	r4, #0
 80a2438:	bf08      	it	eq
 80a243a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a243c:	4620      	mov	r0, r4
 80a243e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2440 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a2440:	b570      	push	{r4, r5, r6, lr}
 80a2442:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a2444:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a2446:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a2448:	b149      	cbz	r1, 80a245e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a244a:	f003 f9b3 	bl	80a57b4 <strlen>
 80a244e:	682b      	ldr	r3, [r5, #0]
 80a2450:	4602      	mov	r2, r0
 80a2452:	4621      	mov	r1, r4
 80a2454:	4628      	mov	r0, r5
    }
 80a2456:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a245a:	68db      	ldr	r3, [r3, #12]
 80a245c:	4718      	bx	r3
    }
 80a245e:	bd70      	pop	{r4, r5, r6, pc}

080a2460 <_ZN5Print5printEPKc>:
 80a2460:	b508      	push	{r3, lr}
 80a2462:	f7ff ffed 	bl	80a2440 <_ZN5Print5writeEPKc>
 80a2466:	bd08      	pop	{r3, pc}

080a2468 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a2468:	6803      	ldr	r3, [r0, #0]
 80a246a:	689b      	ldr	r3, [r3, #8]
 80a246c:	4718      	bx	r3

080a246e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a246e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a2470:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a2472:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a2474:	f7ff fff8 	bl	80a2468 <_ZN5Print5printEc>
  n += print('\n');
 80a2478:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a247a:	4604      	mov	r4, r0
  n += print('\n');
 80a247c:	4628      	mov	r0, r5
 80a247e:	f7ff fff3 	bl	80a2468 <_ZN5Print5printEc>
  return n;
}
 80a2482:	4420      	add	r0, r4
 80a2484:	bd38      	pop	{r3, r4, r5, pc}

080a2486 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a2486:	2a01      	cmp	r2, #1
 80a2488:	bf98      	it	ls
 80a248a:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a248c:	b530      	push	{r4, r5, lr}
 80a248e:	460b      	mov	r3, r1
 80a2490:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a2492:	2100      	movs	r1, #0
 80a2494:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a2498:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a249c:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a24a0:	fb05 3312 	mls	r3, r5, r2, r3
 80a24a4:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a24a6:	2b09      	cmp	r3, #9
 80a24a8:	bf94      	ite	ls
 80a24aa:	3330      	addls	r3, #48	; 0x30
 80a24ac:	3337      	addhi	r3, #55	; 0x37
 80a24ae:	b2db      	uxtb	r3, r3
 80a24b0:	4621      	mov	r1, r4
 80a24b2:	f804 3901 	strb.w	r3, [r4], #-1
 80a24b6:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a24b8:	2d00      	cmp	r5, #0
 80a24ba:	d1ef      	bne.n	80a249c <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a24bc:	f7ff ffc0 	bl	80a2440 <_ZN5Print5writeEPKc>
}
 80a24c0:	b00b      	add	sp, #44	; 0x2c
 80a24c2:	bd30      	pop	{r4, r5, pc}

080a24c4 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a24c4:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a24c6:	b922      	cbnz	r2, 80a24d2 <_ZN5Print5printEmi+0xe>
 80a24c8:	6803      	ldr	r3, [r0, #0]
 80a24ca:	b2c9      	uxtb	r1, r1
 80a24cc:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a24ce:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a24d0:	4718      	bx	r3
  else return printNumber(n, base);
 80a24d2:	b2d2      	uxtb	r2, r2
}
 80a24d4:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a24d6:	f7ff bfd6 	b.w	80a2486 <_ZN5Print11printNumberEmh>

080a24da <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a24da:	f7ff bff3 	b.w	80a24c4 <_ZN5Print5printEmi>

080a24de <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
 80a24de:	b40c      	push	{r2, r3}
 80a24e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a24e4:	b087      	sub	sp, #28
 80a24e6:	af00      	add	r7, sp, #0
 80a24e8:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80a24ec:	f854 9b04 	ldr.w	r9, [r4], #4
 80a24f0:	4605      	mov	r5, r0
 80a24f2:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
 80a24f4:	4623      	mov	r3, r4
 80a24f6:	464a      	mov	r2, r9
 80a24f8:	2114      	movs	r1, #20
 80a24fa:	1d38      	adds	r0, r7, #4
size_t Print::printf_impl(bool newline, const char* format, ...)
{
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
 80a24fc:	603c      	str	r4, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, marker);
 80a24fe:	f7ff fbf3 	bl	80a1ce8 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
 80a2502:	2813      	cmp	r0, #19
 80a2504:	d805      	bhi.n	80a2512 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a2506:	1d39      	adds	r1, r7, #4
 80a2508:	4628      	mov	r0, r5
 80a250a:	f7ff ff99 	bl	80a2440 <_ZN5Print5writeEPKc>
 80a250e:	4604      	mov	r4, r0
 80a2510:	e013      	b.n	80a253a <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 80a2512:	f100 0308 	add.w	r3, r0, #8
 80a2516:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
 80a251a:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 80a251c:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
 80a2520:	1c41      	adds	r1, r0, #1
 80a2522:	4623      	mov	r3, r4
 80a2524:	464a      	mov	r2, r9
 80a2526:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
 80a2528:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
 80a252a:	f7ff fbdd 	bl	80a1ce8 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a252e:	4669      	mov	r1, sp
 80a2530:	4628      	mov	r0, r5
 80a2532:	f7ff ff85 	bl	80a2440 <_ZN5Print5writeEPKc>
 80a2536:	4604      	mov	r4, r0
 80a2538:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
 80a253a:	b11e      	cbz	r6, 80a2544 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
 80a253c:	4628      	mov	r0, r5
 80a253e:	f7ff ff96 	bl	80a246e <_ZN5Print7printlnEv>
 80a2542:	4404      	add	r4, r0
    return n;
}
 80a2544:	4620      	mov	r0, r4
 80a2546:	371c      	adds	r7, #28
 80a2548:	46bd      	mov	sp, r7
 80a254a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a254e:	b002      	add	sp, #8
 80a2550:	4770      	bx	lr

080a2552 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a2552:	b510      	push	{r4, lr}
 80a2554:	4604      	mov	r4, r0
 80a2556:	f7fe fc7c 	bl	80a0e52 <_ZNSt14_Function_baseD1Ev>
 80a255a:	4620      	mov	r0, r4
 80a255c:	bd10      	pop	{r4, pc}
	...

080a2560 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2560:	4803      	ldr	r0, [pc, #12]	; (80a2570 <_GLOBAL__sub_I_RGB+0x10>)
 80a2562:	2300      	movs	r3, #0
 80a2564:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a2566:	4a03      	ldr	r2, [pc, #12]	; (80a2574 <_GLOBAL__sub_I_RGB+0x14>)
 80a2568:	4903      	ldr	r1, [pc, #12]	; (80a2578 <_GLOBAL__sub_I_RGB+0x18>)
 80a256a:	f000 bf6f 	b.w	80a344c <__aeabi_atexit>
 80a256e:	bf00      	nop
 80a2570:	2000058c 	.word	0x2000058c
 80a2574:	20000478 	.word	0x20000478
 80a2578:	080a2553 	.word	0x080a2553

080a257c <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a257c:	4770      	bx	lr

080a257e <_ZN8SPIClassD0Ev>:
 80a257e:	b510      	push	{r4, lr}
 80a2580:	4604      	mov	r4, r0
 80a2582:	f7fd fd8e 	bl	80a00a2 <_ZdlPv>
 80a2586:	4620      	mov	r0, r4
 80a2588:	bd10      	pop	{r4, pc}
	...

080a258c <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a258c:	b570      	push	{r4, r5, r6, lr}
 80a258e:	4604      	mov	r4, r0
 80a2590:	460e      	mov	r6, r1
 80a2592:	4b07      	ldr	r3, [pc, #28]	; (80a25b0 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a2594:	2500      	movs	r5, #0
 80a2596:	6003      	str	r3, [r0, #0]
 80a2598:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a259c:	f7ff f986 	bl	80a18ac <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a25a0:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a25a2:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a25a4:	f7ff fa64 	bl	80a1a70 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a25a8:	60a5      	str	r5, [r4, #8]
}
 80a25aa:	4620      	mov	r0, r4
 80a25ac:	bd70      	pop	{r4, r5, r6, pc}
 80a25ae:	bf00      	nop
 80a25b0:	080a7eb8 	.word	0x080a7eb8

080a25b4 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
 80a25b4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a25b8:	4680      	mov	r8, r0
 80a25ba:	460d      	mov	r5, r1
 80a25bc:	4617      	mov	r7, r2
 80a25be:	461e      	mov	r6, r3
    bool negative = val<0;
    if (negative) {
 80a25c0:	2200      	movs	r2, #0
 80a25c2:	2300      	movs	r3, #0
 80a25c4:	4640      	mov	r0, r8
 80a25c6:	4629      	mov	r1, r5
 80a25c8:	f001 fcba 	bl	80a3f40 <__aeabi_dcmplt>
 80a25cc:	b120      	cbz	r0, 80a25d8 <_Z4dtoadhPc+0x24>
        val = -val;
        *sout++ = '-';
 80a25ce:	232d      	movs	r3, #45	; 0x2d
 80a25d0:	7033      	strb	r3, [r6, #0]
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
    bool negative = val<0;
    if (negative) {
        val = -val;
 80a25d2:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
        *sout++ = '-';
 80a25d6:	3601      	adds	r6, #1
 80a25d8:	2300      	movs	r3, #0
    }
    long scale = 1;
 80a25da:	2401      	movs	r4, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
 80a25dc:	220a      	movs	r2, #10
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
 80a25de:	b2d9      	uxtb	r1, r3
 80a25e0:	428f      	cmp	r7, r1
 80a25e2:	d902      	bls.n	80a25ea <_Z4dtoadhPc+0x36>
        scale *= 10;
 80a25e4:	4354      	muls	r4, r2
 80a25e6:	3301      	adds	r3, #1
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
 80a25e8:	e7f9      	b.n	80a25de <_Z4dtoadhPc+0x2a>
        scale *= 10;
    val *= scale;   // capture all the significant digits
 80a25ea:	4620      	mov	r0, r4
 80a25ec:	f001 f9d0 	bl	80a3990 <__aeabi_i2d>
 80a25f0:	4642      	mov	r2, r8
 80a25f2:	462b      	mov	r3, r5
 80a25f4:	f001 fa32 	bl	80a3a5c <__aeabi_dmul>
 80a25f8:	4682      	mov	sl, r0
 80a25fa:	468b      	mov	fp, r1
    uint64_t fixed = uint64_t(val);
 80a25fc:	f002 f872 	bl	80a46e4 <__aeabi_d2ulz>
 80a2600:	4680      	mov	r8, r0
 80a2602:	4689      	mov	r9, r1
    if ((val-fixed)>=0.5)    // round last digit
 80a2604:	f001 f9f4 	bl	80a39f0 <__aeabi_ul2d>
 80a2608:	4602      	mov	r2, r0
 80a260a:	460b      	mov	r3, r1
 80a260c:	4650      	mov	r0, sl
 80a260e:	4659      	mov	r1, fp
 80a2610:	f001 f870 	bl	80a36f4 <__aeabi_dsub>
 80a2614:	2200      	movs	r2, #0
 80a2616:	4b17      	ldr	r3, [pc, #92]	; (80a2674 <_Z4dtoadhPc+0xc0>)
 80a2618:	f001 fca6 	bl	80a3f68 <__aeabi_dcmpge>
 80a261c:	b118      	cbz	r0, 80a2626 <_Z4dtoadhPc+0x72>
        fixed++;
 80a261e:	f118 0801 	adds.w	r8, r8, #1
 80a2622:	f149 0900 	adc.w	r9, r9, #0

    unsigned long first = (unsigned long)(fixed / scale);
 80a2626:	17e5      	asrs	r5, r4, #31
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
 80a2628:	4622      	mov	r2, r4
 80a262a:	462b      	mov	r3, r5
 80a262c:	4640      	mov	r0, r8
 80a262e:	4649      	mov	r1, r9
 80a2630:	f002 f840 	bl	80a46b4 <__aeabi_uldivmod>
 80a2634:	2301      	movs	r3, #1
 80a2636:	220a      	movs	r2, #10
 80a2638:	4631      	mov	r1, r6
 80a263a:	f000 fde8 	bl	80a320e <ultoa>
    if (prec) {
 80a263e:	b1af      	cbz	r7, 80a266c <_Z4dtoadhPc+0xb8>
        sout += strlen(sout);
 80a2640:	4630      	mov	r0, r6
 80a2642:	f003 f8b7 	bl	80a57b4 <strlen>
        *sout++ = '.';
 80a2646:	232e      	movs	r3, #46	; 0x2e
 80a2648:	5433      	strb	r3, [r6, r0]
        ultoa(second, sout, 10, prec);
 80a264a:	3001      	adds	r0, #1
 80a264c:	4406      	add	r6, r0
 80a264e:	4622      	mov	r2, r4
 80a2650:	462b      	mov	r3, r5
 80a2652:	4640      	mov	r0, r8
 80a2654:	4649      	mov	r1, r9
 80a2656:	f002 f82d 	bl	80a46b4 <__aeabi_uldivmod>
 80a265a:	463b      	mov	r3, r7
 80a265c:	4610      	mov	r0, r2
 80a265e:	4631      	mov	r1, r6
 80a2660:	220a      	movs	r2, #10
    }
}
 80a2662:	b001      	add	sp, #4
 80a2664:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    ultoa(first, sout, 10, 1);
    if (prec) {
        sout += strlen(sout);
        *sout++ = '.';
        ultoa(second, sout, 10, prec);
 80a2668:	f000 bdd1 	b.w	80a320e <ultoa>
    }
}
 80a266c:	b001      	add	sp, #4
 80a266e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2672:	bf00      	nop
 80a2674:	3fe00000 	.word	0x3fe00000

080a2678 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a2678:	b510      	push	{r4, lr}
 80a267a:	4604      	mov	r4, r0
{
	free(buffer);
 80a267c:	6800      	ldr	r0, [r0, #0]
 80a267e:	f7ff fb03 	bl	80a1c88 <free>
}
 80a2682:	4620      	mov	r0, r4
 80a2684:	bd10      	pop	{r4, pc}

080a2686 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a2686:	b510      	push	{r4, lr}
 80a2688:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a268a:	6800      	ldr	r0, [r0, #0]
 80a268c:	b108      	cbz	r0, 80a2692 <_ZN6String10invalidateEv+0xc>
 80a268e:	f7ff fafb 	bl	80a1c88 <free>
	buffer = NULL;
 80a2692:	2300      	movs	r3, #0
 80a2694:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a2696:	60a3      	str	r3, [r4, #8]
 80a2698:	6063      	str	r3, [r4, #4]
 80a269a:	bd10      	pop	{r4, pc}

080a269c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a269c:	b538      	push	{r3, r4, r5, lr}
 80a269e:	4604      	mov	r4, r0
 80a26a0:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a26a2:	6800      	ldr	r0, [r0, #0]
 80a26a4:	3101      	adds	r1, #1
 80a26a6:	f7ff faf7 	bl	80a1c98 <realloc>
	if (newbuffer) {
 80a26aa:	b110      	cbz	r0, 80a26b2 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a26ac:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a26b0:	2001      	movs	r0, #1
	}
	return 0;
}
 80a26b2:	bd38      	pop	{r3, r4, r5, pc}

080a26b4 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a26b4:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a26b6:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a26b8:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a26ba:	b113      	cbz	r3, 80a26c2 <_ZN6String7reserveEj+0xe>
 80a26bc:	6843      	ldr	r3, [r0, #4]
 80a26be:	428b      	cmp	r3, r1
 80a26c0:	d207      	bcs.n	80a26d2 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a26c2:	4620      	mov	r0, r4
 80a26c4:	f7ff ffea 	bl	80a269c <_ZN6String12changeBufferEj>
 80a26c8:	b120      	cbz	r0, 80a26d4 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a26ca:	68a3      	ldr	r3, [r4, #8]
 80a26cc:	b90b      	cbnz	r3, 80a26d2 <_ZN6String7reserveEj+0x1e>
 80a26ce:	6822      	ldr	r2, [r4, #0]
 80a26d0:	7013      	strb	r3, [r2, #0]
 80a26d2:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a26d4:	bd10      	pop	{r4, pc}

080a26d6 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a26d6:	b570      	push	{r4, r5, r6, lr}
 80a26d8:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a26da:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a26dc:	4604      	mov	r4, r0
 80a26de:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a26e0:	f7ff ffe8 	bl	80a26b4 <_ZN6String7reserveEj>
 80a26e4:	b918      	cbnz	r0, 80a26ee <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a26e6:	4620      	mov	r0, r4
 80a26e8:	f7ff ffcd 	bl	80a2686 <_ZN6String10invalidateEv>
		return *this;
 80a26ec:	e009      	b.n	80a2702 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a26ee:	462a      	mov	r2, r5
 80a26f0:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a26f2:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a26f4:	6820      	ldr	r0, [r4, #0]
 80a26f6:	f002 fadf 	bl	80a4cb8 <memcpy>
	buffer[len] = 0;
 80a26fa:	6822      	ldr	r2, [r4, #0]
 80a26fc:	68a3      	ldr	r3, [r4, #8]
 80a26fe:	2100      	movs	r1, #0
 80a2700:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a2702:	4620      	mov	r0, r4
 80a2704:	bd70      	pop	{r4, r5, r6, pc}

080a2706 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a2706:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a2708:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a270a:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a270c:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a270e:	6043      	str	r3, [r0, #4]
	len = 0;
 80a2710:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a2712:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a2714:	460d      	mov	r5, r1
 80a2716:	b139      	cbz	r1, 80a2728 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a2718:	4608      	mov	r0, r1
 80a271a:	f003 f84b 	bl	80a57b4 <strlen>
 80a271e:	4629      	mov	r1, r5
 80a2720:	4602      	mov	r2, r0
 80a2722:	4620      	mov	r0, r4
 80a2724:	f7ff ffd7 	bl	80a26d6 <_ZN6String4copyEPKcj>
}
 80a2728:	4620      	mov	r0, r4
 80a272a:	bd38      	pop	{r3, r4, r5, pc}

080a272c <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a272c:	b538      	push	{r3, r4, r5, lr}
 80a272e:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a2730:	460c      	mov	r4, r1
 80a2732:	b141      	cbz	r1, 80a2746 <_ZN6StringaSEPKc+0x1a>
 80a2734:	4608      	mov	r0, r1
 80a2736:	f003 f83d 	bl	80a57b4 <strlen>
 80a273a:	4621      	mov	r1, r4
 80a273c:	4602      	mov	r2, r0
 80a273e:	4628      	mov	r0, r5
 80a2740:	f7ff ffc9 	bl	80a26d6 <_ZN6String4copyEPKcj>
 80a2744:	e001      	b.n	80a274a <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 80a2746:	f7ff ff9e 	bl	80a2686 <_ZN6String10invalidateEv>

	return *this;
}
 80a274a:	4628      	mov	r0, r5
 80a274c:	bd38      	pop	{r3, r4, r5, pc}

080a274e <_ZN6StringC1Efi>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
 80a274e:	b530      	push	{r4, r5, lr}
 80a2750:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a2752:	2300      	movs	r3, #0
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
 80a2754:	b08b      	sub	sp, #44	; 0x2c
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a2756:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a2758:	6043      	str	r3, [r0, #4]
	len = 0;
 80a275a:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a275c:	7303      	strb	r3, [r0, #12]

String::String(float value, int decimalPlaces)
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
 80a275e:	b2d5      	uxtb	r5, r2
 80a2760:	4608      	mov	r0, r1
 80a2762:	f001 f927 	bl	80a39b4 <__aeabi_f2d>
 80a2766:	ab01      	add	r3, sp, #4
 80a2768:	462a      	mov	r2, r5
 80a276a:	f7ff ff23 	bl	80a25b4 <_Z4dtoadhPc>
        *this = buf;
 80a276e:	a901      	add	r1, sp, #4
 80a2770:	4620      	mov	r0, r4
 80a2772:	f7ff ffdb 	bl	80a272c <_ZN6StringaSEPKc>
}
 80a2776:	4620      	mov	r0, r4
 80a2778:	b00b      	add	sp, #44	; 0x2c
 80a277a:	bd30      	pop	{r4, r5, pc}

080a277c <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a277c:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a277e:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a2780:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a2782:	b912      	cbnz	r2, 80a278a <_ZNK6String6equalsEPKc+0xe>
 80a2784:	b919      	cbnz	r1, 80a278e <_ZNK6String6equalsEPKc+0x12>
 80a2786:	2001      	movs	r0, #1
 80a2788:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 80a278a:	b911      	cbnz	r1, 80a2792 <_ZNK6String6equalsEPKc+0x16>
 80a278c:	6803      	ldr	r3, [r0, #0]
 80a278e:	7818      	ldrb	r0, [r3, #0]
 80a2790:	e002      	b.n	80a2798 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
 80a2792:	6800      	ldr	r0, [r0, #0]
 80a2794:	f002 facc 	bl	80a4d30 <strcmp>
 80a2798:	fab0 f080 	clz	r0, r0
 80a279c:	0940      	lsrs	r0, r0, #5
}
 80a279e:	bd08      	pop	{r3, pc}

080a27a0 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
 80a27a0:	6800      	ldr	r0, [r0, #0]
 80a27a2:	b108      	cbz	r0, 80a27a8 <_ZNK6String5toIntEv+0x8>
 80a27a4:	f002 b979 	b.w	80a4a9a <atol>
	return 0;
}
 80a27a8:	4770      	bx	lr

080a27aa <_ZNK6String7toFloatEv>:


float String::toFloat(void) const
{
 80a27aa:	b508      	push	{r3, lr}
	if (buffer) return float(atof(buffer));
 80a27ac:	6800      	ldr	r0, [r0, #0]
 80a27ae:	b120      	cbz	r0, 80a27ba <_ZNK6String7toFloatEv+0x10>
 80a27b0:	f002 f970 	bl	80a4a94 <atof>
 80a27b4:	f001 fc34 	bl	80a4020 <__aeabi_d2f>
 80a27b8:	bd08      	pop	{r3, pc}
	return 0;
 80a27ba:	2000      	movs	r0, #0
}
 80a27bc:	bd08      	pop	{r3, pc}
	...

080a27c0 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a27c0:	f64f 739c 	movw	r3, #65436	; 0xff9c
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
}
 80a27c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a27c6:	4c0d      	ldr	r4, [pc, #52]	; (80a27fc <_GLOBAL__sub_I_System+0x3c>)
 80a27c8:	2500      	movs	r5, #0
 80a27ca:	8063      	strh	r3, [r4, #2]
 80a27cc:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a27d0:	4628      	mov	r0, r5
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a27d2:	80a3      	strh	r3, [r4, #4]
 80a27d4:	7025      	strb	r5, [r4, #0]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a27d6:	f7ff f9db 	bl	80a1b90 <set_system_mode>
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
 80a27da:	a802      	add	r0, sp, #8
 80a27dc:	f840 5d04 	str.w	r5, [r0, #-4]!
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 80a27e0:	462a      	mov	r2, r5
 80a27e2:	4629      	mov	r1, r5
 80a27e4:	f7ff f86a 	bl	80a18bc <HAL_Core_Get_Last_Reset_Info>
        return reason;
 80a27e8:	9b01      	ldr	r3, [sp, #4]
class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
        if (resetReason() == RESET_REASON_POWER_MANAGEMENT) {
 80a27ea:	2b1e      	cmp	r3, #30
 80a27ec:	d104      	bne.n	80a27f8 <_GLOBAL__sub_I_System+0x38>
            // Woken up from standby mode
            sleepResult_ = SleepResult(WAKEUP_REASON_PIN_OR_RTC, SYSTEM_ERROR_NONE, WKP);
 80a27ee:	2303      	movs	r3, #3
 80a27f0:	7023      	strb	r3, [r4, #0]
 80a27f2:	2311      	movs	r3, #17
 80a27f4:	8065      	strh	r5, [r4, #2]
 80a27f6:	80a3      	strh	r3, [r4, #4]
 80a27f8:	b003      	add	sp, #12
 80a27fa:	bd30      	pop	{r4, r5, pc}
 80a27fc:	2000059c 	.word	0x2000059c

080a2800 <_ZN9TCPClient5writeEh>:
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80a2800:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a2802:	ac02      	add	r4, sp, #8
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a2804:	6803      	ldr	r3, [r0, #0]
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80a2806:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a280a:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80a280c:	2201      	movs	r2, #1
 80a280e:	f247 5330 	movw	r3, #30000	; 0x7530
 80a2812:	4621      	mov	r1, r4
 80a2814:	47a8      	blx	r5
}
 80a2816:	b003      	add	sp, #12
 80a2818:	bd30      	pop	{r4, r5, pc}

080a281a <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
 80a281a:	b410      	push	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a281c:	6803      	ldr	r3, [r0, #0]
 80a281e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a2820:	f247 5330 	movw	r3, #30000	; 0x7530
 80a2824:	46a4      	mov	ip, r4
}
 80a2826:	bc10      	pop	{r4}
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a2828:	4760      	bx	ip

080a282a <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80a282a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a282c:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
 80a282e:	6803      	ldr	r3, [r0, #0]
{
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80a2830:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
 80a2834:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80a2836:	4621      	mov	r1, r4
 80a2838:	4613      	mov	r3, r2
 80a283a:	2201      	movs	r2, #1
 80a283c:	47a8      	blx	r5
}
 80a283e:	b003      	add	sp, #12
 80a2840:	bd30      	pop	{r4, r5, pc}

080a2842 <_ZN9TCPClient5flushEv>:
  d_->offset = 0;
  d_->total = 0;
}

void TCPClient::flush()
{
 80a2842:	4770      	bx	lr

080a2844 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 80a2844:	4770      	bx	lr

080a2846 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
 80a2846:	2000      	movs	r0, #0
 80a2848:	4770      	bx	lr

080a284a <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 80a284a:	b510      	push	{r4, lr}
 80a284c:	4604      	mov	r4, r0
 80a284e:	f7fd fc28 	bl	80a00a2 <_ZdlPv>
 80a2852:	4620      	mov	r0, r4
 80a2854:	bd10      	pop	{r4, pc}

080a2856 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 80a2856:	f7fd bc24 	b.w	80a00a2 <_ZdlPv>
	...

080a285c <_ZN9TCPClient7connectEPKctm>:
{
  flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a285c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a2860:	461f      	mov	r7, r3
    stop();
 80a2862:	6803      	ldr	r3, [r0, #0]
{
  flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a2864:	b08f      	sub	sp, #60	; 0x3c
    stop();
 80a2866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
  flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a2868:	4606      	mov	r6, r0
 80a286a:	460c      	mov	r4, r1
 80a286c:	4690      	mov	r8, r2
    stop();
 80a286e:	4798      	blx	r3
      int rv = 0;
      if(Network.ready())
 80a2870:	4b13      	ldr	r3, [pc, #76]	; (80a28c0 <_ZN9TCPClient7connectEPKctm+0x64>)
 80a2872:	6818      	ldr	r0, [r3, #0]
 80a2874:	6803      	ldr	r3, [r0, #0]
 80a2876:	681b      	ldr	r3, [r3, #0]
 80a2878:	4798      	blx	r3
 80a287a:	b1f0      	cbz	r0, 80a28ba <_ZN9TCPClient7connectEPKctm+0x5e>
      {
        IPAddress ip_addr;
 80a287c:	a802      	add	r0, sp, #8
 80a287e:	f7ff fd83 	bl	80a2388 <_ZN9IPAddressC1Ev>

        if((rv = inet_gethostbyname(host, strlen(host), ip_addr, nif, NULL)) == 0)
 80a2882:	4620      	mov	r0, r4
 80a2884:	f002 ff96 	bl	80a57b4 <strlen>
 80a2888:	2300      	movs	r3, #0
 80a288a:	9300      	str	r3, [sp, #0]
 80a288c:	b281      	uxth	r1, r0
 80a288e:	463b      	mov	r3, r7
 80a2890:	aa03      	add	r2, sp, #12
 80a2892:	4620      	mov	r0, r4
 80a2894:	f7ff f964 	bl	80a1b60 <inet_gethostbyname>
 80a2898:	b978      	cbnz	r0, 80a28ba <_ZN9TCPClient7connectEPKctm+0x5e>
        {
                return connect(ip_addr, port, nif);
 80a289a:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a289c:	ad09      	add	r5, sp, #36	; 0x24
 80a289e:	f8d3 9020 	ldr.w	r9, [r3, #32]
 80a28a2:	4b08      	ldr	r3, [pc, #32]	; (80a28c4 <_ZN9TCPClient7connectEPKctm+0x68>)
 80a28a4:	ac03      	add	r4, sp, #12
 80a28a6:	9308      	str	r3, [sp, #32]
 80a28a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a28aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a28ac:	6823      	ldr	r3, [r4, #0]
 80a28ae:	4642      	mov	r2, r8
 80a28b0:	702b      	strb	r3, [r5, #0]
 80a28b2:	a908      	add	r1, sp, #32
 80a28b4:	463b      	mov	r3, r7
 80a28b6:	4630      	mov	r0, r6
 80a28b8:	47c8      	blx	r9
        }
        else
            DEBUG("unable to get IP for hostname");
      }
      return rv;
}
 80a28ba:	b00f      	add	sp, #60	; 0x3c
 80a28bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a28c0:	080a7fd8 	.word	0x080a7fd8
 80a28c4:	080a7dc4 	.word	0x080a7dc4

080a28c8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.30>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
 80a28c8:	b510      	push	{r4, lr}
 80a28ca:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
 80a28cc:	6803      	ldr	r3, [r0, #0]
 80a28ce:	689b      	ldr	r3, [r3, #8]
 80a28d0:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a28d2:	68a3      	ldr	r3, [r4, #8]
 80a28d4:	3b01      	subs	r3, #1
 80a28d6:	60a3      	str	r3, [r4, #8]
 80a28d8:	b92b      	cbnz	r3, 80a28e6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.30+0x1e>
            _M_destroy();
 80a28da:	6823      	ldr	r3, [r4, #0]
 80a28dc:	4620      	mov	r0, r4
        }
    }
 80a28de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
 80a28e2:	68db      	ldr	r3, [r3, #12]
 80a28e4:	4718      	bx	r3
 80a28e6:	bd10      	pop	{r4, pc}

080a28e8 <_ZN9TCPClient8remoteIPEv>:
{
   return (status()!=0);
}

IPAddress TCPClient::remoteIP()
{
 80a28e8:	b570      	push	{r4, r5, r6, lr}
 80a28ea:	4604      	mov	r4, r0
 80a28ec:	4606      	mov	r6, r0
 80a28ee:	694d      	ldr	r5, [r1, #20]
 80a28f0:	4b04      	ldr	r3, [pc, #16]	; (80a2904 <_ZN9TCPClient8remoteIPEv+0x1c>)
 80a28f2:	358c      	adds	r5, #140	; 0x8c
 80a28f4:	f844 3b04 	str.w	r3, [r4], #4
 80a28f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a28fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a28fc:	682b      	ldr	r3, [r5, #0]
    return d_->remoteIP;
}
 80a28fe:	4630      	mov	r0, r6
 80a2900:	7023      	strb	r3, [r4, #0]
 80a2902:	bd70      	pop	{r4, r5, r6, pc}
 80a2904:	080a7dc4 	.word	0x080a7dc4

080a2908 <_ZN9TCPClient4peekEv>:
        }
        return read;
}

int TCPClient::peek()
{
 80a2908:	b510      	push	{r4, lr}
 80a290a:	6943      	ldr	r3, [r0, #20]
 80a290c:	4604      	mov	r4, r0
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80a290e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a2912:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a2916:	429a      	cmp	r2, r3
 80a2918:	d005      	beq.n	80a2926 <_ZN9TCPClient4peekEv+0x1e>
 80a291a:	6962      	ldr	r2, [r4, #20]
 80a291c:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a2920:	4413      	add	r3, r2
 80a2922:	7918      	ldrb	r0, [r3, #4]
 80a2924:	bd10      	pop	{r4, pc}
 80a2926:	6803      	ldr	r3, [r0, #0]
 80a2928:	691b      	ldr	r3, [r3, #16]
 80a292a:	4798      	blx	r3
 80a292c:	2800      	cmp	r0, #0
 80a292e:	d1f4      	bne.n	80a291a <_ZN9TCPClient4peekEv+0x12>
 80a2930:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80a2934:	bd10      	pop	{r4, pc}

080a2936 <_ZN9TCPClient4readEv>:
    avail = bufferCount();
    return avail;
}

int TCPClient::read()
{
 80a2936:	b510      	push	{r4, lr}
 80a2938:	6943      	ldr	r3, [r0, #20]
 80a293a:	4604      	mov	r4, r0
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80a293c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a2940:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a2944:	429a      	cmp	r2, r3
 80a2946:	d008      	beq.n	80a295a <_ZN9TCPClient4readEv+0x24>
 80a2948:	6962      	ldr	r2, [r4, #20]
 80a294a:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a294e:	1c59      	adds	r1, r3, #1
 80a2950:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
 80a2954:	4413      	add	r3, r2
 80a2956:	7918      	ldrb	r0, [r3, #4]
 80a2958:	bd10      	pop	{r4, pc}
 80a295a:	6803      	ldr	r3, [r0, #0]
 80a295c:	691b      	ldr	r3, [r3, #16]
 80a295e:	4798      	blx	r3
 80a2960:	2800      	cmp	r0, #0
 80a2962:	d1f1      	bne.n	80a2948 <_ZN9TCPClient4readEv+0x12>
 80a2964:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80a2968:	bd10      	pop	{r4, pc}

080a296a <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
 80a296a:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
 80a296c:	6904      	ldr	r4, [r0, #16]
                offset(0),
                total(0) {
        }

        ~Data() {
            if (socket_handle_valid(sock)) {
 80a296e:	6820      	ldr	r0, [r4, #0]
 80a2970:	f7ff f846 	bl	80a1a00 <socket_handle_valid>
 80a2974:	b110      	cbz	r0, 80a297c <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x12>
                socket_close(sock);
 80a2976:	6820      	ldr	r0, [r4, #0]
 80a2978:	f7ff f862 	bl	80a1a40 <socket_close>
 80a297c:	4620      	mov	r0, r4
 80a297e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a2982:	f7fd bb8e 	b.w	80a00a2 <_ZdlPv>

080a2986 <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a2986:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2988:	6943      	ldr	r3, [r0, #20]
 80a298a:	4617      	mov	r7, r2
        int read = -1;
        if (bufferCount() || available())
 80a298c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a2990:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a2994:	4605      	mov	r5, r0
        int read = -1;
        if (bufferCount() || available())
 80a2996:	429a      	cmp	r2, r3
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a2998:	460e      	mov	r6, r1
        int read = -1;
        if (bufferCount() || available())
 80a299a:	d106      	bne.n	80a29aa <_ZN9TCPClient4readEPhj+0x24>
 80a299c:	6803      	ldr	r3, [r0, #0]
 80a299e:	691b      	ldr	r3, [r3, #16]
 80a29a0:	4798      	blx	r3
 80a29a2:	b910      	cbnz	r0, 80a29aa <_ZN9TCPClient4readEPhj+0x24>
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
 80a29a4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80a29a8:	e014      	b.n	80a29d4 <_ZN9TCPClient4readEPhj+0x4e>
 80a29aa:	6969      	ldr	r1, [r5, #20]
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a29ac:	4630      	mov	r0, r6
    return ret;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 80a29ae:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
 80a29b2:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a29b6:	4419      	add	r1, r3
    return ret;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 80a29b8:	1ae4      	subs	r4, r4, r3
int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
 80a29ba:	42bc      	cmp	r4, r7
 80a29bc:	bf28      	it	cs
 80a29be:	463c      	movcs	r4, r7
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a29c0:	3104      	adds	r1, #4
 80a29c2:	4622      	mov	r2, r4
 80a29c4:	f002 f978 	bl	80a4cb8 <memcpy>
 80a29c8:	696a      	ldr	r2, [r5, #20]
          d_->offset += read;
 80a29ca:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a29ce:	4423      	add	r3, r4
 80a29d0:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
        }
        return read;
}
 80a29d4:	4620      	mov	r0, r4
 80a29d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a29d8 <_ZN9TCPClient12flush_bufferEv>:
{
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer()
{
 80a29d8:	6942      	ldr	r2, [r0, #20]
  d_->offset = 0;
 80a29da:	2300      	movs	r3, #0
 80a29dc:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
 80a29e0:	6942      	ldr	r2, [r0, #20]
  d_->total = 0;
 80a29e2:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
 80a29e6:	4770      	bx	lr

080a29e8 <_ZN9TCPClient9availableEv>:
{
  return d_->total - d_->offset;
}

int TCPClient::available()
{
 80a29e8:	b538      	push	{r3, r4, r5, lr}
 80a29ea:	6942      	ldr	r2, [r0, #20]
 80a29ec:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
 80a29ee:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a29f2:	b11b      	cbz	r3, 80a29fc <_ZN9TCPClient9availableEv+0x14>
 80a29f4:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 80a29f8:	429a      	cmp	r2, r3
 80a29fa:	d00b      	beq.n	80a2a14 <_ZN9TCPClient9availableEv+0x2c>
    }


    static NetworkClass& from(network_interface_t nif) {
        // hard-code for now until multiple-networks are implemented.
        return Network;
 80a29fc:	4b18      	ldr	r3, [pc, #96]	; (80a2a60 <_ZN9TCPClient9availableEv+0x78>)
 80a29fe:	6818      	ldr	r0, [r3, #0]
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 80a2a00:	6803      	ldr	r3, [r0, #0]
 80a2a02:	681b      	ldr	r3, [r3, #0]
 80a2a04:	4798      	blx	r3
 80a2a06:	b318      	cbz	r0, 80a2a50 <_ZN9TCPClient9availableEv+0x68>
 80a2a08:	6963      	ldr	r3, [r4, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a2a0a:	6818      	ldr	r0, [r3, #0]
 80a2a0c:	f7fe fff8 	bl	80a1a00 <socket_handle_valid>
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 80a2a10:	b918      	cbnz	r0, 80a2a1a <_ZN9TCPClient9availableEv+0x32>
 80a2a12:	e01d      	b.n	80a2a50 <_ZN9TCPClient9availableEv+0x68>
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
 80a2a14:	f7ff ffe0 	bl	80a29d8 <_ZN9TCPClient12flush_bufferEv>
 80a2a18:	e7f0      	b.n	80a29fc <_ZN9TCPClient9availableEv+0x14>
 80a2a1a:	6960      	ldr	r0, [r4, #20]
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
    {
        // Have room
        if ( d_->total < arraySize(d_->buffer))
 80a2a1c:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
 80a2a20:	297f      	cmp	r1, #127	; 0x7f
 80a2a22:	d815      	bhi.n	80a2a50 <_ZN9TCPClient9availableEv+0x68>
        {
            int ret = socket_receive(d_->sock, d_->buffer + d_->total , arraySize(d_->buffer)-d_->total, 0);
 80a2a24:	1d05      	adds	r5, r0, #4
 80a2a26:	f1c1 0280 	rsb	r2, r1, #128	; 0x80
 80a2a2a:	2300      	movs	r3, #0
 80a2a2c:	4429      	add	r1, r5
 80a2a2e:	6800      	ldr	r0, [r0, #0]
 80a2a30:	f7fe fffe 	bl	80a1a30 <socket_receive>
            if (ret > 0)
 80a2a34:	2800      	cmp	r0, #0
 80a2a36:	dd0b      	ble.n	80a2a50 <_ZN9TCPClient9availableEv+0x68>
 80a2a38:	6963      	ldr	r3, [r4, #20]
            {
                DEBUG("recv(=%d)",ret);
                if (d_->total == 0) d_->offset = 0;
 80a2a3a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a2a3e:	b90a      	cbnz	r2, 80a2a44 <_ZN9TCPClient9availableEv+0x5c>
 80a2a40:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 80a2a44:	6962      	ldr	r2, [r4, #20]
                d_->total += ret;
 80a2a46:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a2a4a:	4418      	add	r0, r3
 80a2a4c:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
 80a2a50:	6962      	ldr	r2, [r4, #20]
            }
        } // Have Space
    } // WiFi.ready() && isOpen(d_->sock)
    avail = bufferCount();
    return avail;
 80a2a52:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a2a56:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
 80a2a5a:	1a18      	subs	r0, r3, r0
}
 80a2a5c:	bd38      	pop	{r3, r4, r5, pc}
 80a2a5e:	bf00      	nop
 80a2a60:	080a7fd8 	.word	0x080a7fd8

080a2a64 <_ZN9TCPClient4stopEv>:
{
}


void TCPClient::stop()
{
 80a2a64:	b538      	push	{r3, r4, r5, lr}
  // This log line pollutes the log too much
  // DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 80a2a66:	6943      	ldr	r3, [r0, #20]
{
}


void TCPClient::stop()
{
 80a2a68:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a2a6a:	6818      	ldr	r0, [r3, #0]
 80a2a6c:	f7fe ffc8 	bl	80a1a00 <socket_handle_valid>
void TCPClient::stop()
{
  // This log line pollutes the log too much
  // DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 80a2a70:	b118      	cbz	r0, 80a2a7a <_ZN9TCPClient4stopEv+0x16>
      socket_close(d_->sock);
 80a2a72:	6963      	ldr	r3, [r4, #20]
 80a2a74:	6818      	ldr	r0, [r3, #0]
 80a2a76:	f7fe ffe3 	bl	80a1a40 <socket_close>
 80a2a7a:	6965      	ldr	r5, [r4, #20]
  d_->sock = socket_handle_invalid();
 80a2a7c:	f7fe ffe8 	bl	80a1a50 <socket_handle_invalid>
 80a2a80:	6028      	str	r0, [r5, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a2a82:	6960      	ldr	r0, [r4, #20]
 80a2a84:	2211      	movs	r2, #17
 80a2a86:	2100      	movs	r1, #0
 80a2a88:	308c      	adds	r0, #140	; 0x8c
 80a2a8a:	f002 f920 	bl	80a4cce <memset>
  d_->remoteIP.clear();
  flush_buffer();
 80a2a8e:	4620      	mov	r0, r4
}
 80a2a90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  if (isOpen(d_->sock))
      socket_close(d_->sock);
  d_->sock = socket_handle_invalid();
  d_->remoteIP.clear();
  flush_buffer();
 80a2a94:	f7ff bfa0 	b.w	80a29d8 <_ZN9TCPClient12flush_bufferEv>

080a2a98 <_ZN9TCPClientC1Em>:

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 80a2a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2a9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2a9e:	6083      	str	r3, [r0, #8]
        d_(std::make_shared<Data>(sock))
 80a2aa0:	4b17      	ldr	r3, [pc, #92]	; (80a2b00 <_ZN9TCPClientC1Em+0x68>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a2aa2:	2600      	movs	r6, #0
 80a2aa4:	6046      	str	r6, [r0, #4]
 80a2aa6:	6003      	str	r3, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
 80a2aa8:	6146      	str	r6, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
 80a2aaa:	6186      	str	r6, [r0, #24]

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 80a2aac:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a2aae:	20a0      	movs	r0, #160	; 0xa0
 80a2ab0:	460f      	mov	r7, r1
 80a2ab2:	f7fd faf2 	bl	80a009a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80a2ab6:	4605      	mov	r5, r0
 80a2ab8:	b138      	cbz	r0, 80a2aca <_ZN9TCPClientC1Em+0x32>
        IPAddress remoteIP;

        explicit Data(sock_handle_t sock) :
                sock(sock),
                offset(0),
                total(0) {
 80a2aba:	6007      	str	r7, [r0, #0]
 80a2abc:	f8a0 6084 	strh.w	r6, [r0, #132]	; 0x84
 80a2ac0:	f8a0 6086 	strh.w	r6, [r0, #134]	; 0x86
 80a2ac4:	3088      	adds	r0, #136	; 0x88
 80a2ac6:	f7ff fc5f 	bl	80a2388 <_ZN9IPAddressC1Ev>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a2aca:	2014      	movs	r0, #20
 80a2acc:	f7fd fae5 	bl	80a009a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 80a2ad0:	4603      	mov	r3, r0
 80a2ad2:	b128      	cbz	r0, 80a2ae0 <_ZN9TCPClientC1Em+0x48>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a2ad4:	2201      	movs	r2, #1
 80a2ad6:	6042      	str	r2, [r0, #4]
 80a2ad8:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 80a2ada:	4a0a      	ldr	r2, [pc, #40]	; (80a2b04 <_ZN9TCPClientC1Em+0x6c>)
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
 80a2adc:	6105      	str	r5, [r0, #16]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 80a2ade:	6002      	str	r2, [r0, #0]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a2ae0:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
 80a2ae2:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a2ae4:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a2ae6:	b128      	cbz	r0, 80a2af4 <_ZN9TCPClientC1Em+0x5c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a2ae8:	6843      	ldr	r3, [r0, #4]
 80a2aea:	3b01      	subs	r3, #1
 80a2aec:	6043      	str	r3, [r0, #4]
 80a2aee:	b90b      	cbnz	r3, 80a2af4 <_ZN9TCPClientC1Em+0x5c>
 80a2af0:	f7ff feea 	bl	80a28c8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.30>
        d_(std::make_shared<Data>(sock))
{
  flush_buffer();
 80a2af4:	4620      	mov	r0, r4
 80a2af6:	f7ff ff6f 	bl	80a29d8 <_ZN9TCPClient12flush_bufferEv>
}
 80a2afa:	4620      	mov	r0, r4
 80a2afc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a2afe:	bf00      	nop
 80a2b00:	080a7ee4 	.word	0x080a7ee4
 80a2b04:	080a7ec8 	.word	0x080a7ec8

080a2b08 <_ZN9TCPClientC1Ev>:
static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
}

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
 80a2b08:	b510      	push	{r4, lr}
 80a2b0a:	4604      	mov	r4, r0
 80a2b0c:	f7fe ffa0 	bl	80a1a50 <socket_handle_invalid>
 80a2b10:	4601      	mov	r1, r0
 80a2b12:	4620      	mov	r0, r4
 80a2b14:	f7ff ffc0 	bl	80a2a98 <_ZN9TCPClientC1Em>
{
}
 80a2b18:	4620      	mov	r0, r4
 80a2b1a:	bd10      	pop	{r4, pc}

080a2b1c <_ZN9TCPClient7connectE9IPAddresstm>:
      }
      return rv;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a2b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2b20:	4698      	mov	r8, r3
    stop();
 80a2b22:	6803      	ldr	r3, [r0, #0]
      }
      return rv;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a2b24:	b08a      	sub	sp, #40	; 0x28
    stop();
 80a2b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      }
      return rv;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a2b28:	4606      	mov	r6, r0
 80a2b2a:	460c      	mov	r4, r1
 80a2b2c:	4615      	mov	r5, r2
    stop();
 80a2b2e:	4798      	blx	r3
 80a2b30:	4b2f      	ldr	r3, [pc, #188]	; (80a2bf0 <_ZN9TCPClient7connectE9IPAddresstm+0xd4>)
 80a2b32:	6818      	ldr	r0, [r3, #0]
        int connected = 0;
        if(Network.from(nif).ready())
 80a2b34:	6803      	ldr	r3, [r0, #0]
 80a2b36:	681b      	ldr	r3, [r3, #0]
 80a2b38:	4798      	blx	r3
 80a2b3a:	2800      	cmp	r0, #0
 80a2b3c:	d055      	beq.n	80a2bea <_ZN9TCPClient7connectE9IPAddresstm+0xce>
        {
          sockaddr_t tSocketAddr;
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a2b3e:	462b      	mov	r3, r5
 80a2b40:	2206      	movs	r2, #6
 80a2b42:	2101      	movs	r1, #1
 80a2b44:	f8cd 8000 	str.w	r8, [sp]
 80a2b48:	2002      	movs	r0, #2
 80a2b4a:	6977      	ldr	r7, [r6, #20]
 80a2b4c:	f7fe ff60 	bl	80a1a10 <socket_create>
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a2b50:	2320      	movs	r3, #32
    stop();
        int connected = 0;
        if(Network.from(nif).ready())
        {
          sockaddr_t tSocketAddr;
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a2b52:	6038      	str	r0, [r7, #0]
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a2b54:	9302      	str	r3, [sp, #8]
 80a2b56:	2700      	movs	r7, #0
 80a2b58:	6973      	ldr	r3, [r6, #20]
 80a2b5a:	9703      	str	r7, [sp, #12]
 80a2b5c:	681b      	ldr	r3, [r3, #0]
 80a2b5e:	2001      	movs	r0, #1
 80a2b60:	9301      	str	r3, [sp, #4]
 80a2b62:	4b24      	ldr	r3, [pc, #144]	; (80a2bf4 <_ZN9TCPClient7connectE9IPAddresstm+0xd8>)
 80a2b64:	aa02      	add	r2, sp, #8
 80a2b66:	9300      	str	r3, [sp, #0]
 80a2b68:	4923      	ldr	r1, [pc, #140]	; (80a2bf8 <_ZN9TCPClient7connectE9IPAddresstm+0xdc>)
 80a2b6a:	463b      	mov	r3, r7
 80a2b6c:	f7ff f800 	bl	80a1b70 <log_message>

          if (socket_handle_valid(d_->sock))
 80a2b70:	6973      	ldr	r3, [r6, #20]
 80a2b72:	6818      	ldr	r0, [r3, #0]
 80a2b74:	f7fe ff44 	bl	80a1a00 <socket_handle_valid>
 80a2b78:	2800      	cmp	r0, #0
 80a2b7a:	d036      	beq.n	80a2bea <_ZN9TCPClient7connectE9IPAddresstm+0xce>
          {
            flush_buffer();
 80a2b7c:	4630      	mov	r0, r6
 80a2b7e:	f7ff ff2b 	bl	80a29d8 <_ZN9TCPClient12flush_bufferEv>

            tSocketAddr.sa_family = AF_INET;
 80a2b82:	2302      	movs	r3, #2
 80a2b84:	f8ad 3008 	strh.w	r3, [sp, #8]

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a2b88:	0a2b      	lsrs	r3, r5, #8
 80a2b8a:	f88d 300a 	strb.w	r3, [sp, #10]
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a2b8e:	79e3      	ldrb	r3, [r4, #7]
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a2b90:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a2b94:	f88d 300c 	strb.w	r3, [sp, #12]
            tSocketAddr.sa_data[3] = ip[1];
 80a2b98:	79a3      	ldrb	r3, [r4, #6]
            flush_buffer();

            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);
 80a2b9a:	f88d 500b 	strb.w	r5, [sp, #11]

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
            tSocketAddr.sa_data[3] = ip[1];
 80a2b9e:	f88d 300d 	strb.w	r3, [sp, #13]
            tSocketAddr.sa_data[4] = ip[2];
 80a2ba2:	7963      	ldrb	r3, [r4, #5]
 80a2ba4:	f88d 300e 	strb.w	r3, [sp, #14]
            tSocketAddr.sa_data[5] = ip[3];
 80a2ba8:	f814 3f04 	ldrb.w	r3, [r4, #4]!
 80a2bac:	f88d 300f 	strb.w	r3, [sp, #15]


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a2bb0:	f7fe ffce 	bl	80a1b50 <HAL_NET_SetNetWatchDog>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a2bb4:	6973      	ldr	r3, [r6, #20]
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a2bb6:	4605      	mov	r5, r0
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a2bb8:	2210      	movs	r2, #16
 80a2bba:	a902      	add	r1, sp, #8
 80a2bbc:	6818      	ldr	r0, [r3, #0]
 80a2bbe:	f7fe ff2f 	bl	80a1a20 <socket_connect>
 80a2bc2:	4680      	mov	r8, r0
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
 80a2bc4:	4628      	mov	r0, r5
 80a2bc6:	f7fe ffc3 	bl	80a1b50 <HAL_NET_SetNetWatchDog>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a2bca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a2bcc:	6975      	ldr	r5, [r6, #20]
 80a2bce:	358c      	adds	r5, #140	; 0x8c
 80a2bd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a2bd2:	6823      	ldr	r3, [r4, #0]
 80a2bd4:	702b      	strb	r3, [r5, #0]
            d_->remoteIP = ip;
            if(!connected)
 80a2bd6:	f1b8 0f00 	cmp.w	r8, #0
 80a2bda:	d005      	beq.n	80a2be8 <_ZN9TCPClient7connectE9IPAddresstm+0xcc>
            {
                stop();
 80a2bdc:	6833      	ldr	r3, [r6, #0]
 80a2bde:	4630      	mov	r0, r6
 80a2be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a2be2:	4798      	blx	r3
 80a2be4:	4638      	mov	r0, r7
 80a2be6:	e000      	b.n	80a2bea <_ZN9TCPClient7connectE9IPAddresstm+0xce>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
            d_->remoteIP = ip;
            if(!connected)
 80a2be8:	2001      	movs	r0, #1
                stop();
            }
          }
        }
        return connected;
}
 80a2bea:	b00a      	add	sp, #40	; 0x28
 80a2bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a2bf0:	080a7fd8 	.word	0x080a7fd8
 80a2bf4:	080a7f2f 	.word	0x080a7f2f
 80a2bf8:	080a7f28 	.word	0x080a7f28

080a2bfc <_ZN9TCPClient6statusEv>:
  }
  return rv;
}

uint8_t TCPClient::status()
{
 80a2bfc:	b510      	push	{r4, lr}
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a2bfe:	6943      	ldr	r3, [r0, #20]
  }
  return rv;
}

uint8_t TCPClient::status()
{
 80a2c00:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a2c02:	6818      	ldr	r0, [r3, #0]
 80a2c04:	f7fe fefc 	bl	80a1a00 <socket_handle_valid>
  return rv;
}

uint8_t TCPClient::status()
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a2c08:	b908      	cbnz	r0, 80a2c0e <_ZN9TCPClient6statusEv+0x12>
 80a2c0a:	2000      	movs	r0, #0
 80a2c0c:	bd10      	pop	{r4, pc}
 80a2c0e:	4b07      	ldr	r3, [pc, #28]	; (80a2c2c <_ZN9TCPClient6statusEv+0x30>)
 80a2c10:	6818      	ldr	r0, [r3, #0]
 80a2c12:	6803      	ldr	r3, [r0, #0]
 80a2c14:	681b      	ldr	r3, [r3, #0]
 80a2c16:	4798      	blx	r3
 80a2c18:	2800      	cmp	r0, #0
 80a2c1a:	d0f6      	beq.n	80a2c0a <_ZN9TCPClient6statusEv+0xe>
 80a2c1c:	6963      	ldr	r3, [r4, #20]
 80a2c1e:	6818      	ldr	r0, [r3, #0]
 80a2c20:	f7fe fee6 	bl	80a19f0 <socket_active_status>
 80a2c24:	fab0 f080 	clz	r0, r0
 80a2c28:	0940      	lsrs	r0, r0, #5
}
 80a2c2a:	bd10      	pop	{r4, pc}
 80a2c2c:	080a7fd8 	.word	0x080a7fd8

080a2c30 <_ZN9TCPClient5writeEPKhjm>:
{
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout)
{
 80a2c30:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
 80a2c34:	2500      	movs	r5, #0
 80a2c36:	6045      	str	r5, [r0, #4]
 80a2c38:	4604      	mov	r4, r0
 80a2c3a:	460e      	mov	r6, r1
 80a2c3c:	4617      	mov	r7, r2
 80a2c3e:	4698      	mov	r8, r3
    clearWriteError();
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a2c40:	f7ff ffdc 	bl	80a2bfc <_ZN9TCPClient6statusEv>
 80a2c44:	b160      	cbz	r0, 80a2c60 <_ZN9TCPClient5writeEPKhjm+0x30>
 80a2c46:	6960      	ldr	r0, [r4, #20]
 80a2c48:	9501      	str	r5, [sp, #4]
 80a2c4a:	f8cd 8000 	str.w	r8, [sp]
 80a2c4e:	462b      	mov	r3, r5
 80a2c50:	463a      	mov	r2, r7
 80a2c52:	4631      	mov	r1, r6
 80a2c54:	6800      	ldr	r0, [r0, #0]
 80a2c56:	f7fe ff03 	bl	80a1a60 <socket_send_ex>
    if (ret < 0) {
 80a2c5a:	2800      	cmp	r0, #0
 80a2c5c:	da03      	bge.n	80a2c66 <_ZN9TCPClient5writeEPKhjm+0x36>
 80a2c5e:	e001      	b.n	80a2c64 <_ZN9TCPClient5writeEPKhjm+0x34>
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout)
{
    clearWriteError();
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a2c60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a2c64:	6060      	str	r0, [r4, #4]

    /*
     * FIXME: We should not be returning negative numbers here
     */
    return ret;
}
 80a2c66:	b002      	add	sp, #8
 80a2c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a2c6c <_ZN9TCPClient9connectedEv>:
  d_->remoteIP.clear();
  flush_buffer();
}

uint8_t TCPClient::connected()
{
 80a2c6c:	b538      	push	{r3, r4, r5, lr}
 80a2c6e:	4604      	mov	r4, r0
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 80a2c70:	f7ff ffc4 	bl	80a2bfc <_ZN9TCPClient6statusEv>
 80a2c74:	bb00      	cbnz	r0, 80a2cb8 <_ZN9TCPClient9connectedEv+0x4c>
 80a2c76:	6963      	ldr	r3, [r4, #20]
 80a2c78:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 80a2c7c:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a2c80:	4291      	cmp	r1, r2
 80a2c82:	d119      	bne.n	80a2cb8 <_ZN9TCPClient9connectedEv+0x4c>

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a2c84:	6818      	ldr	r0, [r3, #0]
 80a2c86:	f7fe febb 	bl	80a1a00 <socket_handle_valid>
uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80a2c8a:	b128      	cbz	r0, 80a2c98 <_ZN9TCPClient9connectedEv+0x2c>
 80a2c8c:	6963      	ldr	r3, [r4, #20]
 80a2c8e:	6818      	ldr	r0, [r3, #0]
 80a2c90:	f7fe feae 	bl	80a19f0 <socket_active_status>
 80a2c94:	2801      	cmp	r0, #1
 80a2c96:	d001      	beq.n	80a2c9c <_ZN9TCPClient9connectedEv+0x30>
}

uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 80a2c98:	2500      	movs	r5, #0
 80a2c9a:	e00e      	b.n	80a2cba <_ZN9TCPClient9connectedEv+0x4e>
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
    {
      rv = available(); // Try CC3000
 80a2c9c:	6823      	ldr	r3, [r4, #0]
 80a2c9e:	4620      	mov	r0, r4
 80a2ca0:	691b      	ldr	r3, [r3, #16]
 80a2ca2:	4798      	blx	r3
 80a2ca4:	2800      	cmp	r0, #0
 80a2ca6:	bf14      	ite	ne
 80a2ca8:	2501      	movne	r5, #1
 80a2caa:	2500      	moveq	r5, #0
      if (!rv) {        // No more Data and CLOSE_WAIT
 80a2cac:	d105      	bne.n	80a2cba <_ZN9TCPClient9connectedEv+0x4e>
          DEBUG("caling Stop No more Data and in CLOSE_WAIT");
          stop();       // Close our side
 80a2cae:	6823      	ldr	r3, [r4, #0]
 80a2cb0:	4620      	mov	r0, r4
 80a2cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a2cb4:	4798      	blx	r3
 80a2cb6:	e000      	b.n	80a2cba <_ZN9TCPClient9connectedEv+0x4e>
 80a2cb8:	2501      	movs	r5, #1
      }
  }
  return rv;
}
 80a2cba:	4628      	mov	r0, r5
 80a2cbc:	bd38      	pop	{r3, r4, r5, pc}

080a2cbe <_ZN9TCPClientcvbEv>:
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
}

TCPClient::operator bool()
{
 80a2cbe:	b508      	push	{r3, lr}
   return (status()!=0);
 80a2cc0:	f7ff ff9c 	bl	80a2bfc <_ZN9TCPClient6statusEv>
}
 80a2cc4:	3000      	adds	r0, #0
 80a2cc6:	bf18      	it	ne
 80a2cc8:	2001      	movne	r0, #1
 80a2cca:	bd08      	pop	{r3, pc}

080a2ccc <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 80a2ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
 80a2cce:	4b14      	ldr	r3, [pc, #80]	; (80a2d20 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 80a2cd0:	4f14      	ldr	r7, [pc, #80]	; (80a2d24 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 80a2cd2:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
 80a2cd4:	4b14      	ldr	r3, [pc, #80]	; (80a2d28 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 80a2cd6:	4406      	add	r6, r0
    unix_time += dst_current_cache;
 80a2cd8:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
 80a2cda:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
 80a2cdc:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
 80a2cde:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 80a2ce0:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 80a2ce2:	d01b      	beq.n	80a2d1c <_ZL22Refresh_UnixTime_Cachel+0x50>
 80a2ce4:	a80a      	add	r0, sp, #40	; 0x28
 80a2ce6:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
 80a2cea:	f001 fee9 	bl	80a4ac0 <localtime>
	calendar_time->tm_year += 1900;
	return *calendar_time;
 80a2cee:	4604      	mov	r4, r0
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 80a2cf0:	6943      	ldr	r3, [r0, #20]
	return *calendar_time;
 80a2cf2:	ad01      	add	r5, sp, #4
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 80a2cf4:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 80a2cf8:	6143      	str	r3, [r0, #20]
	return *calendar_time;
 80a2cfa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a2cfc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a2cfe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a2d00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a2d02:	f8d4 e000 	ldr.w	lr, [r4]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a2d06:	4c09      	ldr	r4, [pc, #36]	; (80a2d2c <_ZL22Refresh_UnixTime_Cachel+0x60>)
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
 80a2d08:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a2d0c:	ad01      	add	r5, sp, #4
 80a2d0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a2d10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a2d12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a2d14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 80a2d16:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a2d18:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
 80a2d1c:	b00b      	add	sp, #44	; 0x2c
 80a2d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a2d20:	200005d8 	.word	0x200005d8
 80a2d24:	200005d4 	.word	0x200005d4
 80a2d28:	200005d0 	.word	0x200005d0
 80a2d2c:	200005a4 	.word	0x200005a4

080a2d30 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
 80a2d30:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 80a2d32:	2000      	movs	r0, #0
 80a2d34:	f7fe ff88 	bl	80a1c48 <spark_sync_time_pending>
 80a2d38:	b128      	cbz	r0, 80a2d46 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a2d3a:	f7fe ff6d 	bl	80a1c18 <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 80a2d3e:	f080 0001 	eor.w	r0, r0, #1
 80a2d42:	b2c0      	uxtb	r0, r0
 80a2d44:	bd08      	pop	{r3, pc}
 80a2d46:	2001      	movs	r0, #1
    }
 80a2d48:	bd08      	pop	{r3, pc}
	...

080a2d4c <_ZN9TimeClass4zoneEf>:
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 80a2d4c:	b510      	push	{r4, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
 80a2d4e:	4909      	ldr	r1, [pc, #36]	; (80a2d74 <_ZN9TimeClass4zoneEf+0x28>)
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 80a2d50:	4604      	mov	r4, r0
	if(GMT_Offset < -12 || GMT_Offset > 14)
 80a2d52:	f001 fc61 	bl	80a4618 <__aeabi_fcmplt>
 80a2d56:	b960      	cbnz	r0, 80a2d72 <_ZN9TimeClass4zoneEf+0x26>
 80a2d58:	4907      	ldr	r1, [pc, #28]	; (80a2d78 <_ZN9TimeClass4zoneEf+0x2c>)
 80a2d5a:	4620      	mov	r0, r4
 80a2d5c:	f001 fc7a 	bl	80a4654 <__aeabi_fcmpgt>
 80a2d60:	b938      	cbnz	r0, 80a2d72 <_ZN9TimeClass4zoneEf+0x26>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
 80a2d62:	4906      	ldr	r1, [pc, #24]	; (80a2d7c <_ZN9TimeClass4zoneEf+0x30>)
 80a2d64:	4620      	mov	r0, r4
 80a2d66:	f001 fab9 	bl	80a42dc <__aeabi_fmul>
 80a2d6a:	f001 fc7d 	bl	80a4668 <__aeabi_f2iz>
 80a2d6e:	4b04      	ldr	r3, [pc, #16]	; (80a2d80 <_ZN9TimeClass4zoneEf+0x34>)
 80a2d70:	6018      	str	r0, [r3, #0]
 80a2d72:	bd10      	pop	{r4, pc}
 80a2d74:	c1400000 	.word	0xc1400000
 80a2d78:	41600000 	.word	0x41600000
 80a2d7c:	45610000 	.word	0x45610000
 80a2d80:	200005d8 	.word	0x200005d8

080a2d84 <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 80a2d84:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
 80a2d86:	4b0e      	ldr	r3, [pc, #56]	; (80a2dc0 <_ZN9TimeClass7timeStrEl+0x3c>)
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 80a2d88:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
 80a2d8a:	681b      	ldr	r3, [r3, #0]
 80a2d8c:	a802      	add	r0, sp, #8
 80a2d8e:	4419      	add	r1, r3
 80a2d90:	4b0c      	ldr	r3, [pc, #48]	; (80a2dc4 <_ZN9TimeClass7timeStrEl+0x40>)
 80a2d92:	681b      	ldr	r3, [r3, #0]
 80a2d94:	4419      	add	r1, r3
 80a2d96:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
 80a2d9a:	f001 fe91 	bl	80a4ac0 <localtime>
        char* ascstr = asctime(calendar_time);
 80a2d9e:	f001 fe3d 	bl	80a4a1c <asctime>
 80a2da2:	4605      	mov	r5, r0
        int len = strlen(ascstr);
 80a2da4:	f002 fd06 	bl	80a57b4 <strlen>
        ascstr[len-1] = 0; // remove final newline
 80a2da8:	2300      	movs	r3, #0
 80a2daa:	4428      	add	r0, r5
 80a2dac:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
 80a2db0:	4629      	mov	r1, r5
 80a2db2:	4620      	mov	r0, r4
 80a2db4:	f7ff fca7 	bl	80a2706 <_ZN6StringC1EPK19__FlashStringHelper>
}
 80a2db8:	4620      	mov	r0, r4
 80a2dba:	b003      	add	sp, #12
 80a2dbc:	bd30      	pop	{r4, r5, pc}
 80a2dbe:	bf00      	nop
 80a2dc0:	200005d8 	.word	0x200005d8
 80a2dc4:	200005d0 	.word	0x200005d0

080a2dc8 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 80a2dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a2dcc:	b0a2      	sub	sp, #136	; 0x88
    char format_str[64];
    strcpy(format_str, format);
 80a2dce:	ac12      	add	r4, sp, #72	; 0x48
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 80a2dd0:	4607      	mov	r7, r0
 80a2dd2:	4689      	mov	r9, r1
    char format_str[64];
    strcpy(format_str, format);
 80a2dd4:	4620      	mov	r0, r4
 80a2dd6:	4611      	mov	r1, r2
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 80a2dd8:	461d      	mov	r5, r3
    char format_str[64];
    strcpy(format_str, format);
 80a2dda:	f001 ffb3 	bl	80a4d44 <strcpy>
    size_t len = strlen(format_str);
 80a2dde:	4620      	mov	r0, r4
 80a2de0:	f002 fce8 	bl	80a57b4 <strlen>
 80a2de4:	4680      	mov	r8, r0

    char time_zone_str[10];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
 80a2de6:	b925      	cbnz	r5, 80a2df2 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2a>
        strcpy(time_zone_str, "Z");
 80a2de8:	4924      	ldr	r1, [pc, #144]	; (80a2e7c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xb4>)
 80a2dea:	a802      	add	r0, sp, #8
 80a2dec:	f001 ffaa 	bl	80a4d44 <strcpy>
 80a2df0:	e013      	b.n	80a2e1a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x52>
    }
    else {
        snprintf(time_zone_str, 10, "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
 80a2df2:	213c      	movs	r1, #60	; 0x3c
 80a2df4:	fb95 f2f1 	sdiv	r2, r5, r1
 80a2df8:	2a00      	cmp	r2, #0
 80a2dfa:	bfb8      	it	lt
 80a2dfc:	4252      	neglt	r2, r2
 80a2dfe:	fb92 f3f1 	sdiv	r3, r2, r1
 80a2e02:	fb01 2213 	mls	r2, r1, r3, r2
 80a2e06:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80a2e0a:	9200      	str	r2, [sp, #0]
 80a2e0c:	fb95 f3f3 	sdiv	r3, r5, r3
 80a2e10:	4a1b      	ldr	r2, [pc, #108]	; (80a2e80 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xb8>)
 80a2e12:	210a      	movs	r1, #10
 80a2e14:	a802      	add	r0, sp, #8
 80a2e16:	f7fe ff57 	bl	80a1cc8 <snprintf>
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 80a2e1a:	4625      	mov	r5, r4
 80a2e1c:	1b2e      	subs	r6, r5, r4
    else {
        snprintf(time_zone_str, 10, "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 80a2e1e:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80a2e22:	45b2      	cmp	sl, r6
 80a2e24:	d91b      	bls.n	80a2e5e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x96>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
 80a2e26:	782b      	ldrb	r3, [r5, #0]
 80a2e28:	2b25      	cmp	r3, #37	; 0x25
 80a2e2a:	d116      	bne.n	80a2e5a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x92>
 80a2e2c:	786b      	ldrb	r3, [r5, #1]
 80a2e2e:	2b7a      	cmp	r3, #122	; 0x7a
 80a2e30:	d113      	bne.n	80a2e5a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x92>
        {
            size_t tzlen = strlen(time_zone_str);
 80a2e32:	a802      	add	r0, sp, #8
 80a2e34:	f002 fcbe 	bl	80a57b4 <strlen>
 80a2e38:	4680      	mov	r8, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
 80a2e3a:	4430      	add	r0, r6
 80a2e3c:	ebc6 020a 	rsb	r2, r6, sl
 80a2e40:	1ca9      	adds	r1, r5, #2
 80a2e42:	4420      	add	r0, r4
 80a2e44:	f001 ff38 	bl	80a4cb8 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
 80a2e48:	4642      	mov	r2, r8
 80a2e4a:	a902      	add	r1, sp, #8
 80a2e4c:	4628      	mov	r0, r5
 80a2e4e:	f001 ff33 	bl	80a4cb8 <memcpy>
            len = strlen(format_str);
 80a2e52:	4620      	mov	r0, r4
 80a2e54:	f002 fcae 	bl	80a57b4 <strlen>
 80a2e58:	4680      	mov	r8, r0
 80a2e5a:	3501      	adds	r5, #1
    else {
        snprintf(time_zone_str, 10, "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 80a2e5c:	e7de      	b.n	80a2e1c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x54>
            len = strlen(format_str);
        }
    }

    char buf[50];
    strftime(buf, 50, format_str, calendar_time);
 80a2e5e:	464b      	mov	r3, r9
 80a2e60:	4622      	mov	r2, r4
 80a2e62:	2132      	movs	r1, #50	; 0x32
 80a2e64:	a805      	add	r0, sp, #20
 80a2e66:	f001 fff1 	bl	80a4e4c <strftime>
    return String(buf);
 80a2e6a:	a905      	add	r1, sp, #20
 80a2e6c:	4638      	mov	r0, r7
 80a2e6e:	f7ff fc4a 	bl	80a2706 <_ZN6StringC1EPK19__FlashStringHelper>
}
 80a2e72:	4638      	mov	r0, r7
 80a2e74:	b022      	add	sp, #136	; 0x88
 80a2e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a2e7a:	bf00      	nop
 80a2e7c:	080a84e5 	.word	0x080a84e5
 80a2e80:	080a7f43 	.word	0x080a7f43

080a2e84 <_ZN9TimeClass6formatElPKc>:
        ascstr[len-1] = 0; // remove final newline
	return String(ascstr);
}

String TimeClass::format(time_t t, const char* format_spec)
{
 80a2e84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a2e86:	4605      	mov	r5, r0
 80a2e88:	9201      	str	r2, [sp, #4]
    if (format_spec==NULL)
 80a2e8a:	461c      	mov	r4, r3
 80a2e8c:	b913      	cbnz	r3, 80a2e94 <_ZN9TimeClass6formatElPKc+0x10>
        format_spec = this->format_spec;
 80a2e8e:	4b12      	ldr	r3, [pc, #72]	; (80a2ed8 <_ZN9TimeClass6formatElPKc+0x54>)
 80a2e90:	681c      	ldr	r4, [r3, #0]

    if (!format_spec || !strcmp(format_spec,TIME_FORMAT_DEFAULT)) {
 80a2e92:	b12c      	cbz	r4, 80a2ea0 <_ZN9TimeClass6formatElPKc+0x1c>
 80a2e94:	4b11      	ldr	r3, [pc, #68]	; (80a2edc <_ZN9TimeClass6formatElPKc+0x58>)
 80a2e96:	4620      	mov	r0, r4
 80a2e98:	6819      	ldr	r1, [r3, #0]
 80a2e9a:	f001 ff49 	bl	80a4d30 <strcmp>
 80a2e9e:	b920      	cbnz	r0, 80a2eaa <_ZN9TimeClass6formatElPKc+0x26>
        return timeStr(t);
 80a2ea0:	9901      	ldr	r1, [sp, #4]
 80a2ea2:	4628      	mov	r0, r5
 80a2ea4:	f7ff ff6e 	bl	80a2d84 <_ZN9TimeClass7timeStrEl>
 80a2ea8:	e013      	b.n	80a2ed2 <_ZN9TimeClass6formatElPKc+0x4e>
    }
    t += time_zone_cache;
 80a2eaa:	4f0d      	ldr	r7, [pc, #52]	; (80a2ee0 <_ZN9TimeClass6formatElPKc+0x5c>)
    t += dst_current_cache;
 80a2eac:	9a01      	ldr	r2, [sp, #4]
 80a2eae:	683b      	ldr	r3, [r7, #0]
 80a2eb0:	4e0c      	ldr	r6, [pc, #48]	; (80a2ee4 <_ZN9TimeClass6formatElPKc+0x60>)
 80a2eb2:	441a      	add	r2, r3
 80a2eb4:	6833      	ldr	r3, [r6, #0]
 80a2eb6:	a802      	add	r0, sp, #8
 80a2eb8:	4413      	add	r3, r2
 80a2eba:	f840 3d04 	str.w	r3, [r0, #-4]!
    tm* calendar_time = localtime(&t);
 80a2ebe:	f001 fdff 	bl	80a4ac0 <localtime>
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
 80a2ec2:	683a      	ldr	r2, [r7, #0]
 80a2ec4:	6833      	ldr	r3, [r6, #0]
 80a2ec6:	4601      	mov	r1, r0
 80a2ec8:	4413      	add	r3, r2
 80a2eca:	4628      	mov	r0, r5
 80a2ecc:	4622      	mov	r2, r4
 80a2ece:	f7ff ff7b 	bl	80a2dc8 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
}
 80a2ed2:	4628      	mov	r0, r5
 80a2ed4:	b003      	add	sp, #12
 80a2ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a2ed8:	200005cc 	.word	0x200005cc
 80a2edc:	20000384 	.word	0x20000384
 80a2ee0:	200005d8 	.word	0x200005d8
 80a2ee4:	200005d0 	.word	0x200005d0

080a2ee8 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 80a2ee8:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
 80a2eea:	2000      	movs	r0, #0
 80a2eec:	f7fe fd0e 	bl	80a190c <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
 80a2ef0:	4604      	mov	r4, r0
 80a2ef2:	b968      	cbnz	r0, 80a2f10 <_ZN9TimeClass7isValidEv+0x28>
        }
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 80a2ef4:	f7fe fe44 	bl	80a1b80 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80a2ef8:	2801      	cmp	r0, #1
 80a2efa:	d10b      	bne.n	80a2f14 <_ZN9TimeClass7isValidEv+0x2c>
 80a2efc:	4620      	mov	r0, r4
 80a2efe:	f7fe fe67 	bl	80a1bd0 <system_thread_get_state>
 80a2f02:	b938      	cbnz	r0, 80a2f14 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
 80a2f04:	f7ff ff14 	bl	80a2d30 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a2f08:	b930      	cbnz	r0, 80a2f18 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
 80a2f0a:	f7fe fe7d 	bl	80a1c08 <spark_process>
 80a2f0e:	e7f9      	b.n	80a2f04 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
 80a2f10:	2001      	movs	r0, #1
 80a2f12:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
 80a2f14:	2000      	movs	r0, #0
 80a2f16:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
 80a2f18:	f7ff ff0a 	bl	80a2d30 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
 80a2f1c:	2000      	movs	r0, #0
 80a2f1e:	f7fe fcf5 	bl	80a190c <HAL_RTC_Time_Is_Valid>
 80a2f22:	3000      	adds	r0, #0
 80a2f24:	bf18      	it	ne
 80a2f26:	2001      	movne	r0, #1
    }
    return rtcstate;
}
 80a2f28:	bd10      	pop	{r4, pc}

080a2f2a <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
 80a2f2a:	b508      	push	{r3, lr}
    (void)isValid();
 80a2f2c:	f7ff ffdc 	bl	80a2ee8 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
 80a2f30:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
 80a2f34:	f7fe bce2 	b.w	80a18fc <HAL_RTC_Get_UnixTime>

080a2f38 <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
 80a2f38:	b508      	push	{r3, lr}
	return hour(now());
 80a2f3a:	f7ff fff6 	bl	80a2f2a <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
 80a2f3e:	f7ff fec5 	bl	80a2ccc <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
 80a2f42:	4b01      	ldr	r3, [pc, #4]	; (80a2f48 <_ZN9TimeClass4hourEv+0x10>)
 80a2f44:	6898      	ldr	r0, [r3, #8]
 80a2f46:	bd08      	pop	{r3, pc}
 80a2f48:	200005a4 	.word	0x200005a4

080a2f4c <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
 80a2f4c:	b508      	push	{r3, lr}
	return minute(now());
 80a2f4e:	f7ff ffec 	bl	80a2f2a <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
 80a2f52:	f7ff febb 	bl	80a2ccc <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
 80a2f56:	4b01      	ldr	r3, [pc, #4]	; (80a2f5c <_ZN9TimeClass6minuteEv+0x10>)
 80a2f58:	6858      	ldr	r0, [r3, #4]
 80a2f5a:	bd08      	pop	{r3, pc}
 80a2f5c:	200005a4 	.word	0x200005a4

080a2f60 <_ZN9TimeClass6secondEv>:
	return calendar_time_cache.tm_min;
}

/* current seconds */
int TimeClass::second()
{
 80a2f60:	b508      	push	{r3, lr}
	return second(now());
 80a2f62:	f7ff ffe2 	bl	80a2f2a <_ZN9TimeClass3nowEv>
}

/* the second for the given time */
int TimeClass::second(time_t t)
{
	Refresh_UnixTime_Cache(t);
 80a2f66:	f7ff feb1 	bl	80a2ccc <_ZL22Refresh_UnixTime_Cachel>

/* current seconds */
int TimeClass::second()
{
	return second(now());
}
 80a2f6a:	4b01      	ldr	r3, [pc, #4]	; (80a2f70 <_ZN9TimeClass6secondEv+0x10>)
 80a2f6c:	6818      	ldr	r0, [r3, #0]
 80a2f6e:	bd08      	pop	{r3, pc}
 80a2f70:	200005a4 	.word	0x200005a4

080a2f74 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a2f74:	4b02      	ldr	r3, [pc, #8]	; (80a2f80 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a2f76:	681a      	ldr	r2, [r3, #0]
 80a2f78:	4b02      	ldr	r3, [pc, #8]	; (80a2f84 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a2f7a:	601a      	str	r2, [r3, #0]
 80a2f7c:	4770      	bx	lr
 80a2f7e:	bf00      	nop
 80a2f80:	20000384 	.word	0x20000384
 80a2f84:	200005cc 	.word	0x200005cc

080a2f88 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a2f88:	4770      	bx	lr

080a2f8a <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a2f8a:	7441      	strb	r1, [r0, #17]
 80a2f8c:	4770      	bx	lr

080a2f8e <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
 80a2f8e:	7c00      	ldrb	r0, [r0, #16]
 80a2f90:	f7fe bda6 	b.w	80a1ae0 <HAL_USART_Available_Data_For_Write>

080a2f94 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
 80a2f94:	7c00      	ldrb	r0, [r0, #16]
 80a2f96:	f7fe bd83 	b.w	80a1aa0 <HAL_USART_Available_Data>

080a2f9a <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
 80a2f9a:	7c00      	ldrb	r0, [r0, #16]
 80a2f9c:	f7fe bd90 	b.w	80a1ac0 <HAL_USART_Peek_Data>

080a2fa0 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
 80a2fa0:	7c00      	ldrb	r0, [r0, #16]
 80a2fa2:	f7fe bd85 	b.w	80a1ab0 <HAL_USART_Read_Data>

080a2fa6 <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a2fa6:	7c00      	ldrb	r0, [r0, #16]
 80a2fa8:	f7fe bd92 	b.w	80a1ad0 <HAL_USART_Flush_Data>

080a2fac <_ZN11USARTSerialD0Ev>:
 80a2fac:	b510      	push	{r4, lr}
 80a2fae:	4604      	mov	r4, r0
 80a2fb0:	f7fd f877 	bl	80a00a2 <_ZdlPv>
 80a2fb4:	4620      	mov	r0, r4
 80a2fb6:	bd10      	pop	{r4, pc}

080a2fb8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a2fb8:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a2fba:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a2fbc:	4604      	mov	r4, r0
 80a2fbe:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a2fc0:	b925      	cbnz	r5, 80a2fcc <_ZN11USARTSerial5writeEh+0x14>
 80a2fc2:	7c00      	ldrb	r0, [r0, #16]
 80a2fc4:	f7fe fd8c 	bl	80a1ae0 <HAL_USART_Available_Data_For_Write>
 80a2fc8:	2800      	cmp	r0, #0
 80a2fca:	dd05      	ble.n	80a2fd8 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a2fcc:	4631      	mov	r1, r6
 80a2fce:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a2fd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a2fd4:	f7fe bd5c 	b.w	80a1a90 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a2fd8:	4628      	mov	r0, r5
 80a2fda:	bd70      	pop	{r4, r5, r6, pc}

080a2fdc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a2fdc:	b510      	push	{r4, lr}
 80a2fde:	4604      	mov	r4, r0
 80a2fe0:	4608      	mov	r0, r1
 80a2fe2:	4611      	mov	r1, r2
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a2fe4:	2200      	movs	r2, #0
 80a2fe6:	6062      	str	r2, [r4, #4]
 80a2fe8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a2fec:	60a2      	str	r2, [r4, #8]
 80a2fee:	4a05      	ldr	r2, [pc, #20]	; (80a3004 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a2ff0:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a2ff2:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a2ff4:	2201      	movs	r2, #1
 80a2ff6:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a2ff8:	461a      	mov	r2, r3
 80a2ffa:	f7fe fd41 	bl	80a1a80 <HAL_USART_Init>
}
 80a2ffe:	4620      	mov	r0, r4
 80a3000:	bd10      	pop	{r4, pc}
 80a3002:	bf00      	nop
 80a3004:	080a7f74 	.word	0x080a7f74

080a3008 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a3008:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a300a:	4d0c      	ldr	r5, [pc, #48]	; (80a303c <_Z22__fetch_global_Serial1v+0x34>)
 80a300c:	6829      	ldr	r1, [r5, #0]
 80a300e:	f011 0401 	ands.w	r4, r1, #1
 80a3012:	d111      	bne.n	80a3038 <_Z22__fetch_global_Serial1v+0x30>
 80a3014:	4628      	mov	r0, r5
 80a3016:	f7fd f848 	bl	80a00aa <__cxa_guard_acquire>
 80a301a:	b168      	cbz	r0, 80a3038 <_Z22__fetch_global_Serial1v+0x30>
 80a301c:	4a08      	ldr	r2, [pc, #32]	; (80a3040 <_Z22__fetch_global_Serial1v+0x38>)
 80a301e:	4621      	mov	r1, r4
 80a3020:	4b08      	ldr	r3, [pc, #32]	; (80a3044 <_Z22__fetch_global_Serial1v+0x3c>)
 80a3022:	4809      	ldr	r0, [pc, #36]	; (80a3048 <_Z22__fetch_global_Serial1v+0x40>)
 80a3024:	f7ff ffda 	bl	80a2fdc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a3028:	4628      	mov	r0, r5
 80a302a:	f7fd f843 	bl	80a00b4 <__cxa_guard_release>
 80a302e:	4a07      	ldr	r2, [pc, #28]	; (80a304c <_Z22__fetch_global_Serial1v+0x44>)
 80a3030:	4907      	ldr	r1, [pc, #28]	; (80a3050 <_Z22__fetch_global_Serial1v+0x48>)
 80a3032:	4805      	ldr	r0, [pc, #20]	; (80a3048 <_Z22__fetch_global_Serial1v+0x40>)
 80a3034:	f000 fa0a 	bl	80a344c <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a3038:	4803      	ldr	r0, [pc, #12]	; (80a3048 <_Z22__fetch_global_Serial1v+0x40>)
 80a303a:	bd38      	pop	{r3, r4, r5, pc}
 80a303c:	20000674 	.word	0x20000674
 80a3040:	20000678 	.word	0x20000678
 80a3044:	200005f0 	.word	0x200005f0
 80a3048:	200005dc 	.word	0x200005dc
 80a304c:	20000478 	.word	0x20000478
 80a3050:	080a2f89 	.word	0x080a2f89

080a3054 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a3054:	7441      	strb	r1, [r0, #17]
 80a3056:	4770      	bx	lr

080a3058 <_ZN9USBSerialD1Ev>:
#include "spark_wiring_platform.h"
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"

class USBSerial : public Stream
 80a3058:	4770      	bx	lr

080a305a <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
 80a305a:	2100      	movs	r1, #0
 80a305c:	7c00      	ldrb	r0, [r0, #16]
 80a305e:	f7fe bd5f 	b.w	80a1b20 <HAL_USB_USART_Receive_Data>

080a3062 <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
 80a3062:	2101      	movs	r1, #1
 80a3064:	7c00      	ldrb	r0, [r0, #16]
 80a3066:	f7fe bd5b 	b.w	80a1b20 <HAL_USB_USART_Receive_Data>

080a306a <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
 80a306a:	7c00      	ldrb	r0, [r0, #16]
 80a306c:	f7fe bd50 	b.w	80a1b10 <HAL_USB_USART_Available_Data_For_Write>

080a3070 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
 80a3070:	7c00      	ldrb	r0, [r0, #16]
 80a3072:	f7fe bd45 	b.w	80a1b00 <HAL_USB_USART_Available_Data>

080a3076 <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
 80a3076:	b538      	push	{r3, r4, r5, lr}
 80a3078:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a307a:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
 80a307c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a307e:	f7fe fd47 	bl	80a1b10 <HAL_USB_USART_Available_Data_For_Write>
 80a3082:	2800      	cmp	r0, #0
 80a3084:	dc01      	bgt.n	80a308a <_ZN9USBSerial5writeEh+0x14>
 80a3086:	7c60      	ldrb	r0, [r4, #17]
 80a3088:	b120      	cbz	r0, 80a3094 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
 80a308a:	4629      	mov	r1, r5
 80a308c:	7c20      	ldrb	r0, [r4, #16]
 80a308e:	f7fe fd4f 	bl	80a1b30 <HAL_USB_USART_Send_Data>
    return 1;
 80a3092:	2001      	movs	r0, #1
  }
  return 0;
}
 80a3094:	bd38      	pop	{r3, r4, r5, pc}

080a3096 <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a3096:	7c00      	ldrb	r0, [r0, #16]
 80a3098:	f7fe bd52 	b.w	80a1b40 <HAL_USB_USART_Flush_Data>

080a309c <_ZN9USBSerialD0Ev>:
 80a309c:	b510      	push	{r4, lr}
 80a309e:	4604      	mov	r4, r0
 80a30a0:	f7fc ffff 	bl	80a00a2 <_ZdlPv>
 80a30a4:	4620      	mov	r0, r4
 80a30a6:	bd10      	pop	{r4, pc}

080a30a8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a30a8:	b510      	push	{r4, lr}
 80a30aa:	4604      	mov	r4, r0
 80a30ac:	2300      	movs	r3, #0
 80a30ae:	6063      	str	r3, [r4, #4]
 80a30b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a30b4:	60a3      	str	r3, [r4, #8]
 80a30b6:	4b05      	ldr	r3, [pc, #20]	; (80a30cc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a30b8:	4608      	mov	r0, r1
 80a30ba:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a30bc:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a30be:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a30c0:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a30c2:	4611      	mov	r1, r2
 80a30c4:	f7fe fd14 	bl	80a1af0 <HAL_USB_USART_Init>
}
 80a30c8:	4620      	mov	r0, r4
 80a30ca:	bd10      	pop	{r4, pc}
 80a30cc:	080a7fa4 	.word	0x080a7fa4

080a30d0 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a30d0:	b510      	push	{r4, lr}
 80a30d2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a30d4:	2214      	movs	r2, #20
 80a30d6:	2100      	movs	r1, #0
 80a30d8:	f001 fdf9 	bl	80a4cce <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a30dc:	4b05      	ldr	r3, [pc, #20]	; (80a30f4 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a30de:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a30e0:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a30e2:	4b05      	ldr	r3, [pc, #20]	; (80a30f8 <_Z19acquireSerialBufferv+0x28>)
 80a30e4:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a30e6:	f240 1301 	movw	r3, #257	; 0x101
 80a30ea:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a30ec:	2381      	movs	r3, #129	; 0x81
 80a30ee:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a30f0:	bd10      	pop	{r4, pc}
 80a30f2:	bf00      	nop
 80a30f4:	20000781 	.word	0x20000781
 80a30f8:	20000700 	.word	0x20000700

080a30fc <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a30fc:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a30fe:	4d0e      	ldr	r5, [pc, #56]	; (80a3138 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a3100:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a3102:	a801      	add	r0, sp, #4
 80a3104:	f7ff ffe4 	bl	80a30d0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a3108:	6829      	ldr	r1, [r5, #0]
 80a310a:	f011 0401 	ands.w	r4, r1, #1
 80a310e:	d110      	bne.n	80a3132 <_Z16_fetch_usbserialv+0x36>
 80a3110:	4628      	mov	r0, r5
 80a3112:	f7fc ffca 	bl	80a00aa <__cxa_guard_acquire>
 80a3116:	b160      	cbz	r0, 80a3132 <_Z16_fetch_usbserialv+0x36>
 80a3118:	aa01      	add	r2, sp, #4
 80a311a:	4621      	mov	r1, r4
 80a311c:	4807      	ldr	r0, [pc, #28]	; (80a313c <_Z16_fetch_usbserialv+0x40>)
 80a311e:	f7ff ffc3 	bl	80a30a8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a3122:	4628      	mov	r0, r5
 80a3124:	f7fc ffc6 	bl	80a00b4 <__cxa_guard_release>
 80a3128:	4a05      	ldr	r2, [pc, #20]	; (80a3140 <_Z16_fetch_usbserialv+0x44>)
 80a312a:	4906      	ldr	r1, [pc, #24]	; (80a3144 <_Z16_fetch_usbserialv+0x48>)
 80a312c:	4803      	ldr	r0, [pc, #12]	; (80a313c <_Z16_fetch_usbserialv+0x40>)
 80a312e:	f000 f98d 	bl	80a344c <__aeabi_atexit>
	return _usbserial;
}
 80a3132:	4802      	ldr	r0, [pc, #8]	; (80a313c <_Z16_fetch_usbserialv+0x40>)
 80a3134:	b007      	add	sp, #28
 80a3136:	bd30      	pop	{r4, r5, pc}
 80a3138:	200006fc 	.word	0x200006fc
 80a313c:	20000884 	.word	0x20000884
 80a3140:	20000478 	.word	0x20000478
 80a3144:	080a3059 	.word	0x080a3059

080a3148 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a3148:	b510      	push	{r4, lr}
 80a314a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a314c:	2214      	movs	r2, #20
 80a314e:	2100      	movs	r1, #0
 80a3150:	f001 fdbd 	bl	80a4cce <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a3154:	4b05      	ldr	r3, [pc, #20]	; (80a316c <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a3156:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a3158:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a315a:	4b05      	ldr	r3, [pc, #20]	; (80a3170 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a315c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a315e:	f240 1301 	movw	r3, #257	; 0x101
 80a3162:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a3164:	2381      	movs	r3, #129	; 0x81
 80a3166:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a3168:	bd10      	pop	{r4, pc}
 80a316a:	bf00      	nop
 80a316c:	20000934 	.word	0x20000934
 80a3170:	2000089c 	.word	0x2000089c

080a3174 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a3174:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a3176:	4c0e      	ldr	r4, [pc, #56]	; (80a31b0 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a3178:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a317a:	a801      	add	r0, sp, #4
 80a317c:	f7ff ffe4 	bl	80a3148 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a3180:	6823      	ldr	r3, [r4, #0]
 80a3182:	07db      	lsls	r3, r3, #31
 80a3184:	d410      	bmi.n	80a31a8 <_Z17_fetch_usbserial1v+0x34>
 80a3186:	4620      	mov	r0, r4
 80a3188:	f7fc ff8f 	bl	80a00aa <__cxa_guard_acquire>
 80a318c:	b160      	cbz	r0, 80a31a8 <_Z17_fetch_usbserial1v+0x34>
 80a318e:	aa01      	add	r2, sp, #4
 80a3190:	2101      	movs	r1, #1
 80a3192:	4808      	ldr	r0, [pc, #32]	; (80a31b4 <_Z17_fetch_usbserial1v+0x40>)
 80a3194:	f7ff ff88 	bl	80a30a8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a3198:	4620      	mov	r0, r4
 80a319a:	f7fc ff8b 	bl	80a00b4 <__cxa_guard_release>
 80a319e:	4a06      	ldr	r2, [pc, #24]	; (80a31b8 <_Z17_fetch_usbserial1v+0x44>)
 80a31a0:	4906      	ldr	r1, [pc, #24]	; (80a31bc <_Z17_fetch_usbserial1v+0x48>)
 80a31a2:	4804      	ldr	r0, [pc, #16]	; (80a31b4 <_Z17_fetch_usbserial1v+0x40>)
 80a31a4:	f000 f952 	bl	80a344c <__aeabi_atexit>
  return _usbserial1;
}
 80a31a8:	4802      	ldr	r0, [pc, #8]	; (80a31b4 <_Z17_fetch_usbserial1v+0x40>)
 80a31aa:	b006      	add	sp, #24
 80a31ac:	bd10      	pop	{r4, pc}
 80a31ae:	bf00      	nop
 80a31b0:	20000898 	.word	0x20000898
 80a31b4:	20000920 	.word	0x20000920
 80a31b8:	20000478 	.word	0x20000478
 80a31bc:	080a3059 	.word	0x080a3059

080a31c0 <_ZN5spark9WiFiClassD1Ev>:
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
    ~WiFiClass() {}
 80a31c0:	4770      	bx	lr

080a31c2 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a31c2:	2200      	movs	r2, #0
 80a31c4:	4611      	mov	r1, r2
 80a31c6:	4610      	mov	r0, r2
 80a31c8:	f7fe bd4e 	b.w	80a1c68 <network_ready>

080a31cc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    void setIPAddressSource(IPAddressSource source) {
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
 80a31cc:	4803      	ldr	r0, [pc, #12]	; (80a31dc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a31ce:	4b04      	ldr	r3, [pc, #16]	; (80a31e0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x14>)
one second timeout is reached). If the aforementioned "bug" is ever fixed by
TI, no changes need to be made to this function, as it would be implemented
the same way.
*****************************************************************************/

    WiFiClass WiFi;
 80a31d0:	4a04      	ldr	r2, [pc, #16]	; (80a31e4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x18>)
 80a31d2:	4905      	ldr	r1, [pc, #20]	; (80a31e8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x1c>)
 80a31d4:	6003      	str	r3, [r0, #0]
 80a31d6:	f000 b939 	b.w	80a344c <__aeabi_atexit>
 80a31da:	bf00      	nop
 80a31dc:	20000a38 	.word	0x20000a38
 80a31e0:	080a7fd4 	.word	0x080a7fd4
 80a31e4:	20000478 	.word	0x20000478
 80a31e8:	080a31c1 	.word	0x080a31c1

080a31ec <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 80a31ec:	b510      	push	{r4, lr}
 80a31ee:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 80a31f0:	f002 fae0 	bl	80a57b4 <strlen>
 80a31f4:	3801      	subs	r0, #1
 80a31f6:	1823      	adds	r3, r4, r0
 80a31f8:	4620      	mov	r0, r4
	while(i<j){
 80a31fa:	4298      	cmp	r0, r3
 80a31fc:	d206      	bcs.n	80a320c <_Z11str_reversePc+0x20>
		c = *i;
 80a31fe:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 80a3200:	7819      	ldrb	r1, [r3, #0]
 80a3202:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 80a3206:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
 80a320a:	e7f6      	b.n	80a31fa <_Z11str_reversePc+0xe>
 80a320c:	bd10      	pop	{r4, pc}

080a320e <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 80a320e:	b570      	push	{r4, r5, r6, lr}
 80a3210:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 80a3212:	1e91      	subs	r1, r2, #2
 80a3214:	2922      	cmp	r1, #34	; 0x22
 80a3216:	d820      	bhi.n	80a325a <ultoa+0x4c>
 80a3218:	4625      	mov	r5, r4
 80a321a:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 80a321c:	b910      	cbnz	r0, 80a3224 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a321e:	4423      	add	r3, r4
            *ptr++ = '0';
 80a3220:	2230      	movs	r2, #48	; 0x30
 80a3222:	e00e      	b.n	80a3242 <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 80a3224:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 80a3228:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 80a322c:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 80a322e:	2809      	cmp	r0, #9
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
            result.rem = a%radix;
            *ptr = result.rem;
 80a3230:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
                *ptr += '0';
 80a3234:	bf94      	ite	ls
 80a3236:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 80a3238:	3157      	addhi	r1, #87	; 0x57
 80a323a:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
 80a323e:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 80a3240:	e7eb      	b.n	80a321a <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a3242:	4299      	cmp	r1, r3
 80a3244:	d202      	bcs.n	80a324c <ultoa+0x3e>
            *ptr++ = '0';
 80a3246:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a324a:	e7fa      	b.n	80a3242 <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
 80a324c:	2300      	movs	r3, #0
	str_reverse(buffer);
 80a324e:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
 80a3250:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
 80a3252:	f7ff ffcb 	bl	80a31ec <_Z11str_reversePc>
	return buffer;
 80a3256:	4620      	mov	r0, r4
 80a3258:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
 80a325a:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
 80a325c:	bd70      	pop	{r4, r5, r6, pc}
	...

080a3260 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a3260:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a3262:	4b14      	ldr	r3, [pc, #80]	; (80a32b4 <serialEventRun+0x54>)
 80a3264:	b133      	cbz	r3, 80a3274 <serialEventRun+0x14>
 80a3266:	f7ff ff49 	bl	80a30fc <_Z16_fetch_usbserialv>
 80a326a:	6803      	ldr	r3, [r0, #0]
 80a326c:	691b      	ldr	r3, [r3, #16]
 80a326e:	4798      	blx	r3
 80a3270:	2800      	cmp	r0, #0
 80a3272:	dc16      	bgt.n	80a32a2 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a3274:	4b10      	ldr	r3, [pc, #64]	; (80a32b8 <serialEventRun+0x58>)
 80a3276:	b133      	cbz	r3, 80a3286 <serialEventRun+0x26>
 80a3278:	f7ff fec6 	bl	80a3008 <_Z22__fetch_global_Serial1v>
 80a327c:	6803      	ldr	r3, [r0, #0]
 80a327e:	691b      	ldr	r3, [r3, #16]
 80a3280:	4798      	blx	r3
 80a3282:	2800      	cmp	r0, #0
 80a3284:	dc10      	bgt.n	80a32a8 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a3286:	4b0d      	ldr	r3, [pc, #52]	; (80a32bc <serialEventRun+0x5c>)
 80a3288:	b10b      	cbz	r3, 80a328e <serialEventRun+0x2e>
 80a328a:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a328e:	4b0c      	ldr	r3, [pc, #48]	; (80a32c0 <serialEventRun+0x60>)
 80a3290:	b17b      	cbz	r3, 80a32b2 <serialEventRun+0x52>
 80a3292:	f7ff ff6f 	bl	80a3174 <_Z17_fetch_usbserial1v>
 80a3296:	6803      	ldr	r3, [r0, #0]
 80a3298:	691b      	ldr	r3, [r3, #16]
 80a329a:	4798      	blx	r3
 80a329c:	2800      	cmp	r0, #0
 80a329e:	dc06      	bgt.n	80a32ae <serialEventRun+0x4e>
 80a32a0:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a32a2:	f3af 8000 	nop.w
 80a32a6:	e7e5      	b.n	80a3274 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a32a8:	f3af 8000 	nop.w
 80a32ac:	e7eb      	b.n	80a3286 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a32ae:	f3af 8000 	nop.w
 80a32b2:	bd08      	pop	{r3, pc}
	...

080a32c4 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a32c4:	b508      	push	{r3, lr}
	serialEventRun();
 80a32c6:	f7ff ffcb 	bl	80a3260 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a32ca:	f7fe fb0f 	bl	80a18ec <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a32ce:	4b01      	ldr	r3, [pc, #4]	; (80a32d4 <_post_loop+0x10>)
 80a32d0:	6018      	str	r0, [r3, #0]
 80a32d2:	bd08      	pop	{r3, pc}
 80a32d4:	20000a44 	.word	0x20000a44

080a32d8 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a32d8:	4802      	ldr	r0, [pc, #8]	; (80a32e4 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a32da:	4a03      	ldr	r2, [pc, #12]	; (80a32e8 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a32dc:	4903      	ldr	r1, [pc, #12]	; (80a32ec <_Z33system_initialize_user_backup_ramv+0x14>)
 80a32de:	1a12      	subs	r2, r2, r0
 80a32e0:	f001 bcea 	b.w	80a4cb8 <memcpy>
 80a32e4:	40024000 	.word	0x40024000
 80a32e8:	40024004 	.word	0x40024004
 80a32ec:	080a8678 	.word	0x080a8678

080a32f0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a32f0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a32f2:	2300      	movs	r3, #0
 80a32f4:	9300      	str	r3, [sp, #0]
 80a32f6:	461a      	mov	r2, r3
 80a32f8:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a32fc:	f7fe fc7a 	bl	80a1bf4 <system_ctrl_set_result>
}
 80a3300:	b003      	add	sp, #12
 80a3302:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a3308 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a3308:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a330a:	8843      	ldrh	r3, [r0, #2]
 80a330c:	2b0a      	cmp	r3, #10
 80a330e:	d008      	beq.n	80a3322 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a3310:	2b50      	cmp	r3, #80	; 0x50
 80a3312:	d109      	bne.n	80a3328 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a3314:	4b09      	ldr	r3, [pc, #36]	; (80a333c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a3316:	681b      	ldr	r3, [r3, #0]
 80a3318:	b13b      	cbz	r3, 80a332a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a331a:	b003      	add	sp, #12
 80a331c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a3320:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a3322:	f7ff ffe5 	bl	80a32f0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a3326:	e006      	b.n	80a3336 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a3328:	2300      	movs	r3, #0
 80a332a:	9300      	str	r3, [sp, #0]
 80a332c:	461a      	mov	r2, r3
 80a332e:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a3332:	f7fe fc5f 	bl	80a1bf4 <system_ctrl_set_result>
        break;
    }
}
 80a3336:	b003      	add	sp, #12
 80a3338:	f85d fb04 	ldr.w	pc, [sp], #4
 80a333c:	20000a3c 	.word	0x20000a3c

080a3340 <module_user_init_hook>:

void module_user_init_hook()
{
 80a3340:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a3342:	4c10      	ldr	r4, [pc, #64]	; (80a3384 <module_user_init_hook+0x44>)
 80a3344:	4d10      	ldr	r5, [pc, #64]	; (80a3388 <module_user_init_hook+0x48>)
 80a3346:	6823      	ldr	r3, [r4, #0]
 80a3348:	42ab      	cmp	r3, r5
 80a334a:	4b10      	ldr	r3, [pc, #64]	; (80a338c <module_user_init_hook+0x4c>)
 80a334c:	bf0c      	ite	eq
 80a334e:	2201      	moveq	r2, #1
 80a3350:	2200      	movne	r2, #0
 80a3352:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a3354:	d002      	beq.n	80a335c <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a3356:	f7ff ffbf 	bl	80a32d8 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a335a:	6025      	str	r5, [r4, #0]
#endif

    // todo - add a RNG define for that capability
#if defined(STM32F2XX)
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    srand(HAL_RNG_GetRandomNumber());
 80a335c:	f7fe fab6 	bl	80a18cc <HAL_RNG_GetRandomNumber>
 80a3360:	f001 fcbe 	bl	80a4ce0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a3364:	4b0a      	ldr	r3, [pc, #40]	; (80a3390 <module_user_init_hook+0x50>)
 80a3366:	b11b      	cbz	r3, 80a3370 <module_user_init_hook+0x30>
        uint32_t seed = HAL_RNG_GetRandomNumber();
 80a3368:	f7fe fab0 	bl	80a18cc <HAL_RNG_GetRandomNumber>
        random_seed_from_cloud(seed);
 80a336c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a3370:	2100      	movs	r1, #0
 80a3372:	4807      	ldr	r0, [pc, #28]	; (80a3390 <module_user_init_hook+0x50>)
 80a3374:	f7fe fc70 	bl	80a1c58 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a3378:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a337c:	2100      	movs	r1, #0
 80a337e:	4805      	ldr	r0, [pc, #20]	; (80a3394 <module_user_init_hook+0x54>)
 80a3380:	f7fe bc2e 	b.w	80a1be0 <system_ctrl_set_app_request_handler>
 80a3384:	40024000 	.word	0x40024000
 80a3388:	9a271c1e 	.word	0x9a271c1e
 80a338c:	20000a40 	.word	0x20000a40
 80a3390:	00000000 	.word	0x00000000
 80a3394:	080a3309 	.word	0x080a3309

080a3398 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a3398:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a339a:	4d0b      	ldr	r5, [pc, #44]	; (80a33c8 <_Z19__fetch_global_Wirev+0x30>)
 80a339c:	6829      	ldr	r1, [r5, #0]
 80a339e:	f011 0401 	ands.w	r4, r1, #1
 80a33a2:	d10f      	bne.n	80a33c4 <_Z19__fetch_global_Wirev+0x2c>
 80a33a4:	4628      	mov	r0, r5
 80a33a6:	f7fc fe80 	bl	80a00aa <__cxa_guard_acquire>
 80a33aa:	b158      	cbz	r0, 80a33c4 <_Z19__fetch_global_Wirev+0x2c>
 80a33ac:	4621      	mov	r1, r4
 80a33ae:	4807      	ldr	r0, [pc, #28]	; (80a33cc <_Z19__fetch_global_Wirev+0x34>)
 80a33b0:	f7fe ff8e 	bl	80a22d0 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a33b4:	4628      	mov	r0, r5
 80a33b6:	f7fc fe7d 	bl	80a00b4 <__cxa_guard_release>
 80a33ba:	4a05      	ldr	r2, [pc, #20]	; (80a33d0 <_Z19__fetch_global_Wirev+0x38>)
 80a33bc:	4905      	ldr	r1, [pc, #20]	; (80a33d4 <_Z19__fetch_global_Wirev+0x3c>)
 80a33be:	4803      	ldr	r0, [pc, #12]	; (80a33cc <_Z19__fetch_global_Wirev+0x34>)
 80a33c0:	f000 f844 	bl	80a344c <__aeabi_atexit>
	return wire;
}
 80a33c4:	4801      	ldr	r0, [pc, #4]	; (80a33cc <_Z19__fetch_global_Wirev+0x34>)
 80a33c6:	bd38      	pop	{r3, r4, r5, pc}
 80a33c8:	20000a48 	.word	0x20000a48
 80a33cc:	20000a4c 	.word	0x20000a4c
 80a33d0:	20000478 	.word	0x20000478
 80a33d4:	080a2279 	.word	0x080a2279

080a33d8 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a33d8:	b513      	push	{r0, r1, r4, lr}
 80a33da:	4c08      	ldr	r4, [pc, #32]	; (80a33fc <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a33dc:	2300      	movs	r3, #0
 80a33de:	461a      	mov	r2, r3
 80a33e0:	4619      	mov	r1, r3
 80a33e2:	9300      	str	r3, [sp, #0]
 80a33e4:	4620      	mov	r0, r4
 80a33e6:	f7fe ffeb 	bl	80a23c0 <_ZN9IPAddressC1Ehhhh>
 80a33ea:	4620      	mov	r0, r4
 80a33ec:	4a04      	ldr	r2, [pc, #16]	; (80a3400 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a33ee:	4905      	ldr	r1, [pc, #20]	; (80a3404 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a33f0:	b002      	add	sp, #8
 80a33f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a33f6:	f000 b829 	b.w	80a344c <__aeabi_atexit>
 80a33fa:	bf00      	nop
 80a33fc:	20000a60 	.word	0x20000a60
 80a3400:	20000478 	.word	0x20000478
 80a3404:	080a2349 	.word	0x080a2349

080a3408 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a3408:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a340a:	4c0c      	ldr	r4, [pc, #48]	; (80a343c <_GLOBAL__sub_I_SPI+0x34>)
 80a340c:	4e0c      	ldr	r6, [pc, #48]	; (80a3440 <_GLOBAL__sub_I_SPI+0x38>)
 80a340e:	4d0d      	ldr	r5, [pc, #52]	; (80a3444 <_GLOBAL__sub_I_SPI+0x3c>)
 80a3410:	2100      	movs	r1, #0
 80a3412:	4620      	mov	r0, r4
 80a3414:	f7ff f8ba 	bl	80a258c <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a3418:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a341a:	4c0b      	ldr	r4, [pc, #44]	; (80a3448 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a341c:	4632      	mov	r2, r6
 80a341e:	4629      	mov	r1, r5
 80a3420:	f000 f814 	bl	80a344c <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a3424:	2101      	movs	r1, #1
 80a3426:	4620      	mov	r0, r4
 80a3428:	f7ff f8b0 	bl	80a258c <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a342c:	4632      	mov	r2, r6
 80a342e:	4629      	mov	r1, r5
 80a3430:	4620      	mov	r0, r4
 80a3432:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a3436:	f000 b809 	b.w	80a344c <__aeabi_atexit>
 80a343a:	bf00      	nop
 80a343c:	20000a78 	.word	0x20000a78
 80a3440:	20000478 	.word	0x20000478
 80a3444:	080a257d 	.word	0x080a257d
 80a3448:	20000a88 	.word	0x20000a88

080a344c <__aeabi_atexit>:
 80a344c:	460b      	mov	r3, r1
 80a344e:	4601      	mov	r1, r0
 80a3450:	4618      	mov	r0, r3
 80a3452:	f001 bb27 	b.w	80a4aa4 <__cxa_atexit>

080a3456 <_ZSt25__throw_bad_function_callv>:
 80a3456:	b508      	push	{r3, lr}
 80a3458:	f7fe fc4e 	bl	80a1cf8 <abort>

080a345c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a345c:	4b24      	ldr	r3, [pc, #144]	; (80a34f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a345e:	681a      	ldr	r2, [r3, #0]
 80a3460:	07d0      	lsls	r0, r2, #31
 80a3462:	bf5c      	itt	pl
 80a3464:	2201      	movpl	r2, #1
 80a3466:	601a      	strpl	r2, [r3, #0]
 80a3468:	4b22      	ldr	r3, [pc, #136]	; (80a34f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a346a:	681a      	ldr	r2, [r3, #0]
 80a346c:	07d1      	lsls	r1, r2, #31
 80a346e:	bf5c      	itt	pl
 80a3470:	2201      	movpl	r2, #1
 80a3472:	601a      	strpl	r2, [r3, #0]
 80a3474:	4b20      	ldr	r3, [pc, #128]	; (80a34f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a3476:	681a      	ldr	r2, [r3, #0]
 80a3478:	07d2      	lsls	r2, r2, #31
 80a347a:	bf5c      	itt	pl
 80a347c:	2201      	movpl	r2, #1
 80a347e:	601a      	strpl	r2, [r3, #0]
 80a3480:	4b1e      	ldr	r3, [pc, #120]	; (80a34fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a3482:	681a      	ldr	r2, [r3, #0]
 80a3484:	07d0      	lsls	r0, r2, #31
 80a3486:	bf5c      	itt	pl
 80a3488:	2201      	movpl	r2, #1
 80a348a:	601a      	strpl	r2, [r3, #0]
 80a348c:	4b1c      	ldr	r3, [pc, #112]	; (80a3500 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a348e:	681a      	ldr	r2, [r3, #0]
 80a3490:	07d1      	lsls	r1, r2, #31
 80a3492:	bf5c      	itt	pl
 80a3494:	2201      	movpl	r2, #1
 80a3496:	601a      	strpl	r2, [r3, #0]
 80a3498:	4b1a      	ldr	r3, [pc, #104]	; (80a3504 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a349a:	681a      	ldr	r2, [r3, #0]
 80a349c:	07d2      	lsls	r2, r2, #31
 80a349e:	bf5c      	itt	pl
 80a34a0:	2201      	movpl	r2, #1
 80a34a2:	601a      	strpl	r2, [r3, #0]
 80a34a4:	4b18      	ldr	r3, [pc, #96]	; (80a3508 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a34a6:	681a      	ldr	r2, [r3, #0]
 80a34a8:	07d0      	lsls	r0, r2, #31
 80a34aa:	bf5c      	itt	pl
 80a34ac:	2201      	movpl	r2, #1
 80a34ae:	601a      	strpl	r2, [r3, #0]
 80a34b0:	4b16      	ldr	r3, [pc, #88]	; (80a350c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a34b2:	681a      	ldr	r2, [r3, #0]
 80a34b4:	07d1      	lsls	r1, r2, #31
 80a34b6:	bf5c      	itt	pl
 80a34b8:	2201      	movpl	r2, #1
 80a34ba:	601a      	strpl	r2, [r3, #0]
 80a34bc:	4b14      	ldr	r3, [pc, #80]	; (80a3510 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a34be:	681a      	ldr	r2, [r3, #0]
 80a34c0:	07d2      	lsls	r2, r2, #31
 80a34c2:	bf5c      	itt	pl
 80a34c4:	2201      	movpl	r2, #1
 80a34c6:	601a      	strpl	r2, [r3, #0]
 80a34c8:	4b12      	ldr	r3, [pc, #72]	; (80a3514 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a34ca:	681a      	ldr	r2, [r3, #0]
 80a34cc:	07d0      	lsls	r0, r2, #31
 80a34ce:	bf5c      	itt	pl
 80a34d0:	2201      	movpl	r2, #1
 80a34d2:	601a      	strpl	r2, [r3, #0]
 80a34d4:	4b10      	ldr	r3, [pc, #64]	; (80a3518 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a34d6:	681a      	ldr	r2, [r3, #0]
 80a34d8:	07d1      	lsls	r1, r2, #31
 80a34da:	bf5c      	itt	pl
 80a34dc:	2201      	movpl	r2, #1
 80a34de:	601a      	strpl	r2, [r3, #0]
 80a34e0:	4b0e      	ldr	r3, [pc, #56]	; (80a351c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a34e2:	681a      	ldr	r2, [r3, #0]
 80a34e4:	07d2      	lsls	r2, r2, #31
 80a34e6:	bf5c      	itt	pl
 80a34e8:	2201      	movpl	r2, #1
 80a34ea:	601a      	strpl	r2, [r3, #0]
 80a34ec:	4770      	bx	lr
 80a34ee:	bf00      	nop
 80a34f0:	20000ac4 	.word	0x20000ac4
 80a34f4:	20000ac0 	.word	0x20000ac0
 80a34f8:	20000abc 	.word	0x20000abc
 80a34fc:	20000ab8 	.word	0x20000ab8
 80a3500:	20000ab4 	.word	0x20000ab4
 80a3504:	20000ab0 	.word	0x20000ab0
 80a3508:	20000aac 	.word	0x20000aac
 80a350c:	20000aa8 	.word	0x20000aa8
 80a3510:	20000aa4 	.word	0x20000aa4
 80a3514:	20000aa0 	.word	0x20000aa0
 80a3518:	20000a9c 	.word	0x20000a9c
 80a351c:	20000a98 	.word	0x20000a98

080a3520 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a3520:	4b18      	ldr	r3, [pc, #96]	; (80a3584 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a3522:	681a      	ldr	r2, [r3, #0]
 80a3524:	07d1      	lsls	r1, r2, #31
 80a3526:	bf5c      	itt	pl
 80a3528:	2201      	movpl	r2, #1
 80a352a:	601a      	strpl	r2, [r3, #0]
 80a352c:	4b16      	ldr	r3, [pc, #88]	; (80a3588 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a352e:	681a      	ldr	r2, [r3, #0]
 80a3530:	07d2      	lsls	r2, r2, #31
 80a3532:	bf5c      	itt	pl
 80a3534:	2201      	movpl	r2, #1
 80a3536:	601a      	strpl	r2, [r3, #0]
 80a3538:	4b14      	ldr	r3, [pc, #80]	; (80a358c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a353a:	681a      	ldr	r2, [r3, #0]
 80a353c:	07d0      	lsls	r0, r2, #31
 80a353e:	bf5c      	itt	pl
 80a3540:	2201      	movpl	r2, #1
 80a3542:	601a      	strpl	r2, [r3, #0]
 80a3544:	4b12      	ldr	r3, [pc, #72]	; (80a3590 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a3546:	681a      	ldr	r2, [r3, #0]
 80a3548:	07d1      	lsls	r1, r2, #31
 80a354a:	bf5c      	itt	pl
 80a354c:	2201      	movpl	r2, #1
 80a354e:	601a      	strpl	r2, [r3, #0]
 80a3550:	4b10      	ldr	r3, [pc, #64]	; (80a3594 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a3552:	681a      	ldr	r2, [r3, #0]
 80a3554:	07d2      	lsls	r2, r2, #31
 80a3556:	bf5c      	itt	pl
 80a3558:	2201      	movpl	r2, #1
 80a355a:	601a      	strpl	r2, [r3, #0]
 80a355c:	4b0e      	ldr	r3, [pc, #56]	; (80a3598 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a355e:	681a      	ldr	r2, [r3, #0]
 80a3560:	07d0      	lsls	r0, r2, #31
 80a3562:	bf5c      	itt	pl
 80a3564:	2201      	movpl	r2, #1
 80a3566:	601a      	strpl	r2, [r3, #0]
 80a3568:	4b0c      	ldr	r3, [pc, #48]	; (80a359c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a356a:	681a      	ldr	r2, [r3, #0]
 80a356c:	07d1      	lsls	r1, r2, #31
 80a356e:	bf5c      	itt	pl
 80a3570:	2201      	movpl	r2, #1
 80a3572:	601a      	strpl	r2, [r3, #0]
 80a3574:	4b0a      	ldr	r3, [pc, #40]	; (80a35a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a3576:	681a      	ldr	r2, [r3, #0]
 80a3578:	07d2      	lsls	r2, r2, #31
 80a357a:	bf5c      	itt	pl
 80a357c:	2201      	movpl	r2, #1
 80a357e:	601a      	strpl	r2, [r3, #0]
 80a3580:	4770      	bx	lr
 80a3582:	bf00      	nop
 80a3584:	20000ae4 	.word	0x20000ae4
 80a3588:	20000ae0 	.word	0x20000ae0
 80a358c:	20000adc 	.word	0x20000adc
 80a3590:	20000ad8 	.word	0x20000ad8
 80a3594:	20000ad4 	.word	0x20000ad4
 80a3598:	20000ad0 	.word	0x20000ad0
 80a359c:	20000acc 	.word	0x20000acc
 80a35a0:	20000ac8 	.word	0x20000ac8

080a35a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a35a4:	4b18      	ldr	r3, [pc, #96]	; (80a3608 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a35a6:	681a      	ldr	r2, [r3, #0]
 80a35a8:	07d1      	lsls	r1, r2, #31
 80a35aa:	bf5c      	itt	pl
 80a35ac:	2201      	movpl	r2, #1
 80a35ae:	601a      	strpl	r2, [r3, #0]
 80a35b0:	4b16      	ldr	r3, [pc, #88]	; (80a360c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a35b2:	681a      	ldr	r2, [r3, #0]
 80a35b4:	07d2      	lsls	r2, r2, #31
 80a35b6:	bf5c      	itt	pl
 80a35b8:	2201      	movpl	r2, #1
 80a35ba:	601a      	strpl	r2, [r3, #0]
 80a35bc:	4b14      	ldr	r3, [pc, #80]	; (80a3610 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a35be:	681a      	ldr	r2, [r3, #0]
 80a35c0:	07d0      	lsls	r0, r2, #31
 80a35c2:	bf5c      	itt	pl
 80a35c4:	2201      	movpl	r2, #1
 80a35c6:	601a      	strpl	r2, [r3, #0]
 80a35c8:	4b12      	ldr	r3, [pc, #72]	; (80a3614 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a35ca:	681a      	ldr	r2, [r3, #0]
 80a35cc:	07d1      	lsls	r1, r2, #31
 80a35ce:	bf5c      	itt	pl
 80a35d0:	2201      	movpl	r2, #1
 80a35d2:	601a      	strpl	r2, [r3, #0]
 80a35d4:	4b10      	ldr	r3, [pc, #64]	; (80a3618 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a35d6:	681a      	ldr	r2, [r3, #0]
 80a35d8:	07d2      	lsls	r2, r2, #31
 80a35da:	bf5c      	itt	pl
 80a35dc:	2201      	movpl	r2, #1
 80a35de:	601a      	strpl	r2, [r3, #0]
 80a35e0:	4b0e      	ldr	r3, [pc, #56]	; (80a361c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a35e2:	681a      	ldr	r2, [r3, #0]
 80a35e4:	07d0      	lsls	r0, r2, #31
 80a35e6:	bf5c      	itt	pl
 80a35e8:	2201      	movpl	r2, #1
 80a35ea:	601a      	strpl	r2, [r3, #0]
 80a35ec:	4b0c      	ldr	r3, [pc, #48]	; (80a3620 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a35ee:	681a      	ldr	r2, [r3, #0]
 80a35f0:	07d1      	lsls	r1, r2, #31
 80a35f2:	bf5c      	itt	pl
 80a35f4:	2201      	movpl	r2, #1
 80a35f6:	601a      	strpl	r2, [r3, #0]
 80a35f8:	4b0a      	ldr	r3, [pc, #40]	; (80a3624 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a35fa:	681a      	ldr	r2, [r3, #0]
 80a35fc:	07d2      	lsls	r2, r2, #31
 80a35fe:	bf5c      	itt	pl
 80a3600:	2201      	movpl	r2, #1
 80a3602:	601a      	strpl	r2, [r3, #0]
 80a3604:	4770      	bx	lr
 80a3606:	bf00      	nop
 80a3608:	20000b04 	.word	0x20000b04
 80a360c:	20000b00 	.word	0x20000b00
 80a3610:	20000afc 	.word	0x20000afc
 80a3614:	20000af8 	.word	0x20000af8
 80a3618:	20000af4 	.word	0x20000af4
 80a361c:	20000af0 	.word	0x20000af0
 80a3620:	20000aec 	.word	0x20000aec
 80a3624:	20000ae8 	.word	0x20000ae8

080a3628 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a3628:	4b24      	ldr	r3, [pc, #144]	; (80a36bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a362a:	681a      	ldr	r2, [r3, #0]
 80a362c:	07d0      	lsls	r0, r2, #31
 80a362e:	bf5c      	itt	pl
 80a3630:	2201      	movpl	r2, #1
 80a3632:	601a      	strpl	r2, [r3, #0]
 80a3634:	4b22      	ldr	r3, [pc, #136]	; (80a36c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a3636:	681a      	ldr	r2, [r3, #0]
 80a3638:	07d1      	lsls	r1, r2, #31
 80a363a:	bf5c      	itt	pl
 80a363c:	2201      	movpl	r2, #1
 80a363e:	601a      	strpl	r2, [r3, #0]
 80a3640:	4b20      	ldr	r3, [pc, #128]	; (80a36c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a3642:	681a      	ldr	r2, [r3, #0]
 80a3644:	07d2      	lsls	r2, r2, #31
 80a3646:	bf5c      	itt	pl
 80a3648:	2201      	movpl	r2, #1
 80a364a:	601a      	strpl	r2, [r3, #0]
 80a364c:	4b1e      	ldr	r3, [pc, #120]	; (80a36c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a364e:	681a      	ldr	r2, [r3, #0]
 80a3650:	07d0      	lsls	r0, r2, #31
 80a3652:	bf5c      	itt	pl
 80a3654:	2201      	movpl	r2, #1
 80a3656:	601a      	strpl	r2, [r3, #0]
 80a3658:	4b1c      	ldr	r3, [pc, #112]	; (80a36cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a365a:	681a      	ldr	r2, [r3, #0]
 80a365c:	07d1      	lsls	r1, r2, #31
 80a365e:	bf5c      	itt	pl
 80a3660:	2201      	movpl	r2, #1
 80a3662:	601a      	strpl	r2, [r3, #0]
 80a3664:	4b1a      	ldr	r3, [pc, #104]	; (80a36d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a3666:	681a      	ldr	r2, [r3, #0]
 80a3668:	07d2      	lsls	r2, r2, #31
 80a366a:	bf5c      	itt	pl
 80a366c:	2201      	movpl	r2, #1
 80a366e:	601a      	strpl	r2, [r3, #0]
 80a3670:	4b18      	ldr	r3, [pc, #96]	; (80a36d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a3672:	681a      	ldr	r2, [r3, #0]
 80a3674:	07d0      	lsls	r0, r2, #31
 80a3676:	bf5c      	itt	pl
 80a3678:	2201      	movpl	r2, #1
 80a367a:	601a      	strpl	r2, [r3, #0]
 80a367c:	4b16      	ldr	r3, [pc, #88]	; (80a36d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a367e:	681a      	ldr	r2, [r3, #0]
 80a3680:	07d1      	lsls	r1, r2, #31
 80a3682:	bf5c      	itt	pl
 80a3684:	2201      	movpl	r2, #1
 80a3686:	601a      	strpl	r2, [r3, #0]
 80a3688:	4b14      	ldr	r3, [pc, #80]	; (80a36dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a368a:	681a      	ldr	r2, [r3, #0]
 80a368c:	07d2      	lsls	r2, r2, #31
 80a368e:	bf5c      	itt	pl
 80a3690:	2201      	movpl	r2, #1
 80a3692:	601a      	strpl	r2, [r3, #0]
 80a3694:	4b12      	ldr	r3, [pc, #72]	; (80a36e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a3696:	681a      	ldr	r2, [r3, #0]
 80a3698:	07d0      	lsls	r0, r2, #31
 80a369a:	bf5c      	itt	pl
 80a369c:	2201      	movpl	r2, #1
 80a369e:	601a      	strpl	r2, [r3, #0]
 80a36a0:	4b10      	ldr	r3, [pc, #64]	; (80a36e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a36a2:	681a      	ldr	r2, [r3, #0]
 80a36a4:	07d1      	lsls	r1, r2, #31
 80a36a6:	bf5c      	itt	pl
 80a36a8:	2201      	movpl	r2, #1
 80a36aa:	601a      	strpl	r2, [r3, #0]
 80a36ac:	4b0e      	ldr	r3, [pc, #56]	; (80a36e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a36ae:	681a      	ldr	r2, [r3, #0]
 80a36b0:	07d2      	lsls	r2, r2, #31
 80a36b2:	bf5c      	itt	pl
 80a36b4:	2201      	movpl	r2, #1
 80a36b6:	601a      	strpl	r2, [r3, #0]
 80a36b8:	4770      	bx	lr
 80a36ba:	bf00      	nop
 80a36bc:	20000b34 	.word	0x20000b34
 80a36c0:	20000b30 	.word	0x20000b30
 80a36c4:	20000b2c 	.word	0x20000b2c
 80a36c8:	20000b28 	.word	0x20000b28
 80a36cc:	20000b24 	.word	0x20000b24
 80a36d0:	20000b20 	.word	0x20000b20
 80a36d4:	20000b1c 	.word	0x20000b1c
 80a36d8:	20000b18 	.word	0x20000b18
 80a36dc:	20000b14 	.word	0x20000b14
 80a36e0:	20000b10 	.word	0x20000b10
 80a36e4:	20000b0c 	.word	0x20000b0c
 80a36e8:	20000b08 	.word	0x20000b08

080a36ec <__aeabi_drsub>:
 80a36ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a36f0:	e002      	b.n	80a36f8 <__adddf3>
 80a36f2:	bf00      	nop

080a36f4 <__aeabi_dsub>:
 80a36f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a36f8 <__adddf3>:
 80a36f8:	b530      	push	{r4, r5, lr}
 80a36fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a36fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a3702:	ea94 0f05 	teq	r4, r5
 80a3706:	bf08      	it	eq
 80a3708:	ea90 0f02 	teqeq	r0, r2
 80a370c:	bf1f      	itttt	ne
 80a370e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a3712:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a3716:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a371a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a371e:	f000 80e2 	beq.w	80a38e6 <__adddf3+0x1ee>
 80a3722:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a3726:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a372a:	bfb8      	it	lt
 80a372c:	426d      	neglt	r5, r5
 80a372e:	dd0c      	ble.n	80a374a <__adddf3+0x52>
 80a3730:	442c      	add	r4, r5
 80a3732:	ea80 0202 	eor.w	r2, r0, r2
 80a3736:	ea81 0303 	eor.w	r3, r1, r3
 80a373a:	ea82 0000 	eor.w	r0, r2, r0
 80a373e:	ea83 0101 	eor.w	r1, r3, r1
 80a3742:	ea80 0202 	eor.w	r2, r0, r2
 80a3746:	ea81 0303 	eor.w	r3, r1, r3
 80a374a:	2d36      	cmp	r5, #54	; 0x36
 80a374c:	bf88      	it	hi
 80a374e:	bd30      	pophi	{r4, r5, pc}
 80a3750:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a3754:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a3758:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a375c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a3760:	d002      	beq.n	80a3768 <__adddf3+0x70>
 80a3762:	4240      	negs	r0, r0
 80a3764:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a3768:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a376c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a3770:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a3774:	d002      	beq.n	80a377c <__adddf3+0x84>
 80a3776:	4252      	negs	r2, r2
 80a3778:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a377c:	ea94 0f05 	teq	r4, r5
 80a3780:	f000 80a7 	beq.w	80a38d2 <__adddf3+0x1da>
 80a3784:	f1a4 0401 	sub.w	r4, r4, #1
 80a3788:	f1d5 0e20 	rsbs	lr, r5, #32
 80a378c:	db0d      	blt.n	80a37aa <__adddf3+0xb2>
 80a378e:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a3792:	fa22 f205 	lsr.w	r2, r2, r5
 80a3796:	1880      	adds	r0, r0, r2
 80a3798:	f141 0100 	adc.w	r1, r1, #0
 80a379c:	fa03 f20e 	lsl.w	r2, r3, lr
 80a37a0:	1880      	adds	r0, r0, r2
 80a37a2:	fa43 f305 	asr.w	r3, r3, r5
 80a37a6:	4159      	adcs	r1, r3
 80a37a8:	e00e      	b.n	80a37c8 <__adddf3+0xd0>
 80a37aa:	f1a5 0520 	sub.w	r5, r5, #32
 80a37ae:	f10e 0e20 	add.w	lr, lr, #32
 80a37b2:	2a01      	cmp	r2, #1
 80a37b4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a37b8:	bf28      	it	cs
 80a37ba:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a37be:	fa43 f305 	asr.w	r3, r3, r5
 80a37c2:	18c0      	adds	r0, r0, r3
 80a37c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a37c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a37cc:	d507      	bpl.n	80a37de <__adddf3+0xe6>
 80a37ce:	f04f 0e00 	mov.w	lr, #0
 80a37d2:	f1dc 0c00 	rsbs	ip, ip, #0
 80a37d6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a37da:	eb6e 0101 	sbc.w	r1, lr, r1
 80a37de:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a37e2:	d31b      	bcc.n	80a381c <__adddf3+0x124>
 80a37e4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a37e8:	d30c      	bcc.n	80a3804 <__adddf3+0x10c>
 80a37ea:	0849      	lsrs	r1, r1, #1
 80a37ec:	ea5f 0030 	movs.w	r0, r0, rrx
 80a37f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a37f4:	f104 0401 	add.w	r4, r4, #1
 80a37f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a37fc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a3800:	f080 809a 	bcs.w	80a3938 <__adddf3+0x240>
 80a3804:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a3808:	bf08      	it	eq
 80a380a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a380e:	f150 0000 	adcs.w	r0, r0, #0
 80a3812:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a3816:	ea41 0105 	orr.w	r1, r1, r5
 80a381a:	bd30      	pop	{r4, r5, pc}
 80a381c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a3820:	4140      	adcs	r0, r0
 80a3822:	eb41 0101 	adc.w	r1, r1, r1
 80a3826:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a382a:	f1a4 0401 	sub.w	r4, r4, #1
 80a382e:	d1e9      	bne.n	80a3804 <__adddf3+0x10c>
 80a3830:	f091 0f00 	teq	r1, #0
 80a3834:	bf04      	itt	eq
 80a3836:	4601      	moveq	r1, r0
 80a3838:	2000      	moveq	r0, #0
 80a383a:	fab1 f381 	clz	r3, r1
 80a383e:	bf08      	it	eq
 80a3840:	3320      	addeq	r3, #32
 80a3842:	f1a3 030b 	sub.w	r3, r3, #11
 80a3846:	f1b3 0220 	subs.w	r2, r3, #32
 80a384a:	da0c      	bge.n	80a3866 <__adddf3+0x16e>
 80a384c:	320c      	adds	r2, #12
 80a384e:	dd08      	ble.n	80a3862 <__adddf3+0x16a>
 80a3850:	f102 0c14 	add.w	ip, r2, #20
 80a3854:	f1c2 020c 	rsb	r2, r2, #12
 80a3858:	fa01 f00c 	lsl.w	r0, r1, ip
 80a385c:	fa21 f102 	lsr.w	r1, r1, r2
 80a3860:	e00c      	b.n	80a387c <__adddf3+0x184>
 80a3862:	f102 0214 	add.w	r2, r2, #20
 80a3866:	bfd8      	it	le
 80a3868:	f1c2 0c20 	rsble	ip, r2, #32
 80a386c:	fa01 f102 	lsl.w	r1, r1, r2
 80a3870:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a3874:	bfdc      	itt	le
 80a3876:	ea41 010c 	orrle.w	r1, r1, ip
 80a387a:	4090      	lslle	r0, r2
 80a387c:	1ae4      	subs	r4, r4, r3
 80a387e:	bfa2      	ittt	ge
 80a3880:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a3884:	4329      	orrge	r1, r5
 80a3886:	bd30      	popge	{r4, r5, pc}
 80a3888:	ea6f 0404 	mvn.w	r4, r4
 80a388c:	3c1f      	subs	r4, #31
 80a388e:	da1c      	bge.n	80a38ca <__adddf3+0x1d2>
 80a3890:	340c      	adds	r4, #12
 80a3892:	dc0e      	bgt.n	80a38b2 <__adddf3+0x1ba>
 80a3894:	f104 0414 	add.w	r4, r4, #20
 80a3898:	f1c4 0220 	rsb	r2, r4, #32
 80a389c:	fa20 f004 	lsr.w	r0, r0, r4
 80a38a0:	fa01 f302 	lsl.w	r3, r1, r2
 80a38a4:	ea40 0003 	orr.w	r0, r0, r3
 80a38a8:	fa21 f304 	lsr.w	r3, r1, r4
 80a38ac:	ea45 0103 	orr.w	r1, r5, r3
 80a38b0:	bd30      	pop	{r4, r5, pc}
 80a38b2:	f1c4 040c 	rsb	r4, r4, #12
 80a38b6:	f1c4 0220 	rsb	r2, r4, #32
 80a38ba:	fa20 f002 	lsr.w	r0, r0, r2
 80a38be:	fa01 f304 	lsl.w	r3, r1, r4
 80a38c2:	ea40 0003 	orr.w	r0, r0, r3
 80a38c6:	4629      	mov	r1, r5
 80a38c8:	bd30      	pop	{r4, r5, pc}
 80a38ca:	fa21 f004 	lsr.w	r0, r1, r4
 80a38ce:	4629      	mov	r1, r5
 80a38d0:	bd30      	pop	{r4, r5, pc}
 80a38d2:	f094 0f00 	teq	r4, #0
 80a38d6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a38da:	bf06      	itte	eq
 80a38dc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a38e0:	3401      	addeq	r4, #1
 80a38e2:	3d01      	subne	r5, #1
 80a38e4:	e74e      	b.n	80a3784 <__adddf3+0x8c>
 80a38e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a38ea:	bf18      	it	ne
 80a38ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a38f0:	d029      	beq.n	80a3946 <__adddf3+0x24e>
 80a38f2:	ea94 0f05 	teq	r4, r5
 80a38f6:	bf08      	it	eq
 80a38f8:	ea90 0f02 	teqeq	r0, r2
 80a38fc:	d005      	beq.n	80a390a <__adddf3+0x212>
 80a38fe:	ea54 0c00 	orrs.w	ip, r4, r0
 80a3902:	bf04      	itt	eq
 80a3904:	4619      	moveq	r1, r3
 80a3906:	4610      	moveq	r0, r2
 80a3908:	bd30      	pop	{r4, r5, pc}
 80a390a:	ea91 0f03 	teq	r1, r3
 80a390e:	bf1e      	ittt	ne
 80a3910:	2100      	movne	r1, #0
 80a3912:	2000      	movne	r0, #0
 80a3914:	bd30      	popne	{r4, r5, pc}
 80a3916:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a391a:	d105      	bne.n	80a3928 <__adddf3+0x230>
 80a391c:	0040      	lsls	r0, r0, #1
 80a391e:	4149      	adcs	r1, r1
 80a3920:	bf28      	it	cs
 80a3922:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a3926:	bd30      	pop	{r4, r5, pc}
 80a3928:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a392c:	bf3c      	itt	cc
 80a392e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a3932:	bd30      	popcc	{r4, r5, pc}
 80a3934:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a3938:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a393c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a3940:	f04f 0000 	mov.w	r0, #0
 80a3944:	bd30      	pop	{r4, r5, pc}
 80a3946:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a394a:	bf1a      	itte	ne
 80a394c:	4619      	movne	r1, r3
 80a394e:	4610      	movne	r0, r2
 80a3950:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a3954:	bf1c      	itt	ne
 80a3956:	460b      	movne	r3, r1
 80a3958:	4602      	movne	r2, r0
 80a395a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a395e:	bf06      	itte	eq
 80a3960:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a3964:	ea91 0f03 	teqeq	r1, r3
 80a3968:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a396c:	bd30      	pop	{r4, r5, pc}
 80a396e:	bf00      	nop

080a3970 <__aeabi_ui2d>:
 80a3970:	f090 0f00 	teq	r0, #0
 80a3974:	bf04      	itt	eq
 80a3976:	2100      	moveq	r1, #0
 80a3978:	4770      	bxeq	lr
 80a397a:	b530      	push	{r4, r5, lr}
 80a397c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a3980:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a3984:	f04f 0500 	mov.w	r5, #0
 80a3988:	f04f 0100 	mov.w	r1, #0
 80a398c:	e750      	b.n	80a3830 <__adddf3+0x138>
 80a398e:	bf00      	nop

080a3990 <__aeabi_i2d>:
 80a3990:	f090 0f00 	teq	r0, #0
 80a3994:	bf04      	itt	eq
 80a3996:	2100      	moveq	r1, #0
 80a3998:	4770      	bxeq	lr
 80a399a:	b530      	push	{r4, r5, lr}
 80a399c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a39a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a39a4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a39a8:	bf48      	it	mi
 80a39aa:	4240      	negmi	r0, r0
 80a39ac:	f04f 0100 	mov.w	r1, #0
 80a39b0:	e73e      	b.n	80a3830 <__adddf3+0x138>
 80a39b2:	bf00      	nop

080a39b4 <__aeabi_f2d>:
 80a39b4:	0042      	lsls	r2, r0, #1
 80a39b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a39ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80a39be:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a39c2:	bf1f      	itttt	ne
 80a39c4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a39c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a39cc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a39d0:	4770      	bxne	lr
 80a39d2:	f092 0f00 	teq	r2, #0
 80a39d6:	bf14      	ite	ne
 80a39d8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a39dc:	4770      	bxeq	lr
 80a39de:	b530      	push	{r4, r5, lr}
 80a39e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a39e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a39e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a39ec:	e720      	b.n	80a3830 <__adddf3+0x138>
 80a39ee:	bf00      	nop

080a39f0 <__aeabi_ul2d>:
 80a39f0:	ea50 0201 	orrs.w	r2, r0, r1
 80a39f4:	bf08      	it	eq
 80a39f6:	4770      	bxeq	lr
 80a39f8:	b530      	push	{r4, r5, lr}
 80a39fa:	f04f 0500 	mov.w	r5, #0
 80a39fe:	e00a      	b.n	80a3a16 <__aeabi_l2d+0x16>

080a3a00 <__aeabi_l2d>:
 80a3a00:	ea50 0201 	orrs.w	r2, r0, r1
 80a3a04:	bf08      	it	eq
 80a3a06:	4770      	bxeq	lr
 80a3a08:	b530      	push	{r4, r5, lr}
 80a3a0a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a3a0e:	d502      	bpl.n	80a3a16 <__aeabi_l2d+0x16>
 80a3a10:	4240      	negs	r0, r0
 80a3a12:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a3a16:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a3a1a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a3a1e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a3a22:	f43f aedc 	beq.w	80a37de <__adddf3+0xe6>
 80a3a26:	f04f 0203 	mov.w	r2, #3
 80a3a2a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a3a2e:	bf18      	it	ne
 80a3a30:	3203      	addne	r2, #3
 80a3a32:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a3a36:	bf18      	it	ne
 80a3a38:	3203      	addne	r2, #3
 80a3a3a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a3a3e:	f1c2 0320 	rsb	r3, r2, #32
 80a3a42:	fa00 fc03 	lsl.w	ip, r0, r3
 80a3a46:	fa20 f002 	lsr.w	r0, r0, r2
 80a3a4a:	fa01 fe03 	lsl.w	lr, r1, r3
 80a3a4e:	ea40 000e 	orr.w	r0, r0, lr
 80a3a52:	fa21 f102 	lsr.w	r1, r1, r2
 80a3a56:	4414      	add	r4, r2
 80a3a58:	e6c1      	b.n	80a37de <__adddf3+0xe6>
 80a3a5a:	bf00      	nop

080a3a5c <__aeabi_dmul>:
 80a3a5c:	b570      	push	{r4, r5, r6, lr}
 80a3a5e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a3a62:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a3a66:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a3a6a:	bf1d      	ittte	ne
 80a3a6c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a3a70:	ea94 0f0c 	teqne	r4, ip
 80a3a74:	ea95 0f0c 	teqne	r5, ip
 80a3a78:	f000 f8de 	bleq	80a3c38 <__aeabi_dmul+0x1dc>
 80a3a7c:	442c      	add	r4, r5
 80a3a7e:	ea81 0603 	eor.w	r6, r1, r3
 80a3a82:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a3a86:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a3a8a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a3a8e:	bf18      	it	ne
 80a3a90:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a3a94:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a3a98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a3a9c:	d038      	beq.n	80a3b10 <__aeabi_dmul+0xb4>
 80a3a9e:	fba0 ce02 	umull	ip, lr, r0, r2
 80a3aa2:	f04f 0500 	mov.w	r5, #0
 80a3aa6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a3aaa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a3aae:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a3ab2:	f04f 0600 	mov.w	r6, #0
 80a3ab6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a3aba:	f09c 0f00 	teq	ip, #0
 80a3abe:	bf18      	it	ne
 80a3ac0:	f04e 0e01 	orrne.w	lr, lr, #1
 80a3ac4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a3ac8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a3acc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a3ad0:	d204      	bcs.n	80a3adc <__aeabi_dmul+0x80>
 80a3ad2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a3ad6:	416d      	adcs	r5, r5
 80a3ad8:	eb46 0606 	adc.w	r6, r6, r6
 80a3adc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a3ae0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a3ae4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a3ae8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a3aec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a3af0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a3af4:	bf88      	it	hi
 80a3af6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a3afa:	d81e      	bhi.n	80a3b3a <__aeabi_dmul+0xde>
 80a3afc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a3b00:	bf08      	it	eq
 80a3b02:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a3b06:	f150 0000 	adcs.w	r0, r0, #0
 80a3b0a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a3b0e:	bd70      	pop	{r4, r5, r6, pc}
 80a3b10:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a3b14:	ea46 0101 	orr.w	r1, r6, r1
 80a3b18:	ea40 0002 	orr.w	r0, r0, r2
 80a3b1c:	ea81 0103 	eor.w	r1, r1, r3
 80a3b20:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a3b24:	bfc2      	ittt	gt
 80a3b26:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a3b2a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a3b2e:	bd70      	popgt	{r4, r5, r6, pc}
 80a3b30:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a3b34:	f04f 0e00 	mov.w	lr, #0
 80a3b38:	3c01      	subs	r4, #1
 80a3b3a:	f300 80ab 	bgt.w	80a3c94 <__aeabi_dmul+0x238>
 80a3b3e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a3b42:	bfde      	ittt	le
 80a3b44:	2000      	movle	r0, #0
 80a3b46:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a3b4a:	bd70      	pople	{r4, r5, r6, pc}
 80a3b4c:	f1c4 0400 	rsb	r4, r4, #0
 80a3b50:	3c20      	subs	r4, #32
 80a3b52:	da35      	bge.n	80a3bc0 <__aeabi_dmul+0x164>
 80a3b54:	340c      	adds	r4, #12
 80a3b56:	dc1b      	bgt.n	80a3b90 <__aeabi_dmul+0x134>
 80a3b58:	f104 0414 	add.w	r4, r4, #20
 80a3b5c:	f1c4 0520 	rsb	r5, r4, #32
 80a3b60:	fa00 f305 	lsl.w	r3, r0, r5
 80a3b64:	fa20 f004 	lsr.w	r0, r0, r4
 80a3b68:	fa01 f205 	lsl.w	r2, r1, r5
 80a3b6c:	ea40 0002 	orr.w	r0, r0, r2
 80a3b70:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a3b74:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a3b78:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a3b7c:	fa21 f604 	lsr.w	r6, r1, r4
 80a3b80:	eb42 0106 	adc.w	r1, r2, r6
 80a3b84:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a3b88:	bf08      	it	eq
 80a3b8a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a3b8e:	bd70      	pop	{r4, r5, r6, pc}
 80a3b90:	f1c4 040c 	rsb	r4, r4, #12
 80a3b94:	f1c4 0520 	rsb	r5, r4, #32
 80a3b98:	fa00 f304 	lsl.w	r3, r0, r4
 80a3b9c:	fa20 f005 	lsr.w	r0, r0, r5
 80a3ba0:	fa01 f204 	lsl.w	r2, r1, r4
 80a3ba4:	ea40 0002 	orr.w	r0, r0, r2
 80a3ba8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a3bac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a3bb0:	f141 0100 	adc.w	r1, r1, #0
 80a3bb4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a3bb8:	bf08      	it	eq
 80a3bba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a3bbe:	bd70      	pop	{r4, r5, r6, pc}
 80a3bc0:	f1c4 0520 	rsb	r5, r4, #32
 80a3bc4:	fa00 f205 	lsl.w	r2, r0, r5
 80a3bc8:	ea4e 0e02 	orr.w	lr, lr, r2
 80a3bcc:	fa20 f304 	lsr.w	r3, r0, r4
 80a3bd0:	fa01 f205 	lsl.w	r2, r1, r5
 80a3bd4:	ea43 0302 	orr.w	r3, r3, r2
 80a3bd8:	fa21 f004 	lsr.w	r0, r1, r4
 80a3bdc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a3be0:	fa21 f204 	lsr.w	r2, r1, r4
 80a3be4:	ea20 0002 	bic.w	r0, r0, r2
 80a3be8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a3bec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a3bf0:	bf08      	it	eq
 80a3bf2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a3bf6:	bd70      	pop	{r4, r5, r6, pc}
 80a3bf8:	f094 0f00 	teq	r4, #0
 80a3bfc:	d10f      	bne.n	80a3c1e <__aeabi_dmul+0x1c2>
 80a3bfe:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a3c02:	0040      	lsls	r0, r0, #1
 80a3c04:	eb41 0101 	adc.w	r1, r1, r1
 80a3c08:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a3c0c:	bf08      	it	eq
 80a3c0e:	3c01      	subeq	r4, #1
 80a3c10:	d0f7      	beq.n	80a3c02 <__aeabi_dmul+0x1a6>
 80a3c12:	ea41 0106 	orr.w	r1, r1, r6
 80a3c16:	f095 0f00 	teq	r5, #0
 80a3c1a:	bf18      	it	ne
 80a3c1c:	4770      	bxne	lr
 80a3c1e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a3c22:	0052      	lsls	r2, r2, #1
 80a3c24:	eb43 0303 	adc.w	r3, r3, r3
 80a3c28:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a3c2c:	bf08      	it	eq
 80a3c2e:	3d01      	subeq	r5, #1
 80a3c30:	d0f7      	beq.n	80a3c22 <__aeabi_dmul+0x1c6>
 80a3c32:	ea43 0306 	orr.w	r3, r3, r6
 80a3c36:	4770      	bx	lr
 80a3c38:	ea94 0f0c 	teq	r4, ip
 80a3c3c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a3c40:	bf18      	it	ne
 80a3c42:	ea95 0f0c 	teqne	r5, ip
 80a3c46:	d00c      	beq.n	80a3c62 <__aeabi_dmul+0x206>
 80a3c48:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a3c4c:	bf18      	it	ne
 80a3c4e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a3c52:	d1d1      	bne.n	80a3bf8 <__aeabi_dmul+0x19c>
 80a3c54:	ea81 0103 	eor.w	r1, r1, r3
 80a3c58:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a3c5c:	f04f 0000 	mov.w	r0, #0
 80a3c60:	bd70      	pop	{r4, r5, r6, pc}
 80a3c62:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a3c66:	bf06      	itte	eq
 80a3c68:	4610      	moveq	r0, r2
 80a3c6a:	4619      	moveq	r1, r3
 80a3c6c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a3c70:	d019      	beq.n	80a3ca6 <__aeabi_dmul+0x24a>
 80a3c72:	ea94 0f0c 	teq	r4, ip
 80a3c76:	d102      	bne.n	80a3c7e <__aeabi_dmul+0x222>
 80a3c78:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a3c7c:	d113      	bne.n	80a3ca6 <__aeabi_dmul+0x24a>
 80a3c7e:	ea95 0f0c 	teq	r5, ip
 80a3c82:	d105      	bne.n	80a3c90 <__aeabi_dmul+0x234>
 80a3c84:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a3c88:	bf1c      	itt	ne
 80a3c8a:	4610      	movne	r0, r2
 80a3c8c:	4619      	movne	r1, r3
 80a3c8e:	d10a      	bne.n	80a3ca6 <__aeabi_dmul+0x24a>
 80a3c90:	ea81 0103 	eor.w	r1, r1, r3
 80a3c94:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a3c98:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a3c9c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a3ca0:	f04f 0000 	mov.w	r0, #0
 80a3ca4:	bd70      	pop	{r4, r5, r6, pc}
 80a3ca6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a3caa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a3cae:	bd70      	pop	{r4, r5, r6, pc}

080a3cb0 <__aeabi_ddiv>:
 80a3cb0:	b570      	push	{r4, r5, r6, lr}
 80a3cb2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a3cb6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a3cba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a3cbe:	bf1d      	ittte	ne
 80a3cc0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a3cc4:	ea94 0f0c 	teqne	r4, ip
 80a3cc8:	ea95 0f0c 	teqne	r5, ip
 80a3ccc:	f000 f8a7 	bleq	80a3e1e <__aeabi_ddiv+0x16e>
 80a3cd0:	eba4 0405 	sub.w	r4, r4, r5
 80a3cd4:	ea81 0e03 	eor.w	lr, r1, r3
 80a3cd8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a3cdc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a3ce0:	f000 8088 	beq.w	80a3df4 <__aeabi_ddiv+0x144>
 80a3ce4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a3ce8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a3cec:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a3cf0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a3cf4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a3cf8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a3cfc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a3d00:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a3d04:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a3d08:	429d      	cmp	r5, r3
 80a3d0a:	bf08      	it	eq
 80a3d0c:	4296      	cmpeq	r6, r2
 80a3d0e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a3d12:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a3d16:	d202      	bcs.n	80a3d1e <__aeabi_ddiv+0x6e>
 80a3d18:	085b      	lsrs	r3, r3, #1
 80a3d1a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3d1e:	1ab6      	subs	r6, r6, r2
 80a3d20:	eb65 0503 	sbc.w	r5, r5, r3
 80a3d24:	085b      	lsrs	r3, r3, #1
 80a3d26:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3d2a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a3d2e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a3d32:	ebb6 0e02 	subs.w	lr, r6, r2
 80a3d36:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a3d3a:	bf22      	ittt	cs
 80a3d3c:	1ab6      	subcs	r6, r6, r2
 80a3d3e:	4675      	movcs	r5, lr
 80a3d40:	ea40 000c 	orrcs.w	r0, r0, ip
 80a3d44:	085b      	lsrs	r3, r3, #1
 80a3d46:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3d4a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a3d4e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a3d52:	bf22      	ittt	cs
 80a3d54:	1ab6      	subcs	r6, r6, r2
 80a3d56:	4675      	movcs	r5, lr
 80a3d58:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a3d5c:	085b      	lsrs	r3, r3, #1
 80a3d5e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3d62:	ebb6 0e02 	subs.w	lr, r6, r2
 80a3d66:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a3d6a:	bf22      	ittt	cs
 80a3d6c:	1ab6      	subcs	r6, r6, r2
 80a3d6e:	4675      	movcs	r5, lr
 80a3d70:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a3d74:	085b      	lsrs	r3, r3, #1
 80a3d76:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3d7a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a3d7e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a3d82:	bf22      	ittt	cs
 80a3d84:	1ab6      	subcs	r6, r6, r2
 80a3d86:	4675      	movcs	r5, lr
 80a3d88:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a3d8c:	ea55 0e06 	orrs.w	lr, r5, r6
 80a3d90:	d018      	beq.n	80a3dc4 <__aeabi_ddiv+0x114>
 80a3d92:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a3d96:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a3d9a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a3d9e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a3da2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a3da6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a3daa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a3dae:	d1c0      	bne.n	80a3d32 <__aeabi_ddiv+0x82>
 80a3db0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a3db4:	d10b      	bne.n	80a3dce <__aeabi_ddiv+0x11e>
 80a3db6:	ea41 0100 	orr.w	r1, r1, r0
 80a3dba:	f04f 0000 	mov.w	r0, #0
 80a3dbe:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a3dc2:	e7b6      	b.n	80a3d32 <__aeabi_ddiv+0x82>
 80a3dc4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a3dc8:	bf04      	itt	eq
 80a3dca:	4301      	orreq	r1, r0
 80a3dcc:	2000      	moveq	r0, #0
 80a3dce:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a3dd2:	bf88      	it	hi
 80a3dd4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a3dd8:	f63f aeaf 	bhi.w	80a3b3a <__aeabi_dmul+0xde>
 80a3ddc:	ebb5 0c03 	subs.w	ip, r5, r3
 80a3de0:	bf04      	itt	eq
 80a3de2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a3de6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a3dea:	f150 0000 	adcs.w	r0, r0, #0
 80a3dee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a3df2:	bd70      	pop	{r4, r5, r6, pc}
 80a3df4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a3df8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a3dfc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a3e00:	bfc2      	ittt	gt
 80a3e02:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a3e06:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a3e0a:	bd70      	popgt	{r4, r5, r6, pc}
 80a3e0c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a3e10:	f04f 0e00 	mov.w	lr, #0
 80a3e14:	3c01      	subs	r4, #1
 80a3e16:	e690      	b.n	80a3b3a <__aeabi_dmul+0xde>
 80a3e18:	ea45 0e06 	orr.w	lr, r5, r6
 80a3e1c:	e68d      	b.n	80a3b3a <__aeabi_dmul+0xde>
 80a3e1e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a3e22:	ea94 0f0c 	teq	r4, ip
 80a3e26:	bf08      	it	eq
 80a3e28:	ea95 0f0c 	teqeq	r5, ip
 80a3e2c:	f43f af3b 	beq.w	80a3ca6 <__aeabi_dmul+0x24a>
 80a3e30:	ea94 0f0c 	teq	r4, ip
 80a3e34:	d10a      	bne.n	80a3e4c <__aeabi_ddiv+0x19c>
 80a3e36:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a3e3a:	f47f af34 	bne.w	80a3ca6 <__aeabi_dmul+0x24a>
 80a3e3e:	ea95 0f0c 	teq	r5, ip
 80a3e42:	f47f af25 	bne.w	80a3c90 <__aeabi_dmul+0x234>
 80a3e46:	4610      	mov	r0, r2
 80a3e48:	4619      	mov	r1, r3
 80a3e4a:	e72c      	b.n	80a3ca6 <__aeabi_dmul+0x24a>
 80a3e4c:	ea95 0f0c 	teq	r5, ip
 80a3e50:	d106      	bne.n	80a3e60 <__aeabi_ddiv+0x1b0>
 80a3e52:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a3e56:	f43f aefd 	beq.w	80a3c54 <__aeabi_dmul+0x1f8>
 80a3e5a:	4610      	mov	r0, r2
 80a3e5c:	4619      	mov	r1, r3
 80a3e5e:	e722      	b.n	80a3ca6 <__aeabi_dmul+0x24a>
 80a3e60:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a3e64:	bf18      	it	ne
 80a3e66:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a3e6a:	f47f aec5 	bne.w	80a3bf8 <__aeabi_dmul+0x19c>
 80a3e6e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a3e72:	f47f af0d 	bne.w	80a3c90 <__aeabi_dmul+0x234>
 80a3e76:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a3e7a:	f47f aeeb 	bne.w	80a3c54 <__aeabi_dmul+0x1f8>
 80a3e7e:	e712      	b.n	80a3ca6 <__aeabi_dmul+0x24a>

080a3e80 <__gedf2>:
 80a3e80:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a3e84:	e006      	b.n	80a3e94 <__cmpdf2+0x4>
 80a3e86:	bf00      	nop

080a3e88 <__ledf2>:
 80a3e88:	f04f 0c01 	mov.w	ip, #1
 80a3e8c:	e002      	b.n	80a3e94 <__cmpdf2+0x4>
 80a3e8e:	bf00      	nop

080a3e90 <__cmpdf2>:
 80a3e90:	f04f 0c01 	mov.w	ip, #1
 80a3e94:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a3e98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a3e9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3ea0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a3ea4:	bf18      	it	ne
 80a3ea6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a3eaa:	d01b      	beq.n	80a3ee4 <__cmpdf2+0x54>
 80a3eac:	b001      	add	sp, #4
 80a3eae:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a3eb2:	bf0c      	ite	eq
 80a3eb4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a3eb8:	ea91 0f03 	teqne	r1, r3
 80a3ebc:	bf02      	ittt	eq
 80a3ebe:	ea90 0f02 	teqeq	r0, r2
 80a3ec2:	2000      	moveq	r0, #0
 80a3ec4:	4770      	bxeq	lr
 80a3ec6:	f110 0f00 	cmn.w	r0, #0
 80a3eca:	ea91 0f03 	teq	r1, r3
 80a3ece:	bf58      	it	pl
 80a3ed0:	4299      	cmppl	r1, r3
 80a3ed2:	bf08      	it	eq
 80a3ed4:	4290      	cmpeq	r0, r2
 80a3ed6:	bf2c      	ite	cs
 80a3ed8:	17d8      	asrcs	r0, r3, #31
 80a3eda:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a3ede:	f040 0001 	orr.w	r0, r0, #1
 80a3ee2:	4770      	bx	lr
 80a3ee4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a3ee8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3eec:	d102      	bne.n	80a3ef4 <__cmpdf2+0x64>
 80a3eee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a3ef2:	d107      	bne.n	80a3f04 <__cmpdf2+0x74>
 80a3ef4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a3ef8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3efc:	d1d6      	bne.n	80a3eac <__cmpdf2+0x1c>
 80a3efe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a3f02:	d0d3      	beq.n	80a3eac <__cmpdf2+0x1c>
 80a3f04:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a3f08:	4770      	bx	lr
 80a3f0a:	bf00      	nop

080a3f0c <__aeabi_cdrcmple>:
 80a3f0c:	4684      	mov	ip, r0
 80a3f0e:	4610      	mov	r0, r2
 80a3f10:	4662      	mov	r2, ip
 80a3f12:	468c      	mov	ip, r1
 80a3f14:	4619      	mov	r1, r3
 80a3f16:	4663      	mov	r3, ip
 80a3f18:	e000      	b.n	80a3f1c <__aeabi_cdcmpeq>
 80a3f1a:	bf00      	nop

080a3f1c <__aeabi_cdcmpeq>:
 80a3f1c:	b501      	push	{r0, lr}
 80a3f1e:	f7ff ffb7 	bl	80a3e90 <__cmpdf2>
 80a3f22:	2800      	cmp	r0, #0
 80a3f24:	bf48      	it	mi
 80a3f26:	f110 0f00 	cmnmi.w	r0, #0
 80a3f2a:	bd01      	pop	{r0, pc}

080a3f2c <__aeabi_dcmpeq>:
 80a3f2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3f30:	f7ff fff4 	bl	80a3f1c <__aeabi_cdcmpeq>
 80a3f34:	bf0c      	ite	eq
 80a3f36:	2001      	moveq	r0, #1
 80a3f38:	2000      	movne	r0, #0
 80a3f3a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3f3e:	bf00      	nop

080a3f40 <__aeabi_dcmplt>:
 80a3f40:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3f44:	f7ff ffea 	bl	80a3f1c <__aeabi_cdcmpeq>
 80a3f48:	bf34      	ite	cc
 80a3f4a:	2001      	movcc	r0, #1
 80a3f4c:	2000      	movcs	r0, #0
 80a3f4e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3f52:	bf00      	nop

080a3f54 <__aeabi_dcmple>:
 80a3f54:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3f58:	f7ff ffe0 	bl	80a3f1c <__aeabi_cdcmpeq>
 80a3f5c:	bf94      	ite	ls
 80a3f5e:	2001      	movls	r0, #1
 80a3f60:	2000      	movhi	r0, #0
 80a3f62:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3f66:	bf00      	nop

080a3f68 <__aeabi_dcmpge>:
 80a3f68:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3f6c:	f7ff ffce 	bl	80a3f0c <__aeabi_cdrcmple>
 80a3f70:	bf94      	ite	ls
 80a3f72:	2001      	movls	r0, #1
 80a3f74:	2000      	movhi	r0, #0
 80a3f76:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3f7a:	bf00      	nop

080a3f7c <__aeabi_dcmpgt>:
 80a3f7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3f80:	f7ff ffc4 	bl	80a3f0c <__aeabi_cdrcmple>
 80a3f84:	bf34      	ite	cc
 80a3f86:	2001      	movcc	r0, #1
 80a3f88:	2000      	movcs	r0, #0
 80a3f8a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3f8e:	bf00      	nop

080a3f90 <__aeabi_d2iz>:
 80a3f90:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a3f94:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a3f98:	d215      	bcs.n	80a3fc6 <__aeabi_d2iz+0x36>
 80a3f9a:	d511      	bpl.n	80a3fc0 <__aeabi_d2iz+0x30>
 80a3f9c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a3fa0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a3fa4:	d912      	bls.n	80a3fcc <__aeabi_d2iz+0x3c>
 80a3fa6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a3faa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a3fae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a3fb2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a3fb6:	fa23 f002 	lsr.w	r0, r3, r2
 80a3fba:	bf18      	it	ne
 80a3fbc:	4240      	negne	r0, r0
 80a3fbe:	4770      	bx	lr
 80a3fc0:	f04f 0000 	mov.w	r0, #0
 80a3fc4:	4770      	bx	lr
 80a3fc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a3fca:	d105      	bne.n	80a3fd8 <__aeabi_d2iz+0x48>
 80a3fcc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a3fd0:	bf08      	it	eq
 80a3fd2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a3fd6:	4770      	bx	lr
 80a3fd8:	f04f 0000 	mov.w	r0, #0
 80a3fdc:	4770      	bx	lr
 80a3fde:	bf00      	nop

080a3fe0 <__aeabi_d2uiz>:
 80a3fe0:	004a      	lsls	r2, r1, #1
 80a3fe2:	d211      	bcs.n	80a4008 <__aeabi_d2uiz+0x28>
 80a3fe4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a3fe8:	d211      	bcs.n	80a400e <__aeabi_d2uiz+0x2e>
 80a3fea:	d50d      	bpl.n	80a4008 <__aeabi_d2uiz+0x28>
 80a3fec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a3ff0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a3ff4:	d40e      	bmi.n	80a4014 <__aeabi_d2uiz+0x34>
 80a3ff6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a3ffa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a3ffe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a4002:	fa23 f002 	lsr.w	r0, r3, r2
 80a4006:	4770      	bx	lr
 80a4008:	f04f 0000 	mov.w	r0, #0
 80a400c:	4770      	bx	lr
 80a400e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a4012:	d102      	bne.n	80a401a <__aeabi_d2uiz+0x3a>
 80a4014:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a4018:	4770      	bx	lr
 80a401a:	f04f 0000 	mov.w	r0, #0
 80a401e:	4770      	bx	lr

080a4020 <__aeabi_d2f>:
 80a4020:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a4024:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a4028:	bf24      	itt	cs
 80a402a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a402e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a4032:	d90d      	bls.n	80a4050 <__aeabi_d2f+0x30>
 80a4034:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a4038:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a403c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a4040:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a4044:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a4048:	bf08      	it	eq
 80a404a:	f020 0001 	biceq.w	r0, r0, #1
 80a404e:	4770      	bx	lr
 80a4050:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a4054:	d121      	bne.n	80a409a <__aeabi_d2f+0x7a>
 80a4056:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a405a:	bfbc      	itt	lt
 80a405c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a4060:	4770      	bxlt	lr
 80a4062:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a4066:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a406a:	f1c2 0218 	rsb	r2, r2, #24
 80a406e:	f1c2 0c20 	rsb	ip, r2, #32
 80a4072:	fa10 f30c 	lsls.w	r3, r0, ip
 80a4076:	fa20 f002 	lsr.w	r0, r0, r2
 80a407a:	bf18      	it	ne
 80a407c:	f040 0001 	orrne.w	r0, r0, #1
 80a4080:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a4084:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a4088:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a408c:	ea40 000c 	orr.w	r0, r0, ip
 80a4090:	fa23 f302 	lsr.w	r3, r3, r2
 80a4094:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a4098:	e7cc      	b.n	80a4034 <__aeabi_d2f+0x14>
 80a409a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a409e:	d107      	bne.n	80a40b0 <__aeabi_d2f+0x90>
 80a40a0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a40a4:	bf1e      	ittt	ne
 80a40a6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a40aa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a40ae:	4770      	bxne	lr
 80a40b0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a40b4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a40b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a40bc:	4770      	bx	lr
 80a40be:	bf00      	nop

080a40c0 <__aeabi_frsub>:
 80a40c0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a40c4:	e002      	b.n	80a40cc <__addsf3>
 80a40c6:	bf00      	nop

080a40c8 <__aeabi_fsub>:
 80a40c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a40cc <__addsf3>:
 80a40cc:	0042      	lsls	r2, r0, #1
 80a40ce:	bf1f      	itttt	ne
 80a40d0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a40d4:	ea92 0f03 	teqne	r2, r3
 80a40d8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a40dc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a40e0:	d06a      	beq.n	80a41b8 <__addsf3+0xec>
 80a40e2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a40e6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a40ea:	bfc1      	itttt	gt
 80a40ec:	18d2      	addgt	r2, r2, r3
 80a40ee:	4041      	eorgt	r1, r0
 80a40f0:	4048      	eorgt	r0, r1
 80a40f2:	4041      	eorgt	r1, r0
 80a40f4:	bfb8      	it	lt
 80a40f6:	425b      	neglt	r3, r3
 80a40f8:	2b19      	cmp	r3, #25
 80a40fa:	bf88      	it	hi
 80a40fc:	4770      	bxhi	lr
 80a40fe:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a4102:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4106:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a410a:	bf18      	it	ne
 80a410c:	4240      	negne	r0, r0
 80a410e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a4112:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a4116:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a411a:	bf18      	it	ne
 80a411c:	4249      	negne	r1, r1
 80a411e:	ea92 0f03 	teq	r2, r3
 80a4122:	d03f      	beq.n	80a41a4 <__addsf3+0xd8>
 80a4124:	f1a2 0201 	sub.w	r2, r2, #1
 80a4128:	fa41 fc03 	asr.w	ip, r1, r3
 80a412c:	eb10 000c 	adds.w	r0, r0, ip
 80a4130:	f1c3 0320 	rsb	r3, r3, #32
 80a4134:	fa01 f103 	lsl.w	r1, r1, r3
 80a4138:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a413c:	d502      	bpl.n	80a4144 <__addsf3+0x78>
 80a413e:	4249      	negs	r1, r1
 80a4140:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a4144:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a4148:	d313      	bcc.n	80a4172 <__addsf3+0xa6>
 80a414a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a414e:	d306      	bcc.n	80a415e <__addsf3+0x92>
 80a4150:	0840      	lsrs	r0, r0, #1
 80a4152:	ea4f 0131 	mov.w	r1, r1, rrx
 80a4156:	f102 0201 	add.w	r2, r2, #1
 80a415a:	2afe      	cmp	r2, #254	; 0xfe
 80a415c:	d251      	bcs.n	80a4202 <__addsf3+0x136>
 80a415e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a4162:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a4166:	bf08      	it	eq
 80a4168:	f020 0001 	biceq.w	r0, r0, #1
 80a416c:	ea40 0003 	orr.w	r0, r0, r3
 80a4170:	4770      	bx	lr
 80a4172:	0049      	lsls	r1, r1, #1
 80a4174:	eb40 0000 	adc.w	r0, r0, r0
 80a4178:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a417c:	f1a2 0201 	sub.w	r2, r2, #1
 80a4180:	d1ed      	bne.n	80a415e <__addsf3+0x92>
 80a4182:	fab0 fc80 	clz	ip, r0
 80a4186:	f1ac 0c08 	sub.w	ip, ip, #8
 80a418a:	ebb2 020c 	subs.w	r2, r2, ip
 80a418e:	fa00 f00c 	lsl.w	r0, r0, ip
 80a4192:	bfaa      	itet	ge
 80a4194:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a4198:	4252      	neglt	r2, r2
 80a419a:	4318      	orrge	r0, r3
 80a419c:	bfbc      	itt	lt
 80a419e:	40d0      	lsrlt	r0, r2
 80a41a0:	4318      	orrlt	r0, r3
 80a41a2:	4770      	bx	lr
 80a41a4:	f092 0f00 	teq	r2, #0
 80a41a8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a41ac:	bf06      	itte	eq
 80a41ae:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a41b2:	3201      	addeq	r2, #1
 80a41b4:	3b01      	subne	r3, #1
 80a41b6:	e7b5      	b.n	80a4124 <__addsf3+0x58>
 80a41b8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a41bc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a41c0:	bf18      	it	ne
 80a41c2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a41c6:	d021      	beq.n	80a420c <__addsf3+0x140>
 80a41c8:	ea92 0f03 	teq	r2, r3
 80a41cc:	d004      	beq.n	80a41d8 <__addsf3+0x10c>
 80a41ce:	f092 0f00 	teq	r2, #0
 80a41d2:	bf08      	it	eq
 80a41d4:	4608      	moveq	r0, r1
 80a41d6:	4770      	bx	lr
 80a41d8:	ea90 0f01 	teq	r0, r1
 80a41dc:	bf1c      	itt	ne
 80a41de:	2000      	movne	r0, #0
 80a41e0:	4770      	bxne	lr
 80a41e2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a41e6:	d104      	bne.n	80a41f2 <__addsf3+0x126>
 80a41e8:	0040      	lsls	r0, r0, #1
 80a41ea:	bf28      	it	cs
 80a41ec:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a41f0:	4770      	bx	lr
 80a41f2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a41f6:	bf3c      	itt	cc
 80a41f8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a41fc:	4770      	bxcc	lr
 80a41fe:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a4202:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a4206:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a420a:	4770      	bx	lr
 80a420c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a4210:	bf16      	itet	ne
 80a4212:	4608      	movne	r0, r1
 80a4214:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a4218:	4601      	movne	r1, r0
 80a421a:	0242      	lsls	r2, r0, #9
 80a421c:	bf06      	itte	eq
 80a421e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a4222:	ea90 0f01 	teqeq	r0, r1
 80a4226:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a422a:	4770      	bx	lr

080a422c <__aeabi_ui2f>:
 80a422c:	f04f 0300 	mov.w	r3, #0
 80a4230:	e004      	b.n	80a423c <__aeabi_i2f+0x8>
 80a4232:	bf00      	nop

080a4234 <__aeabi_i2f>:
 80a4234:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a4238:	bf48      	it	mi
 80a423a:	4240      	negmi	r0, r0
 80a423c:	ea5f 0c00 	movs.w	ip, r0
 80a4240:	bf08      	it	eq
 80a4242:	4770      	bxeq	lr
 80a4244:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a4248:	4601      	mov	r1, r0
 80a424a:	f04f 0000 	mov.w	r0, #0
 80a424e:	e01c      	b.n	80a428a <__aeabi_l2f+0x2a>

080a4250 <__aeabi_ul2f>:
 80a4250:	ea50 0201 	orrs.w	r2, r0, r1
 80a4254:	bf08      	it	eq
 80a4256:	4770      	bxeq	lr
 80a4258:	f04f 0300 	mov.w	r3, #0
 80a425c:	e00a      	b.n	80a4274 <__aeabi_l2f+0x14>
 80a425e:	bf00      	nop

080a4260 <__aeabi_l2f>:
 80a4260:	ea50 0201 	orrs.w	r2, r0, r1
 80a4264:	bf08      	it	eq
 80a4266:	4770      	bxeq	lr
 80a4268:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a426c:	d502      	bpl.n	80a4274 <__aeabi_l2f+0x14>
 80a426e:	4240      	negs	r0, r0
 80a4270:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a4274:	ea5f 0c01 	movs.w	ip, r1
 80a4278:	bf02      	ittt	eq
 80a427a:	4684      	moveq	ip, r0
 80a427c:	4601      	moveq	r1, r0
 80a427e:	2000      	moveq	r0, #0
 80a4280:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a4284:	bf08      	it	eq
 80a4286:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a428a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a428e:	fabc f28c 	clz	r2, ip
 80a4292:	3a08      	subs	r2, #8
 80a4294:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a4298:	db10      	blt.n	80a42bc <__aeabi_l2f+0x5c>
 80a429a:	fa01 fc02 	lsl.w	ip, r1, r2
 80a429e:	4463      	add	r3, ip
 80a42a0:	fa00 fc02 	lsl.w	ip, r0, r2
 80a42a4:	f1c2 0220 	rsb	r2, r2, #32
 80a42a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a42ac:	fa20 f202 	lsr.w	r2, r0, r2
 80a42b0:	eb43 0002 	adc.w	r0, r3, r2
 80a42b4:	bf08      	it	eq
 80a42b6:	f020 0001 	biceq.w	r0, r0, #1
 80a42ba:	4770      	bx	lr
 80a42bc:	f102 0220 	add.w	r2, r2, #32
 80a42c0:	fa01 fc02 	lsl.w	ip, r1, r2
 80a42c4:	f1c2 0220 	rsb	r2, r2, #32
 80a42c8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a42cc:	fa21 f202 	lsr.w	r2, r1, r2
 80a42d0:	eb43 0002 	adc.w	r0, r3, r2
 80a42d4:	bf08      	it	eq
 80a42d6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a42da:	4770      	bx	lr

080a42dc <__aeabi_fmul>:
 80a42dc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a42e0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a42e4:	bf1e      	ittt	ne
 80a42e6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a42ea:	ea92 0f0c 	teqne	r2, ip
 80a42ee:	ea93 0f0c 	teqne	r3, ip
 80a42f2:	d06f      	beq.n	80a43d4 <__aeabi_fmul+0xf8>
 80a42f4:	441a      	add	r2, r3
 80a42f6:	ea80 0c01 	eor.w	ip, r0, r1
 80a42fa:	0240      	lsls	r0, r0, #9
 80a42fc:	bf18      	it	ne
 80a42fe:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a4302:	d01e      	beq.n	80a4342 <__aeabi_fmul+0x66>
 80a4304:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a4308:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a430c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a4310:	fba0 3101 	umull	r3, r1, r0, r1
 80a4314:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a4318:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a431c:	bf3e      	ittt	cc
 80a431e:	0049      	lslcc	r1, r1, #1
 80a4320:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a4324:	005b      	lslcc	r3, r3, #1
 80a4326:	ea40 0001 	orr.w	r0, r0, r1
 80a432a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a432e:	2afd      	cmp	r2, #253	; 0xfd
 80a4330:	d81d      	bhi.n	80a436e <__aeabi_fmul+0x92>
 80a4332:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a4336:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a433a:	bf08      	it	eq
 80a433c:	f020 0001 	biceq.w	r0, r0, #1
 80a4340:	4770      	bx	lr
 80a4342:	f090 0f00 	teq	r0, #0
 80a4346:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a434a:	bf08      	it	eq
 80a434c:	0249      	lsleq	r1, r1, #9
 80a434e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a4352:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a4356:	3a7f      	subs	r2, #127	; 0x7f
 80a4358:	bfc2      	ittt	gt
 80a435a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a435e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a4362:	4770      	bxgt	lr
 80a4364:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4368:	f04f 0300 	mov.w	r3, #0
 80a436c:	3a01      	subs	r2, #1
 80a436e:	dc5d      	bgt.n	80a442c <__aeabi_fmul+0x150>
 80a4370:	f112 0f19 	cmn.w	r2, #25
 80a4374:	bfdc      	itt	le
 80a4376:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a437a:	4770      	bxle	lr
 80a437c:	f1c2 0200 	rsb	r2, r2, #0
 80a4380:	0041      	lsls	r1, r0, #1
 80a4382:	fa21 f102 	lsr.w	r1, r1, r2
 80a4386:	f1c2 0220 	rsb	r2, r2, #32
 80a438a:	fa00 fc02 	lsl.w	ip, r0, r2
 80a438e:	ea5f 0031 	movs.w	r0, r1, rrx
 80a4392:	f140 0000 	adc.w	r0, r0, #0
 80a4396:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a439a:	bf08      	it	eq
 80a439c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a43a0:	4770      	bx	lr
 80a43a2:	f092 0f00 	teq	r2, #0
 80a43a6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a43aa:	bf02      	ittt	eq
 80a43ac:	0040      	lsleq	r0, r0, #1
 80a43ae:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a43b2:	3a01      	subeq	r2, #1
 80a43b4:	d0f9      	beq.n	80a43aa <__aeabi_fmul+0xce>
 80a43b6:	ea40 000c 	orr.w	r0, r0, ip
 80a43ba:	f093 0f00 	teq	r3, #0
 80a43be:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a43c2:	bf02      	ittt	eq
 80a43c4:	0049      	lsleq	r1, r1, #1
 80a43c6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a43ca:	3b01      	subeq	r3, #1
 80a43cc:	d0f9      	beq.n	80a43c2 <__aeabi_fmul+0xe6>
 80a43ce:	ea41 010c 	orr.w	r1, r1, ip
 80a43d2:	e78f      	b.n	80a42f4 <__aeabi_fmul+0x18>
 80a43d4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a43d8:	ea92 0f0c 	teq	r2, ip
 80a43dc:	bf18      	it	ne
 80a43de:	ea93 0f0c 	teqne	r3, ip
 80a43e2:	d00a      	beq.n	80a43fa <__aeabi_fmul+0x11e>
 80a43e4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a43e8:	bf18      	it	ne
 80a43ea:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a43ee:	d1d8      	bne.n	80a43a2 <__aeabi_fmul+0xc6>
 80a43f0:	ea80 0001 	eor.w	r0, r0, r1
 80a43f4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a43f8:	4770      	bx	lr
 80a43fa:	f090 0f00 	teq	r0, #0
 80a43fe:	bf17      	itett	ne
 80a4400:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a4404:	4608      	moveq	r0, r1
 80a4406:	f091 0f00 	teqne	r1, #0
 80a440a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a440e:	d014      	beq.n	80a443a <__aeabi_fmul+0x15e>
 80a4410:	ea92 0f0c 	teq	r2, ip
 80a4414:	d101      	bne.n	80a441a <__aeabi_fmul+0x13e>
 80a4416:	0242      	lsls	r2, r0, #9
 80a4418:	d10f      	bne.n	80a443a <__aeabi_fmul+0x15e>
 80a441a:	ea93 0f0c 	teq	r3, ip
 80a441e:	d103      	bne.n	80a4428 <__aeabi_fmul+0x14c>
 80a4420:	024b      	lsls	r3, r1, #9
 80a4422:	bf18      	it	ne
 80a4424:	4608      	movne	r0, r1
 80a4426:	d108      	bne.n	80a443a <__aeabi_fmul+0x15e>
 80a4428:	ea80 0001 	eor.w	r0, r0, r1
 80a442c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a4430:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a4434:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4438:	4770      	bx	lr
 80a443a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a443e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a4442:	4770      	bx	lr

080a4444 <__aeabi_fdiv>:
 80a4444:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a4448:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a444c:	bf1e      	ittt	ne
 80a444e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a4452:	ea92 0f0c 	teqne	r2, ip
 80a4456:	ea93 0f0c 	teqne	r3, ip
 80a445a:	d069      	beq.n	80a4530 <__aeabi_fdiv+0xec>
 80a445c:	eba2 0203 	sub.w	r2, r2, r3
 80a4460:	ea80 0c01 	eor.w	ip, r0, r1
 80a4464:	0249      	lsls	r1, r1, #9
 80a4466:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a446a:	d037      	beq.n	80a44dc <__aeabi_fdiv+0x98>
 80a446c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a4470:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a4474:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a4478:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a447c:	428b      	cmp	r3, r1
 80a447e:	bf38      	it	cc
 80a4480:	005b      	lslcc	r3, r3, #1
 80a4482:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a4486:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a448a:	428b      	cmp	r3, r1
 80a448c:	bf24      	itt	cs
 80a448e:	1a5b      	subcs	r3, r3, r1
 80a4490:	ea40 000c 	orrcs.w	r0, r0, ip
 80a4494:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a4498:	bf24      	itt	cs
 80a449a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a449e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a44a2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a44a6:	bf24      	itt	cs
 80a44a8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a44ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a44b0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a44b4:	bf24      	itt	cs
 80a44b6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a44ba:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a44be:	011b      	lsls	r3, r3, #4
 80a44c0:	bf18      	it	ne
 80a44c2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a44c6:	d1e0      	bne.n	80a448a <__aeabi_fdiv+0x46>
 80a44c8:	2afd      	cmp	r2, #253	; 0xfd
 80a44ca:	f63f af50 	bhi.w	80a436e <__aeabi_fmul+0x92>
 80a44ce:	428b      	cmp	r3, r1
 80a44d0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a44d4:	bf08      	it	eq
 80a44d6:	f020 0001 	biceq.w	r0, r0, #1
 80a44da:	4770      	bx	lr
 80a44dc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a44e0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a44e4:	327f      	adds	r2, #127	; 0x7f
 80a44e6:	bfc2      	ittt	gt
 80a44e8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a44ec:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a44f0:	4770      	bxgt	lr
 80a44f2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a44f6:	f04f 0300 	mov.w	r3, #0
 80a44fa:	3a01      	subs	r2, #1
 80a44fc:	e737      	b.n	80a436e <__aeabi_fmul+0x92>
 80a44fe:	f092 0f00 	teq	r2, #0
 80a4502:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a4506:	bf02      	ittt	eq
 80a4508:	0040      	lsleq	r0, r0, #1
 80a450a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a450e:	3a01      	subeq	r2, #1
 80a4510:	d0f9      	beq.n	80a4506 <__aeabi_fdiv+0xc2>
 80a4512:	ea40 000c 	orr.w	r0, r0, ip
 80a4516:	f093 0f00 	teq	r3, #0
 80a451a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a451e:	bf02      	ittt	eq
 80a4520:	0049      	lsleq	r1, r1, #1
 80a4522:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a4526:	3b01      	subeq	r3, #1
 80a4528:	d0f9      	beq.n	80a451e <__aeabi_fdiv+0xda>
 80a452a:	ea41 010c 	orr.w	r1, r1, ip
 80a452e:	e795      	b.n	80a445c <__aeabi_fdiv+0x18>
 80a4530:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a4534:	ea92 0f0c 	teq	r2, ip
 80a4538:	d108      	bne.n	80a454c <__aeabi_fdiv+0x108>
 80a453a:	0242      	lsls	r2, r0, #9
 80a453c:	f47f af7d 	bne.w	80a443a <__aeabi_fmul+0x15e>
 80a4540:	ea93 0f0c 	teq	r3, ip
 80a4544:	f47f af70 	bne.w	80a4428 <__aeabi_fmul+0x14c>
 80a4548:	4608      	mov	r0, r1
 80a454a:	e776      	b.n	80a443a <__aeabi_fmul+0x15e>
 80a454c:	ea93 0f0c 	teq	r3, ip
 80a4550:	d104      	bne.n	80a455c <__aeabi_fdiv+0x118>
 80a4552:	024b      	lsls	r3, r1, #9
 80a4554:	f43f af4c 	beq.w	80a43f0 <__aeabi_fmul+0x114>
 80a4558:	4608      	mov	r0, r1
 80a455a:	e76e      	b.n	80a443a <__aeabi_fmul+0x15e>
 80a455c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a4560:	bf18      	it	ne
 80a4562:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a4566:	d1ca      	bne.n	80a44fe <__aeabi_fdiv+0xba>
 80a4568:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a456c:	f47f af5c 	bne.w	80a4428 <__aeabi_fmul+0x14c>
 80a4570:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a4574:	f47f af3c 	bne.w	80a43f0 <__aeabi_fmul+0x114>
 80a4578:	e75f      	b.n	80a443a <__aeabi_fmul+0x15e>
 80a457a:	bf00      	nop

080a457c <__gesf2>:
 80a457c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a4580:	e006      	b.n	80a4590 <__cmpsf2+0x4>
 80a4582:	bf00      	nop

080a4584 <__lesf2>:
 80a4584:	f04f 0c01 	mov.w	ip, #1
 80a4588:	e002      	b.n	80a4590 <__cmpsf2+0x4>
 80a458a:	bf00      	nop

080a458c <__cmpsf2>:
 80a458c:	f04f 0c01 	mov.w	ip, #1
 80a4590:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a4594:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a4598:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a459c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a45a0:	bf18      	it	ne
 80a45a2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a45a6:	d011      	beq.n	80a45cc <__cmpsf2+0x40>
 80a45a8:	b001      	add	sp, #4
 80a45aa:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a45ae:	bf18      	it	ne
 80a45b0:	ea90 0f01 	teqne	r0, r1
 80a45b4:	bf58      	it	pl
 80a45b6:	ebb2 0003 	subspl.w	r0, r2, r3
 80a45ba:	bf88      	it	hi
 80a45bc:	17c8      	asrhi	r0, r1, #31
 80a45be:	bf38      	it	cc
 80a45c0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a45c4:	bf18      	it	ne
 80a45c6:	f040 0001 	orrne.w	r0, r0, #1
 80a45ca:	4770      	bx	lr
 80a45cc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a45d0:	d102      	bne.n	80a45d8 <__cmpsf2+0x4c>
 80a45d2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a45d6:	d105      	bne.n	80a45e4 <__cmpsf2+0x58>
 80a45d8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a45dc:	d1e4      	bne.n	80a45a8 <__cmpsf2+0x1c>
 80a45de:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a45e2:	d0e1      	beq.n	80a45a8 <__cmpsf2+0x1c>
 80a45e4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a45e8:	4770      	bx	lr
 80a45ea:	bf00      	nop

080a45ec <__aeabi_cfrcmple>:
 80a45ec:	4684      	mov	ip, r0
 80a45ee:	4608      	mov	r0, r1
 80a45f0:	4661      	mov	r1, ip
 80a45f2:	e7ff      	b.n	80a45f4 <__aeabi_cfcmpeq>

080a45f4 <__aeabi_cfcmpeq>:
 80a45f4:	b50f      	push	{r0, r1, r2, r3, lr}
 80a45f6:	f7ff ffc9 	bl	80a458c <__cmpsf2>
 80a45fa:	2800      	cmp	r0, #0
 80a45fc:	bf48      	it	mi
 80a45fe:	f110 0f00 	cmnmi.w	r0, #0
 80a4602:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a4604 <__aeabi_fcmpeq>:
 80a4604:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4608:	f7ff fff4 	bl	80a45f4 <__aeabi_cfcmpeq>
 80a460c:	bf0c      	ite	eq
 80a460e:	2001      	moveq	r0, #1
 80a4610:	2000      	movne	r0, #0
 80a4612:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4616:	bf00      	nop

080a4618 <__aeabi_fcmplt>:
 80a4618:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a461c:	f7ff ffea 	bl	80a45f4 <__aeabi_cfcmpeq>
 80a4620:	bf34      	ite	cc
 80a4622:	2001      	movcc	r0, #1
 80a4624:	2000      	movcs	r0, #0
 80a4626:	f85d fb08 	ldr.w	pc, [sp], #8
 80a462a:	bf00      	nop

080a462c <__aeabi_fcmple>:
 80a462c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4630:	f7ff ffe0 	bl	80a45f4 <__aeabi_cfcmpeq>
 80a4634:	bf94      	ite	ls
 80a4636:	2001      	movls	r0, #1
 80a4638:	2000      	movhi	r0, #0
 80a463a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a463e:	bf00      	nop

080a4640 <__aeabi_fcmpge>:
 80a4640:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4644:	f7ff ffd2 	bl	80a45ec <__aeabi_cfrcmple>
 80a4648:	bf94      	ite	ls
 80a464a:	2001      	movls	r0, #1
 80a464c:	2000      	movhi	r0, #0
 80a464e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4652:	bf00      	nop

080a4654 <__aeabi_fcmpgt>:
 80a4654:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4658:	f7ff ffc8 	bl	80a45ec <__aeabi_cfrcmple>
 80a465c:	bf34      	ite	cc
 80a465e:	2001      	movcc	r0, #1
 80a4660:	2000      	movcs	r0, #0
 80a4662:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4666:	bf00      	nop

080a4668 <__aeabi_f2iz>:
 80a4668:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a466c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80a4670:	d30f      	bcc.n	80a4692 <__aeabi_f2iz+0x2a>
 80a4672:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80a4676:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80a467a:	d90d      	bls.n	80a4698 <__aeabi_f2iz+0x30>
 80a467c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80a4680:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a4684:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a4688:	fa23 f002 	lsr.w	r0, r3, r2
 80a468c:	bf18      	it	ne
 80a468e:	4240      	negne	r0, r0
 80a4690:	4770      	bx	lr
 80a4692:	f04f 0000 	mov.w	r0, #0
 80a4696:	4770      	bx	lr
 80a4698:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80a469c:	d101      	bne.n	80a46a2 <__aeabi_f2iz+0x3a>
 80a469e:	0242      	lsls	r2, r0, #9
 80a46a0:	d105      	bne.n	80a46ae <__aeabi_f2iz+0x46>
 80a46a2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80a46a6:	bf08      	it	eq
 80a46a8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a46ac:	4770      	bx	lr
 80a46ae:	f04f 0000 	mov.w	r0, #0
 80a46b2:	4770      	bx	lr

080a46b4 <__aeabi_uldivmod>:
 80a46b4:	b953      	cbnz	r3, 80a46cc <__aeabi_uldivmod+0x18>
 80a46b6:	b94a      	cbnz	r2, 80a46cc <__aeabi_uldivmod+0x18>
 80a46b8:	2900      	cmp	r1, #0
 80a46ba:	bf08      	it	eq
 80a46bc:	2800      	cmpeq	r0, #0
 80a46be:	bf1c      	itt	ne
 80a46c0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80a46c4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80a46c8:	f000 b9a6 	b.w	80a4a18 <__aeabi_idiv0>
 80a46cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80a46d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80a46d4:	f000 f82a 	bl	80a472c <__udivmoddi4>
 80a46d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a46dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a46e0:	b004      	add	sp, #16
 80a46e2:	4770      	bx	lr

080a46e4 <__aeabi_d2ulz>:
 80a46e4:	b5d0      	push	{r4, r6, r7, lr}
 80a46e6:	2200      	movs	r2, #0
 80a46e8:	4b0e      	ldr	r3, [pc, #56]	; (80a4724 <__aeabi_d2ulz+0x40>)
 80a46ea:	4606      	mov	r6, r0
 80a46ec:	460f      	mov	r7, r1
 80a46ee:	f7ff f9b5 	bl	80a3a5c <__aeabi_dmul>
 80a46f2:	f7ff fc75 	bl	80a3fe0 <__aeabi_d2uiz>
 80a46f6:	4604      	mov	r4, r0
 80a46f8:	f7ff f93a 	bl	80a3970 <__aeabi_ui2d>
 80a46fc:	2200      	movs	r2, #0
 80a46fe:	4b0a      	ldr	r3, [pc, #40]	; (80a4728 <__aeabi_d2ulz+0x44>)
 80a4700:	f7ff f9ac 	bl	80a3a5c <__aeabi_dmul>
 80a4704:	4602      	mov	r2, r0
 80a4706:	460b      	mov	r3, r1
 80a4708:	4630      	mov	r0, r6
 80a470a:	4639      	mov	r1, r7
 80a470c:	f7fe fff2 	bl	80a36f4 <__aeabi_dsub>
 80a4710:	f7ff fc66 	bl	80a3fe0 <__aeabi_d2uiz>
 80a4714:	4623      	mov	r3, r4
 80a4716:	2200      	movs	r2, #0
 80a4718:	ea42 0200 	orr.w	r2, r2, r0
 80a471c:	4610      	mov	r0, r2
 80a471e:	4619      	mov	r1, r3
 80a4720:	bdd0      	pop	{r4, r6, r7, pc}
 80a4722:	bf00      	nop
 80a4724:	3df00000 	.word	0x3df00000
 80a4728:	41f00000 	.word	0x41f00000

080a472c <__udivmoddi4>:
 80a472c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a4730:	468c      	mov	ip, r1
 80a4732:	460c      	mov	r4, r1
 80a4734:	4605      	mov	r5, r0
 80a4736:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80a4738:	2b00      	cmp	r3, #0
 80a473a:	d14f      	bne.n	80a47dc <__udivmoddi4+0xb0>
 80a473c:	428a      	cmp	r2, r1
 80a473e:	4617      	mov	r7, r2
 80a4740:	d96b      	bls.n	80a481a <__udivmoddi4+0xee>
 80a4742:	fab2 fe82 	clz	lr, r2
 80a4746:	f1be 0f00 	cmp.w	lr, #0
 80a474a:	d00b      	beq.n	80a4764 <__udivmoddi4+0x38>
 80a474c:	f1ce 0520 	rsb	r5, lr, #32
 80a4750:	fa20 f505 	lsr.w	r5, r0, r5
 80a4754:	fa01 f30e 	lsl.w	r3, r1, lr
 80a4758:	ea45 0c03 	orr.w	ip, r5, r3
 80a475c:	fa02 f70e 	lsl.w	r7, r2, lr
 80a4760:	fa00 f50e 	lsl.w	r5, r0, lr
 80a4764:	0c39      	lsrs	r1, r7, #16
 80a4766:	fbbc f0f1 	udiv	r0, ip, r1
 80a476a:	b2ba      	uxth	r2, r7
 80a476c:	fb01 c310 	mls	r3, r1, r0, ip
 80a4770:	fb00 f802 	mul.w	r8, r0, r2
 80a4774:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 80a4778:	ea4c 4403 	orr.w	r4, ip, r3, lsl #16
 80a477c:	45a0      	cmp	r8, r4
 80a477e:	d909      	bls.n	80a4794 <__udivmoddi4+0x68>
 80a4780:	19e4      	adds	r4, r4, r7
 80a4782:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80a4786:	f080 8128 	bcs.w	80a49da <__udivmoddi4+0x2ae>
 80a478a:	45a0      	cmp	r8, r4
 80a478c:	f240 8125 	bls.w	80a49da <__udivmoddi4+0x2ae>
 80a4790:	3802      	subs	r0, #2
 80a4792:	443c      	add	r4, r7
 80a4794:	ebc8 0404 	rsb	r4, r8, r4
 80a4798:	fbb4 f3f1 	udiv	r3, r4, r1
 80a479c:	fb01 4c13 	mls	ip, r1, r3, r4
 80a47a0:	fb03 f202 	mul.w	r2, r3, r2
 80a47a4:	b2ac      	uxth	r4, r5
 80a47a6:	ea44 410c 	orr.w	r1, r4, ip, lsl #16
 80a47aa:	428a      	cmp	r2, r1
 80a47ac:	d909      	bls.n	80a47c2 <__udivmoddi4+0x96>
 80a47ae:	19c9      	adds	r1, r1, r7
 80a47b0:	f103 34ff 	add.w	r4, r3, #4294967295	; 0xffffffff
 80a47b4:	f080 810f 	bcs.w	80a49d6 <__udivmoddi4+0x2aa>
 80a47b8:	428a      	cmp	r2, r1
 80a47ba:	f240 810c 	bls.w	80a49d6 <__udivmoddi4+0x2aa>
 80a47be:	3b02      	subs	r3, #2
 80a47c0:	4439      	add	r1, r7
 80a47c2:	1a8a      	subs	r2, r1, r2
 80a47c4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80a47c8:	2100      	movs	r1, #0
 80a47ca:	2e00      	cmp	r6, #0
 80a47cc:	d063      	beq.n	80a4896 <__udivmoddi4+0x16a>
 80a47ce:	fa22 f20e 	lsr.w	r2, r2, lr
 80a47d2:	2300      	movs	r3, #0
 80a47d4:	e886 000c 	stmia.w	r6, {r2, r3}
 80a47d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a47dc:	428b      	cmp	r3, r1
 80a47de:	d907      	bls.n	80a47f0 <__udivmoddi4+0xc4>
 80a47e0:	2e00      	cmp	r6, #0
 80a47e2:	d056      	beq.n	80a4892 <__udivmoddi4+0x166>
 80a47e4:	2100      	movs	r1, #0
 80a47e6:	e886 0011 	stmia.w	r6, {r0, r4}
 80a47ea:	4608      	mov	r0, r1
 80a47ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a47f0:	fab3 f183 	clz	r1, r3
 80a47f4:	2900      	cmp	r1, #0
 80a47f6:	f040 8093 	bne.w	80a4920 <__udivmoddi4+0x1f4>
 80a47fa:	42a3      	cmp	r3, r4
 80a47fc:	d302      	bcc.n	80a4804 <__udivmoddi4+0xd8>
 80a47fe:	4282      	cmp	r2, r0
 80a4800:	f200 80fe 	bhi.w	80a4a00 <__udivmoddi4+0x2d4>
 80a4804:	1a85      	subs	r5, r0, r2
 80a4806:	eb64 0303 	sbc.w	r3, r4, r3
 80a480a:	469c      	mov	ip, r3
 80a480c:	2001      	movs	r0, #1
 80a480e:	2e00      	cmp	r6, #0
 80a4810:	d041      	beq.n	80a4896 <__udivmoddi4+0x16a>
 80a4812:	e886 1020 	stmia.w	r6, {r5, ip}
 80a4816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a481a:	b912      	cbnz	r2, 80a4822 <__udivmoddi4+0xf6>
 80a481c:	2701      	movs	r7, #1
 80a481e:	fbb7 f7f2 	udiv	r7, r7, r2
 80a4822:	fab7 fe87 	clz	lr, r7
 80a4826:	f1be 0f00 	cmp.w	lr, #0
 80a482a:	d136      	bne.n	80a489a <__udivmoddi4+0x16e>
 80a482c:	1be4      	subs	r4, r4, r7
 80a482e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80a4832:	fa1f f987 	uxth.w	r9, r7
 80a4836:	2101      	movs	r1, #1
 80a4838:	fbb4 f3f8 	udiv	r3, r4, r8
 80a483c:	fb08 4413 	mls	r4, r8, r3, r4
 80a4840:	fb09 f203 	mul.w	r2, r9, r3
 80a4844:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 80a4848:	ea4c 4404 	orr.w	r4, ip, r4, lsl #16
 80a484c:	42a2      	cmp	r2, r4
 80a484e:	d907      	bls.n	80a4860 <__udivmoddi4+0x134>
 80a4850:	19e4      	adds	r4, r4, r7
 80a4852:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 80a4856:	d202      	bcs.n	80a485e <__udivmoddi4+0x132>
 80a4858:	42a2      	cmp	r2, r4
 80a485a:	f200 80d3 	bhi.w	80a4a04 <__udivmoddi4+0x2d8>
 80a485e:	4603      	mov	r3, r0
 80a4860:	1aa4      	subs	r4, r4, r2
 80a4862:	fbb4 f0f8 	udiv	r0, r4, r8
 80a4866:	fb08 4810 	mls	r8, r8, r0, r4
 80a486a:	fb09 f900 	mul.w	r9, r9, r0
 80a486e:	b2ac      	uxth	r4, r5
 80a4870:	ea44 4208 	orr.w	r2, r4, r8, lsl #16
 80a4874:	4591      	cmp	r9, r2
 80a4876:	d907      	bls.n	80a4888 <__udivmoddi4+0x15c>
 80a4878:	19d2      	adds	r2, r2, r7
 80a487a:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80a487e:	d202      	bcs.n	80a4886 <__udivmoddi4+0x15a>
 80a4880:	4591      	cmp	r9, r2
 80a4882:	f200 80ba 	bhi.w	80a49fa <__udivmoddi4+0x2ce>
 80a4886:	4620      	mov	r0, r4
 80a4888:	ebc9 0202 	rsb	r2, r9, r2
 80a488c:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80a4890:	e79b      	b.n	80a47ca <__udivmoddi4+0x9e>
 80a4892:	4631      	mov	r1, r6
 80a4894:	4630      	mov	r0, r6
 80a4896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a489a:	fa07 f70e 	lsl.w	r7, r7, lr
 80a489e:	f1ce 0c20 	rsb	ip, lr, #32
 80a48a2:	fa24 f30c 	lsr.w	r3, r4, ip
 80a48a6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80a48aa:	fbb3 faf8 	udiv	sl, r3, r8
 80a48ae:	fa1f f987 	uxth.w	r9, r7
 80a48b2:	fb08 351a 	mls	r5, r8, sl, r3
 80a48b6:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a48ba:	fa04 f40e 	lsl.w	r4, r4, lr
 80a48be:	fb0a fb09 	mul.w	fp, sl, r9
 80a48c2:	ea4c 0c04 	orr.w	ip, ip, r4
 80a48c6:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80a48ca:	ea42 4305 	orr.w	r3, r2, r5, lsl #16
 80a48ce:	459b      	cmp	fp, r3
 80a48d0:	fa00 f50e 	lsl.w	r5, r0, lr
 80a48d4:	d90a      	bls.n	80a48ec <__udivmoddi4+0x1c0>
 80a48d6:	19db      	adds	r3, r3, r7
 80a48d8:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
 80a48dc:	f080 808b 	bcs.w	80a49f6 <__udivmoddi4+0x2ca>
 80a48e0:	459b      	cmp	fp, r3
 80a48e2:	f240 8088 	bls.w	80a49f6 <__udivmoddi4+0x2ca>
 80a48e6:	f1aa 0a02 	sub.w	sl, sl, #2
 80a48ea:	443b      	add	r3, r7
 80a48ec:	ebcb 0303 	rsb	r3, fp, r3
 80a48f0:	fbb3 f0f8 	udiv	r0, r3, r8
 80a48f4:	fb08 3310 	mls	r3, r8, r0, r3
 80a48f8:	fb00 f409 	mul.w	r4, r0, r9
 80a48fc:	fa1f fc8c 	uxth.w	ip, ip
 80a4900:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
 80a4904:	429c      	cmp	r4, r3
 80a4906:	d907      	bls.n	80a4918 <__udivmoddi4+0x1ec>
 80a4908:	19db      	adds	r3, r3, r7
 80a490a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80a490e:	d26e      	bcs.n	80a49ee <__udivmoddi4+0x2c2>
 80a4910:	429c      	cmp	r4, r3
 80a4912:	d96c      	bls.n	80a49ee <__udivmoddi4+0x2c2>
 80a4914:	3802      	subs	r0, #2
 80a4916:	443b      	add	r3, r7
 80a4918:	1b1c      	subs	r4, r3, r4
 80a491a:	ea40 410a 	orr.w	r1, r0, sl, lsl #16
 80a491e:	e78b      	b.n	80a4838 <__udivmoddi4+0x10c>
 80a4920:	f1c1 0e20 	rsb	lr, r1, #32
 80a4924:	408b      	lsls	r3, r1
 80a4926:	fa22 fc0e 	lsr.w	ip, r2, lr
 80a492a:	ea4c 0c03 	orr.w	ip, ip, r3
 80a492e:	fa24 f70e 	lsr.w	r7, r4, lr
 80a4932:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80a4936:	fbb7 faf9 	udiv	sl, r7, r9
 80a493a:	fa1f f38c 	uxth.w	r3, ip
 80a493e:	fb09 771a 	mls	r7, r9, sl, r7
 80a4942:	fa20 f80e 	lsr.w	r8, r0, lr
 80a4946:	408c      	lsls	r4, r1
 80a4948:	fb0a f503 	mul.w	r5, sl, r3
 80a494c:	ea48 0404 	orr.w	r4, r8, r4
 80a4950:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80a4954:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 80a4958:	42bd      	cmp	r5, r7
 80a495a:	fa02 f201 	lsl.w	r2, r2, r1
 80a495e:	fa00 fb01 	lsl.w	fp, r0, r1
 80a4962:	d909      	bls.n	80a4978 <__udivmoddi4+0x24c>
 80a4964:	eb17 070c 	adds.w	r7, r7, ip
 80a4968:	f10a 30ff 	add.w	r0, sl, #4294967295	; 0xffffffff
 80a496c:	d241      	bcs.n	80a49f2 <__udivmoddi4+0x2c6>
 80a496e:	42bd      	cmp	r5, r7
 80a4970:	d93f      	bls.n	80a49f2 <__udivmoddi4+0x2c6>
 80a4972:	f1aa 0a02 	sub.w	sl, sl, #2
 80a4976:	4467      	add	r7, ip
 80a4978:	1b7f      	subs	r7, r7, r5
 80a497a:	fbb7 f5f9 	udiv	r5, r7, r9
 80a497e:	fb09 7715 	mls	r7, r9, r5, r7
 80a4982:	fb05 f303 	mul.w	r3, r5, r3
 80a4986:	b2a4      	uxth	r4, r4
 80a4988:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 80a498c:	42bb      	cmp	r3, r7
 80a498e:	d908      	bls.n	80a49a2 <__udivmoddi4+0x276>
 80a4990:	eb17 070c 	adds.w	r7, r7, ip
 80a4994:	f105 30ff 	add.w	r0, r5, #4294967295	; 0xffffffff
 80a4998:	d227      	bcs.n	80a49ea <__udivmoddi4+0x2be>
 80a499a:	42bb      	cmp	r3, r7
 80a499c:	d925      	bls.n	80a49ea <__udivmoddi4+0x2be>
 80a499e:	3d02      	subs	r5, #2
 80a49a0:	4467      	add	r7, ip
 80a49a2:	ea45 400a 	orr.w	r0, r5, sl, lsl #16
 80a49a6:	fba0 8902 	umull	r8, r9, r0, r2
 80a49aa:	1aff      	subs	r7, r7, r3
 80a49ac:	454f      	cmp	r7, r9
 80a49ae:	4645      	mov	r5, r8
 80a49b0:	464c      	mov	r4, r9
 80a49b2:	d314      	bcc.n	80a49de <__udivmoddi4+0x2b2>
 80a49b4:	d029      	beq.n	80a4a0a <__udivmoddi4+0x2de>
 80a49b6:	b366      	cbz	r6, 80a4a12 <__udivmoddi4+0x2e6>
 80a49b8:	ebbb 0305 	subs.w	r3, fp, r5
 80a49bc:	eb67 0704 	sbc.w	r7, r7, r4
 80a49c0:	fa07 fe0e 	lsl.w	lr, r7, lr
 80a49c4:	40cb      	lsrs	r3, r1
 80a49c6:	40cf      	lsrs	r7, r1
 80a49c8:	ea4e 0303 	orr.w	r3, lr, r3
 80a49cc:	e886 0088 	stmia.w	r6, {r3, r7}
 80a49d0:	2100      	movs	r1, #0
 80a49d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a49d6:	4623      	mov	r3, r4
 80a49d8:	e6f3      	b.n	80a47c2 <__udivmoddi4+0x96>
 80a49da:	4618      	mov	r0, r3
 80a49dc:	e6da      	b.n	80a4794 <__udivmoddi4+0x68>
 80a49de:	ebb8 0502 	subs.w	r5, r8, r2
 80a49e2:	eb69 040c 	sbc.w	r4, r9, ip
 80a49e6:	3801      	subs	r0, #1
 80a49e8:	e7e5      	b.n	80a49b6 <__udivmoddi4+0x28a>
 80a49ea:	4605      	mov	r5, r0
 80a49ec:	e7d9      	b.n	80a49a2 <__udivmoddi4+0x276>
 80a49ee:	4610      	mov	r0, r2
 80a49f0:	e792      	b.n	80a4918 <__udivmoddi4+0x1ec>
 80a49f2:	4682      	mov	sl, r0
 80a49f4:	e7c0      	b.n	80a4978 <__udivmoddi4+0x24c>
 80a49f6:	4692      	mov	sl, r2
 80a49f8:	e778      	b.n	80a48ec <__udivmoddi4+0x1c0>
 80a49fa:	3802      	subs	r0, #2
 80a49fc:	443a      	add	r2, r7
 80a49fe:	e743      	b.n	80a4888 <__udivmoddi4+0x15c>
 80a4a00:	4608      	mov	r0, r1
 80a4a02:	e704      	b.n	80a480e <__udivmoddi4+0xe2>
 80a4a04:	3b02      	subs	r3, #2
 80a4a06:	443c      	add	r4, r7
 80a4a08:	e72a      	b.n	80a4860 <__udivmoddi4+0x134>
 80a4a0a:	45c3      	cmp	fp, r8
 80a4a0c:	d3e7      	bcc.n	80a49de <__udivmoddi4+0x2b2>
 80a4a0e:	463c      	mov	r4, r7
 80a4a10:	e7d1      	b.n	80a49b6 <__udivmoddi4+0x28a>
 80a4a12:	4631      	mov	r1, r6
 80a4a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a4a18 <__aeabi_idiv0>:
 80a4a18:	4770      	bx	lr
 80a4a1a:	bf00      	nop

080a4a1c <asctime>:
 80a4a1c:	4b09      	ldr	r3, [pc, #36]	; (80a4a44 <asctime+0x28>)
 80a4a1e:	b570      	push	{r4, r5, r6, lr}
 80a4a20:	681c      	ldr	r4, [r3, #0]
 80a4a22:	4606      	mov	r6, r0
 80a4a24:	6c25      	ldr	r5, [r4, #64]	; 0x40
 80a4a26:	b93d      	cbnz	r5, 80a4a38 <asctime+0x1c>
 80a4a28:	201a      	movs	r0, #26
 80a4a2a:	f7fd f925 	bl	80a1c78 <malloc>
 80a4a2e:	221a      	movs	r2, #26
 80a4a30:	6420      	str	r0, [r4, #64]	; 0x40
 80a4a32:	4629      	mov	r1, r5
 80a4a34:	f000 f94b 	bl	80a4cce <memset>
 80a4a38:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80a4a3a:	4630      	mov	r0, r6
 80a4a3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a4a40:	f000 b802 	b.w	80a4a48 <asctime_r>
 80a4a44:	200003ec 	.word	0x200003ec

080a4a48 <asctime_r>:
 80a4a48:	b510      	push	{r4, lr}
 80a4a4a:	460c      	mov	r4, r1
 80a4a4c:	6941      	ldr	r1, [r0, #20]
 80a4a4e:	b086      	sub	sp, #24
 80a4a50:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 80a4a54:	6903      	ldr	r3, [r0, #16]
 80a4a56:	6982      	ldr	r2, [r0, #24]
 80a4a58:	9104      	str	r1, [sp, #16]
 80a4a5a:	6801      	ldr	r1, [r0, #0]
 80a4a5c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80a4a60:	9103      	str	r1, [sp, #12]
 80a4a62:	6841      	ldr	r1, [r0, #4]
 80a4a64:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80a4a68:	9102      	str	r1, [sp, #8]
 80a4a6a:	6881      	ldr	r1, [r0, #8]
 80a4a6c:	9101      	str	r1, [sp, #4]
 80a4a6e:	68c1      	ldr	r1, [r0, #12]
 80a4a70:	4620      	mov	r0, r4
 80a4a72:	9100      	str	r1, [sp, #0]
 80a4a74:	4904      	ldr	r1, [pc, #16]	; (80a4a88 <asctime_r+0x40>)
 80a4a76:	440b      	add	r3, r1
 80a4a78:	4904      	ldr	r1, [pc, #16]	; (80a4a8c <asctime_r+0x44>)
 80a4a7a:	440a      	add	r2, r1
 80a4a7c:	4904      	ldr	r1, [pc, #16]	; (80a4a90 <asctime_r+0x48>)
 80a4a7e:	f7fd f913 	bl	80a1ca8 <siprintf>
 80a4a82:	4620      	mov	r0, r4
 80a4a84:	b006      	add	sp, #24
 80a4a86:	bd10      	pop	{r4, pc}
 80a4a88:	080a7ff1 	.word	0x080a7ff1
 80a4a8c:	080a7fdc 	.word	0x080a7fdc
 80a4a90:	080a8015 	.word	0x080a8015

080a4a94 <atof>:
 80a4a94:	2100      	movs	r1, #0
 80a4a96:	f001 bccb 	b.w	80a6430 <strtod>

080a4a9a <atol>:
 80a4a9a:	220a      	movs	r2, #10
 80a4a9c:	2100      	movs	r1, #0
 80a4a9e:	f001 bd55 	b.w	80a654c <strtol>
	...

080a4aa4 <__cxa_atexit>:
 80a4aa4:	b510      	push	{r4, lr}
 80a4aa6:	4c05      	ldr	r4, [pc, #20]	; (80a4abc <__cxa_atexit+0x18>)
 80a4aa8:	4613      	mov	r3, r2
 80a4aaa:	b12c      	cbz	r4, 80a4ab8 <__cxa_atexit+0x14>
 80a4aac:	460a      	mov	r2, r1
 80a4aae:	4601      	mov	r1, r0
 80a4ab0:	2002      	movs	r0, #2
 80a4ab2:	f3af 8000 	nop.w
 80a4ab6:	bd10      	pop	{r4, pc}
 80a4ab8:	4620      	mov	r0, r4
 80a4aba:	bd10      	pop	{r4, pc}
 80a4abc:	00000000 	.word	0x00000000

080a4ac0 <localtime>:
 80a4ac0:	b538      	push	{r3, r4, r5, lr}
 80a4ac2:	4b07      	ldr	r3, [pc, #28]	; (80a4ae0 <localtime+0x20>)
 80a4ac4:	4605      	mov	r5, r0
 80a4ac6:	681c      	ldr	r4, [r3, #0]
 80a4ac8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80a4aca:	b91b      	cbnz	r3, 80a4ad4 <localtime+0x14>
 80a4acc:	2024      	movs	r0, #36	; 0x24
 80a4ace:	f7fd f8d3 	bl	80a1c78 <malloc>
 80a4ad2:	63e0      	str	r0, [r4, #60]	; 0x3c
 80a4ad4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a4ad6:	4628      	mov	r0, r5
 80a4ad8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a4adc:	f000 b802 	b.w	80a4ae4 <localtime_r>
 80a4ae0:	200003ec 	.word	0x200003ec

080a4ae4 <localtime_r>:
 80a4ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a4ae8:	460c      	mov	r4, r1
 80a4aea:	4680      	mov	r8, r0
 80a4aec:	f002 fb66 	bl	80a71bc <__gettzinfo>
 80a4af0:	4621      	mov	r1, r4
 80a4af2:	4607      	mov	r7, r0
 80a4af4:	4640      	mov	r0, r8
 80a4af6:	f002 fb65 	bl	80a71c4 <gmtime_r>
 80a4afa:	6946      	ldr	r6, [r0, #20]
 80a4afc:	4604      	mov	r4, r0
 80a4afe:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 80a4b02:	07b3      	lsls	r3, r6, #30
 80a4b04:	d105      	bne.n	80a4b12 <localtime_r+0x2e>
 80a4b06:	2264      	movs	r2, #100	; 0x64
 80a4b08:	fb96 f3f2 	sdiv	r3, r6, r2
 80a4b0c:	fb02 6313 	mls	r3, r2, r3, r6
 80a4b10:	b94b      	cbnz	r3, 80a4b26 <localtime_r+0x42>
 80a4b12:	f44f 75c8 	mov.w	r5, #400	; 0x190
 80a4b16:	fb96 f3f5 	sdiv	r3, r6, r5
 80a4b1a:	fb05 6513 	mls	r5, r5, r3, r6
 80a4b1e:	fab5 f385 	clz	r3, r5
 80a4b22:	095b      	lsrs	r3, r3, #5
 80a4b24:	e000      	b.n	80a4b28 <localtime_r+0x44>
 80a4b26:	2301      	movs	r3, #1
 80a4b28:	4a5f      	ldr	r2, [pc, #380]	; (80a4ca8 <localtime_r+0x1c4>)
 80a4b2a:	2530      	movs	r5, #48	; 0x30
 80a4b2c:	fb05 2503 	mla	r5, r5, r3, r2
 80a4b30:	f001 fe56 	bl	80a67e0 <__tz_lock>
 80a4b34:	f001 fe56 	bl	80a67e4 <_tzset_unlocked>
 80a4b38:	4b5c      	ldr	r3, [pc, #368]	; (80a4cac <localtime_r+0x1c8>)
 80a4b3a:	681b      	ldr	r3, [r3, #0]
 80a4b3c:	b1f3      	cbz	r3, 80a4b7c <localtime_r+0x98>
 80a4b3e:	687b      	ldr	r3, [r7, #4]
 80a4b40:	429e      	cmp	r6, r3
 80a4b42:	d105      	bne.n	80a4b50 <localtime_r+0x6c>
 80a4b44:	6839      	ldr	r1, [r7, #0]
 80a4b46:	f8d8 3000 	ldr.w	r3, [r8]
 80a4b4a:	69fa      	ldr	r2, [r7, #28]
 80a4b4c:	b941      	cbnz	r1, 80a4b60 <localtime_r+0x7c>
 80a4b4e:	e00a      	b.n	80a4b66 <localtime_r+0x82>
 80a4b50:	4630      	mov	r0, r6
 80a4b52:	f001 fd9d 	bl	80a6690 <__tzcalc_limits>
 80a4b56:	2800      	cmp	r0, #0
 80a4b58:	d1f4      	bne.n	80a4b44 <localtime_r+0x60>
 80a4b5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a4b5e:	e00d      	b.n	80a4b7c <localtime_r+0x98>
 80a4b60:	4293      	cmp	r3, r2
 80a4b62:	db08      	blt.n	80a4b76 <localtime_r+0x92>
 80a4b64:	e001      	b.n	80a4b6a <localtime_r+0x86>
 80a4b66:	4293      	cmp	r3, r2
 80a4b68:	da07      	bge.n	80a4b7a <localtime_r+0x96>
 80a4b6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80a4b6c:	4293      	cmp	r3, r2
 80a4b6e:	bfac      	ite	ge
 80a4b70:	2300      	movge	r3, #0
 80a4b72:	2301      	movlt	r3, #1
 80a4b74:	e002      	b.n	80a4b7c <localtime_r+0x98>
 80a4b76:	2300      	movs	r3, #0
 80a4b78:	e000      	b.n	80a4b7c <localtime_r+0x98>
 80a4b7a:	2301      	movs	r3, #1
 80a4b7c:	6223      	str	r3, [r4, #32]
 80a4b7e:	6a23      	ldr	r3, [r4, #32]
 80a4b80:	203c      	movs	r0, #60	; 0x3c
 80a4b82:	2b01      	cmp	r3, #1
 80a4b84:	bf0c      	ite	eq
 80a4b86:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 80a4b88:	6a39      	ldrne	r1, [r7, #32]
 80a4b8a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80a4b8e:	fb91 f6f3 	sdiv	r6, r1, r3
 80a4b92:	fb03 1316 	mls	r3, r3, r6, r1
 80a4b96:	fb93 f2f0 	sdiv	r2, r3, r0
 80a4b9a:	fb00 3012 	mls	r0, r0, r2, r3
 80a4b9e:	6861      	ldr	r1, [r4, #4]
 80a4ba0:	6823      	ldr	r3, [r4, #0]
 80a4ba2:	1a89      	subs	r1, r1, r2
 80a4ba4:	68a2      	ldr	r2, [r4, #8]
 80a4ba6:	1a1b      	subs	r3, r3, r0
 80a4ba8:	1b92      	subs	r2, r2, r6
 80a4baa:	2b3b      	cmp	r3, #59	; 0x3b
 80a4bac:	6023      	str	r3, [r4, #0]
 80a4bae:	6061      	str	r1, [r4, #4]
 80a4bb0:	60a2      	str	r2, [r4, #8]
 80a4bb2:	dd03      	ble.n	80a4bbc <localtime_r+0xd8>
 80a4bb4:	3101      	adds	r1, #1
 80a4bb6:	6061      	str	r1, [r4, #4]
 80a4bb8:	3b3c      	subs	r3, #60	; 0x3c
 80a4bba:	e004      	b.n	80a4bc6 <localtime_r+0xe2>
 80a4bbc:	2b00      	cmp	r3, #0
 80a4bbe:	da03      	bge.n	80a4bc8 <localtime_r+0xe4>
 80a4bc0:	3901      	subs	r1, #1
 80a4bc2:	6061      	str	r1, [r4, #4]
 80a4bc4:	333c      	adds	r3, #60	; 0x3c
 80a4bc6:	6023      	str	r3, [r4, #0]
 80a4bc8:	6863      	ldr	r3, [r4, #4]
 80a4bca:	2b3b      	cmp	r3, #59	; 0x3b
 80a4bcc:	dd03      	ble.n	80a4bd6 <localtime_r+0xf2>
 80a4bce:	3201      	adds	r2, #1
 80a4bd0:	60a2      	str	r2, [r4, #8]
 80a4bd2:	3b3c      	subs	r3, #60	; 0x3c
 80a4bd4:	e004      	b.n	80a4be0 <localtime_r+0xfc>
 80a4bd6:	2b00      	cmp	r3, #0
 80a4bd8:	da03      	bge.n	80a4be2 <localtime_r+0xfe>
 80a4bda:	3a01      	subs	r2, #1
 80a4bdc:	60a2      	str	r2, [r4, #8]
 80a4bde:	333c      	adds	r3, #60	; 0x3c
 80a4be0:	6063      	str	r3, [r4, #4]
 80a4be2:	68a3      	ldr	r3, [r4, #8]
 80a4be4:	2b17      	cmp	r3, #23
 80a4be6:	dd22      	ble.n	80a4c2e <localtime_r+0x14a>
 80a4be8:	69e2      	ldr	r2, [r4, #28]
 80a4bea:	3b18      	subs	r3, #24
 80a4bec:	3201      	adds	r2, #1
 80a4bee:	61e2      	str	r2, [r4, #28]
 80a4bf0:	69a2      	ldr	r2, [r4, #24]
 80a4bf2:	60a3      	str	r3, [r4, #8]
 80a4bf4:	3201      	adds	r2, #1
 80a4bf6:	2a06      	cmp	r2, #6
 80a4bf8:	bfc8      	it	gt
 80a4bfa:	2200      	movgt	r2, #0
 80a4bfc:	61a2      	str	r2, [r4, #24]
 80a4bfe:	68e2      	ldr	r2, [r4, #12]
 80a4c00:	6923      	ldr	r3, [r4, #16]
 80a4c02:	3201      	adds	r2, #1
 80a4c04:	60e2      	str	r2, [r4, #12]
 80a4c06:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 80a4c0a:	428a      	cmp	r2, r1
 80a4c0c:	dd46      	ble.n	80a4c9c <localtime_r+0x1b8>
 80a4c0e:	3301      	adds	r3, #1
 80a4c10:	2b0c      	cmp	r3, #12
 80a4c12:	bf08      	it	eq
 80a4c14:	6963      	ldreq	r3, [r4, #20]
 80a4c16:	eba2 0201 	sub.w	r2, r2, r1
 80a4c1a:	60e2      	str	r2, [r4, #12]
 80a4c1c:	bf05      	ittet	eq
 80a4c1e:	3301      	addeq	r3, #1
 80a4c20:	2200      	moveq	r2, #0
 80a4c22:	6123      	strne	r3, [r4, #16]
 80a4c24:	6122      	streq	r2, [r4, #16]
 80a4c26:	bf04      	itt	eq
 80a4c28:	6163      	streq	r3, [r4, #20]
 80a4c2a:	61e2      	streq	r2, [r4, #28]
 80a4c2c:	e036      	b.n	80a4c9c <localtime_r+0x1b8>
 80a4c2e:	2b00      	cmp	r3, #0
 80a4c30:	da34      	bge.n	80a4c9c <localtime_r+0x1b8>
 80a4c32:	69e2      	ldr	r2, [r4, #28]
 80a4c34:	3318      	adds	r3, #24
 80a4c36:	3a01      	subs	r2, #1
 80a4c38:	61e2      	str	r2, [r4, #28]
 80a4c3a:	69a2      	ldr	r2, [r4, #24]
 80a4c3c:	60a3      	str	r3, [r4, #8]
 80a4c3e:	3a01      	subs	r2, #1
 80a4c40:	bf48      	it	mi
 80a4c42:	2206      	movmi	r2, #6
 80a4c44:	61a2      	str	r2, [r4, #24]
 80a4c46:	68e2      	ldr	r2, [r4, #12]
 80a4c48:	3a01      	subs	r2, #1
 80a4c4a:	60e2      	str	r2, [r4, #12]
 80a4c4c:	bb32      	cbnz	r2, 80a4c9c <localtime_r+0x1b8>
 80a4c4e:	6923      	ldr	r3, [r4, #16]
 80a4c50:	3b01      	subs	r3, #1
 80a4c52:	d401      	bmi.n	80a4c58 <localtime_r+0x174>
 80a4c54:	6123      	str	r3, [r4, #16]
 80a4c56:	e01d      	b.n	80a4c94 <localtime_r+0x1b0>
 80a4c58:	230b      	movs	r3, #11
 80a4c5a:	6123      	str	r3, [r4, #16]
 80a4c5c:	6963      	ldr	r3, [r4, #20]
 80a4c5e:	1e5a      	subs	r2, r3, #1
 80a4c60:	f012 0f03 	tst.w	r2, #3
 80a4c64:	6162      	str	r2, [r4, #20]
 80a4c66:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 80a4c6a:	d105      	bne.n	80a4c78 <localtime_r+0x194>
 80a4c6c:	2164      	movs	r1, #100	; 0x64
 80a4c6e:	fb93 f2f1 	sdiv	r2, r3, r1
 80a4c72:	fb01 3212 	mls	r2, r1, r2, r3
 80a4c76:	b94a      	cbnz	r2, 80a4c8c <localtime_r+0x1a8>
 80a4c78:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80a4c7c:	fb93 f2f1 	sdiv	r2, r3, r1
 80a4c80:	fb01 3312 	mls	r3, r1, r2, r3
 80a4c84:	fab3 f383 	clz	r3, r3
 80a4c88:	095b      	lsrs	r3, r3, #5
 80a4c8a:	e000      	b.n	80a4c8e <localtime_r+0x1aa>
 80a4c8c:	2301      	movs	r3, #1
 80a4c8e:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80a4c92:	61e3      	str	r3, [r4, #28]
 80a4c94:	6923      	ldr	r3, [r4, #16]
 80a4c96:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80a4c9a:	60e3      	str	r3, [r4, #12]
 80a4c9c:	f001 fda1 	bl	80a67e2 <__tz_unlock>
 80a4ca0:	4620      	mov	r0, r4
 80a4ca2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a4ca6:	bf00      	nop
 80a4ca8:	080a81a0 	.word	0x080a81a0
 80a4cac:	20000c54 	.word	0x20000c54

080a4cb0 <_localeconv_r>:
 80a4cb0:	4800      	ldr	r0, [pc, #0]	; (80a4cb4 <_localeconv_r+0x4>)
 80a4cb2:	4770      	bx	lr
 80a4cb4:	200003f0 	.word	0x200003f0

080a4cb8 <memcpy>:
 80a4cb8:	b510      	push	{r4, lr}
 80a4cba:	1e43      	subs	r3, r0, #1
 80a4cbc:	440a      	add	r2, r1
 80a4cbe:	4291      	cmp	r1, r2
 80a4cc0:	d004      	beq.n	80a4ccc <memcpy+0x14>
 80a4cc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a4cc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a4cca:	e7f8      	b.n	80a4cbe <memcpy+0x6>
 80a4ccc:	bd10      	pop	{r4, pc}

080a4cce <memset>:
 80a4cce:	4603      	mov	r3, r0
 80a4cd0:	4402      	add	r2, r0
 80a4cd2:	4293      	cmp	r3, r2
 80a4cd4:	d002      	beq.n	80a4cdc <memset+0xe>
 80a4cd6:	f803 1b01 	strb.w	r1, [r3], #1
 80a4cda:	e7fa      	b.n	80a4cd2 <memset+0x4>
 80a4cdc:	4770      	bx	lr
	...

080a4ce0 <srand>:
 80a4ce0:	b538      	push	{r3, r4, r5, lr}
 80a4ce2:	4b12      	ldr	r3, [pc, #72]	; (80a4d2c <srand+0x4c>)
 80a4ce4:	4605      	mov	r5, r0
 80a4ce6:	681c      	ldr	r4, [r3, #0]
 80a4ce8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a4cea:	b9d3      	cbnz	r3, 80a4d22 <srand+0x42>
 80a4cec:	2018      	movs	r0, #24
 80a4cee:	f7fc ffc3 	bl	80a1c78 <malloc>
 80a4cf2:	f243 330e 	movw	r3, #13070	; 0x330e
 80a4cf6:	63a0      	str	r0, [r4, #56]	; 0x38
 80a4cf8:	8003      	strh	r3, [r0, #0]
 80a4cfa:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a4cfe:	8043      	strh	r3, [r0, #2]
 80a4d00:	f241 2334 	movw	r3, #4660	; 0x1234
 80a4d04:	8083      	strh	r3, [r0, #4]
 80a4d06:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a4d0a:	80c3      	strh	r3, [r0, #6]
 80a4d0c:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a4d10:	8103      	strh	r3, [r0, #8]
 80a4d12:	2305      	movs	r3, #5
 80a4d14:	8143      	strh	r3, [r0, #10]
 80a4d16:	230b      	movs	r3, #11
 80a4d18:	8183      	strh	r3, [r0, #12]
 80a4d1a:	2201      	movs	r2, #1
 80a4d1c:	2300      	movs	r3, #0
 80a4d1e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a4d22:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a4d24:	2200      	movs	r2, #0
 80a4d26:	611d      	str	r5, [r3, #16]
 80a4d28:	615a      	str	r2, [r3, #20]
 80a4d2a:	bd38      	pop	{r3, r4, r5, pc}
 80a4d2c:	200003ec 	.word	0x200003ec

080a4d30 <strcmp>:
 80a4d30:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a4d34:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a4d38:	2a01      	cmp	r2, #1
 80a4d3a:	bf28      	it	cs
 80a4d3c:	429a      	cmpcs	r2, r3
 80a4d3e:	d0f7      	beq.n	80a4d30 <strcmp>
 80a4d40:	1ad0      	subs	r0, r2, r3
 80a4d42:	4770      	bx	lr

080a4d44 <strcpy>:
 80a4d44:	4603      	mov	r3, r0
 80a4d46:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a4d4a:	f803 2b01 	strb.w	r2, [r3], #1
 80a4d4e:	2a00      	cmp	r2, #0
 80a4d50:	d1f9      	bne.n	80a4d46 <strcpy+0x2>
 80a4d52:	4770      	bx	lr

080a4d54 <strdup>:
 80a4d54:	4b02      	ldr	r3, [pc, #8]	; (80a4d60 <strdup+0xc>)
 80a4d56:	4601      	mov	r1, r0
 80a4d58:	6818      	ldr	r0, [r3, #0]
 80a4d5a:	f000 b803 	b.w	80a4d64 <_strdup_r>
 80a4d5e:	bf00      	nop
 80a4d60:	200003ec 	.word	0x200003ec

080a4d64 <_strdup_r>:
 80a4d64:	b570      	push	{r4, r5, r6, lr}
 80a4d66:	4606      	mov	r6, r0
 80a4d68:	4608      	mov	r0, r1
 80a4d6a:	460c      	mov	r4, r1
 80a4d6c:	f000 fd22 	bl	80a57b4 <strlen>
 80a4d70:	1c45      	adds	r5, r0, #1
 80a4d72:	4629      	mov	r1, r5
 80a4d74:	4630      	mov	r0, r6
 80a4d76:	f7fc ffc7 	bl	80a1d08 <_malloc_r>
 80a4d7a:	4606      	mov	r6, r0
 80a4d7c:	b118      	cbz	r0, 80a4d86 <_strdup_r+0x22>
 80a4d7e:	462a      	mov	r2, r5
 80a4d80:	4621      	mov	r1, r4
 80a4d82:	f7ff ff99 	bl	80a4cb8 <memcpy>
 80a4d86:	4630      	mov	r0, r6
 80a4d88:	bd70      	pop	{r4, r5, r6, pc}

080a4d8a <iso_year_adjust>:
 80a4d8a:	6941      	ldr	r1, [r0, #20]
 80a4d8c:	b510      	push	{r4, lr}
 80a4d8e:	078b      	lsls	r3, r1, #30
 80a4d90:	d10c      	bne.n	80a4dac <iso_year_adjust+0x22>
 80a4d92:	f240 736c 	movw	r3, #1900	; 0x76c
 80a4d96:	2900      	cmp	r1, #0
 80a4d98:	bfa8      	it	ge
 80a4d9a:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 80a4d9e:	440b      	add	r3, r1
 80a4da0:	2464      	movs	r4, #100	; 0x64
 80a4da2:	fb93 f2f4 	sdiv	r2, r3, r4
 80a4da6:	fb04 3312 	mls	r3, r4, r2, r3
 80a4daa:	b983      	cbnz	r3, 80a4dce <iso_year_adjust+0x44>
 80a4dac:	f240 736c 	movw	r3, #1900	; 0x76c
 80a4db0:	2900      	cmp	r1, #0
 80a4db2:	bfa8      	it	ge
 80a4db4:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 80a4db8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a4dbc:	440b      	add	r3, r1
 80a4dbe:	fb93 f1f2 	sdiv	r1, r3, r2
 80a4dc2:	fb02 3311 	mls	r3, r2, r1, r3
 80a4dc6:	fab3 f283 	clz	r2, r3
 80a4dca:	0952      	lsrs	r2, r2, #5
 80a4dcc:	e000      	b.n	80a4dd0 <iso_year_adjust+0x46>
 80a4dce:	2201      	movs	r2, #1
 80a4dd0:	6983      	ldr	r3, [r0, #24]
 80a4dd2:	69c1      	ldr	r1, [r0, #28]
 80a4dd4:	005b      	lsls	r3, r3, #1
 80a4dd6:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80a4dda:	4413      	add	r3, r2
 80a4ddc:	2b21      	cmp	r3, #33	; 0x21
 80a4dde:	dc0e      	bgt.n	80a4dfe <iso_year_adjust+0x74>
 80a4de0:	2b20      	cmp	r3, #32
 80a4de2:	da2f      	bge.n	80a4e44 <iso_year_adjust+0xba>
 80a4de4:	2b0d      	cmp	r3, #13
 80a4de6:	dc02      	bgt.n	80a4dee <iso_year_adjust+0x64>
 80a4de8:	2b0a      	cmp	r3, #10
 80a4dea:	db05      	blt.n	80a4df8 <iso_year_adjust+0x6e>
 80a4dec:	e02a      	b.n	80a4e44 <iso_year_adjust+0xba>
 80a4dee:	2b10      	cmp	r3, #16
 80a4df0:	db26      	blt.n	80a4e40 <iso_year_adjust+0xb6>
 80a4df2:	2b11      	cmp	r3, #17
 80a4df4:	dd26      	ble.n	80a4e44 <iso_year_adjust+0xba>
 80a4df6:	3b1c      	subs	r3, #28
 80a4df8:	2b01      	cmp	r3, #1
 80a4dfa:	d923      	bls.n	80a4e44 <iso_year_adjust+0xba>
 80a4dfc:	e020      	b.n	80a4e40 <iso_year_adjust+0xb6>
 80a4dfe:	f241 62c6 	movw	r2, #5830	; 0x16c6
 80a4e02:	4293      	cmp	r3, r2
 80a4e04:	dc0e      	bgt.n	80a4e24 <iso_year_adjust+0x9a>
 80a4e06:	f241 62c2 	movw	r2, #5826	; 0x16c2
 80a4e0a:	4293      	cmp	r3, r2
 80a4e0c:	da16      	bge.n	80a4e3c <iso_year_adjust+0xb2>
 80a4e0e:	f241 62a2 	movw	r2, #5794	; 0x16a2
 80a4e12:	4293      	cmp	r3, r2
 80a4e14:	d012      	beq.n	80a4e3c <iso_year_adjust+0xb2>
 80a4e16:	db13      	blt.n	80a4e40 <iso_year_adjust+0xb6>
 80a4e18:	f5a3 53b5 	sub.w	r3, r3, #5792	; 0x16a0
 80a4e1c:	3b12      	subs	r3, #18
 80a4e1e:	2b02      	cmp	r3, #2
 80a4e20:	d90c      	bls.n	80a4e3c <iso_year_adjust+0xb2>
 80a4e22:	e00d      	b.n	80a4e40 <iso_year_adjust+0xb6>
 80a4e24:	f241 62d5 	movw	r2, #5845	; 0x16d5
 80a4e28:	4293      	cmp	r3, r2
 80a4e2a:	d007      	beq.n	80a4e3c <iso_year_adjust+0xb2>
 80a4e2c:	f241 62d7 	movw	r2, #5847	; 0x16d7
 80a4e30:	4293      	cmp	r3, r2
 80a4e32:	d003      	beq.n	80a4e3c <iso_year_adjust+0xb2>
 80a4e34:	f241 62d3 	movw	r2, #5843	; 0x16d3
 80a4e38:	4293      	cmp	r3, r2
 80a4e3a:	d101      	bne.n	80a4e40 <iso_year_adjust+0xb6>
 80a4e3c:	2001      	movs	r0, #1
 80a4e3e:	bd10      	pop	{r4, pc}
 80a4e40:	2000      	movs	r0, #0
 80a4e42:	bd10      	pop	{r4, pc}
 80a4e44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a4e48:	bd10      	pop	{r4, pc}
	...

080a4e4c <strftime>:
 80a4e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a4e50:	460e      	mov	r6, r1
 80a4e52:	b093      	sub	sp, #76	; 0x4c
 80a4e54:	461d      	mov	r5, r3
 80a4e56:	4607      	mov	r7, r0
 80a4e58:	4691      	mov	r9, r2
 80a4e5a:	f001 fc09 	bl	80a6670 <__get_current_time_locale>
 80a4e5e:	2300      	movs	r3, #0
 80a4e60:	9306      	str	r3, [sp, #24]
 80a4e62:	461c      	mov	r4, r3
 80a4e64:	1e73      	subs	r3, r6, #1
 80a4e66:	9003      	str	r0, [sp, #12]
 80a4e68:	9302      	str	r3, [sp, #8]
 80a4e6a:	f899 3000 	ldrb.w	r3, [r9]
 80a4e6e:	2b00      	cmp	r3, #0
 80a4e70:	f000 8492 	beq.w	80a5798 <strftime+0x94c>
 80a4e74:	2b25      	cmp	r3, #37	; 0x25
 80a4e76:	d008      	beq.n	80a4e8a <strftime+0x3e>
 80a4e78:	9a02      	ldr	r2, [sp, #8]
 80a4e7a:	4294      	cmp	r4, r2
 80a4e7c:	f080 8490 	bcs.w	80a57a0 <strftime+0x954>
 80a4e80:	553b      	strb	r3, [r7, r4]
 80a4e82:	f109 0901 	add.w	r9, r9, #1
 80a4e86:	3401      	adds	r4, #1
 80a4e88:	e7ef      	b.n	80a4e6a <strftime+0x1e>
 80a4e8a:	f899 a001 	ldrb.w	sl, [r9, #1]
 80a4e8e:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
 80a4e92:	d007      	beq.n	80a4ea4 <strftime+0x58>
 80a4e94:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 80a4e98:	d004      	beq.n	80a4ea4 <strftime+0x58>
 80a4e9a:	f109 0901 	add.w	r9, r9, #1
 80a4e9e:	f04f 0a00 	mov.w	sl, #0
 80a4ea2:	e001      	b.n	80a4ea8 <strftime+0x5c>
 80a4ea4:	f109 0902 	add.w	r9, r9, #2
 80a4ea8:	f899 3000 	ldrb.w	r3, [r9]
 80a4eac:	3b31      	subs	r3, #49	; 0x31
 80a4eae:	2b08      	cmp	r3, #8
 80a4eb0:	d808      	bhi.n	80a4ec4 <strftime+0x78>
 80a4eb2:	4648      	mov	r0, r9
 80a4eb4:	220a      	movs	r2, #10
 80a4eb6:	a90a      	add	r1, sp, #40	; 0x28
 80a4eb8:	f001 fbd0 	bl	80a665c <strtoul>
 80a4ebc:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 80a4ec0:	4680      	mov	r8, r0
 80a4ec2:	e001      	b.n	80a4ec8 <strftime+0x7c>
 80a4ec4:	f04f 0800 	mov.w	r8, #0
 80a4ec8:	f899 3000 	ldrb.w	r3, [r9]
 80a4ecc:	2b45      	cmp	r3, #69	; 0x45
 80a4ece:	d001      	beq.n	80a4ed4 <strftime+0x88>
 80a4ed0:	2b4f      	cmp	r3, #79	; 0x4f
 80a4ed2:	d101      	bne.n	80a4ed8 <strftime+0x8c>
 80a4ed4:	f109 0901 	add.w	r9, r9, #1
 80a4ed8:	f899 0000 	ldrb.w	r0, [r9]
 80a4edc:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 80a4ee0:	2b55      	cmp	r3, #85	; 0x55
 80a4ee2:	f200 845d 	bhi.w	80a57a0 <strftime+0x954>
 80a4ee6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80a4eea:	044a      	.short	0x044a
 80a4eec:	045b045b 	.word	0x045b045b
 80a4ef0:	045b045b 	.word	0x045b045b
 80a4ef4:	045b045b 	.word	0x045b045b
 80a4ef8:	045b045b 	.word	0x045b045b
 80a4efc:	045b045b 	.word	0x045b045b
 80a4f00:	045b045b 	.word	0x045b045b
 80a4f04:	045b045b 	.word	0x045b045b
 80a4f08:	045b045b 	.word	0x045b045b
 80a4f0c:	045b045b 	.word	0x045b045b
 80a4f10:	045b045b 	.word	0x045b045b
 80a4f14:	045b045b 	.word	0x045b045b
 80a4f18:	045b045b 	.word	0x045b045b
 80a4f1c:	045b045b 	.word	0x045b045b
 80a4f20:	006f045b 	.word	0x006f045b
 80a4f24:	00d400a1 	.word	0x00d400a1
 80a4f28:	045b011a 	.word	0x045b011a
 80a4f2c:	01a0013f 	.word	0x01a0013f
 80a4f30:	022d0226 	.word	0x022d0226
 80a4f34:	045b045b 	.word	0x045b045b
 80a4f38:	0260045b 	.word	0x0260045b
 80a4f3c:	045b045b 	.word	0x045b045b
 80a4f40:	045b0268 	.word	0x045b0268
 80a4f44:	031c0296 	.word	0x031c0296
 80a4f48:	033a0324 	.word	0x033a0324
 80a4f4c:	03850342 	.word	0x03850342
 80a4f50:	039f00c6 	.word	0x039f00c6
 80a4f54:	045b041f 	.word	0x045b041f
 80a4f58:	045b045b 	.word	0x045b045b
 80a4f5c:	045b045b 	.word	0x045b045b
 80a4f60:	0056045b 	.word	0x0056045b
 80a4f64:	00ba0089 	.word	0x00ba0089
 80a4f68:	010c010c 	.word	0x010c010c
 80a4f6c:	0171045b 	.word	0x0171045b
 80a4f70:	045b0089 	.word	0x045b0089
 80a4f74:	0226023d 	.word	0x0226023d
 80a4f78:	025d022d 	.word	0x025d022d
 80a4f7c:	045b0262 	.word	0x045b0262
 80a4f80:	045b0268 	.word	0x045b0268
 80a4f84:	029b00be 	.word	0x029b00be
 80a4f88:	032d031e 	.word	0x032d031e
 80a4f8c:	037e045b 	.word	0x037e045b
 80a4f90:	039100c2 	.word	0x039100c2
 80a4f94:	03e7      	.short	0x03e7
 80a4f96:	69ab      	ldr	r3, [r5, #24]
 80a4f98:	9a03      	ldr	r2, [sp, #12]
 80a4f9a:	3318      	adds	r3, #24
 80a4f9c:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 80a4fa0:	4640      	mov	r0, r8
 80a4fa2:	f000 fc07 	bl	80a57b4 <strlen>
 80a4fa6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80a4faa:	193b      	adds	r3, r7, r4
 80a4fac:	4420      	add	r0, r4
 80a4fae:	4284      	cmp	r4, r0
 80a4fb0:	f000 83eb 	beq.w	80a578a <strftime+0x93e>
 80a4fb4:	9a02      	ldr	r2, [sp, #8]
 80a4fb6:	4294      	cmp	r4, r2
 80a4fb8:	f080 83f2 	bcs.w	80a57a0 <strftime+0x954>
 80a4fbc:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 80a4fc0:	3401      	adds	r4, #1
 80a4fc2:	f803 2b01 	strb.w	r2, [r3], #1
 80a4fc6:	e7f2      	b.n	80a4fae <strftime+0x162>
 80a4fc8:	69ab      	ldr	r3, [r5, #24]
 80a4fca:	9a03      	ldr	r2, [sp, #12]
 80a4fcc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80a4fd0:	f8d3 807c 	ldr.w	r8, [r3, #124]	; 0x7c
 80a4fd4:	4640      	mov	r0, r8
 80a4fd6:	f000 fbed 	bl	80a57b4 <strlen>
 80a4fda:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80a4fde:	193b      	adds	r3, r7, r4
 80a4fe0:	4420      	add	r0, r4
 80a4fe2:	4284      	cmp	r4, r0
 80a4fe4:	f000 83d1 	beq.w	80a578a <strftime+0x93e>
 80a4fe8:	9a02      	ldr	r2, [sp, #8]
 80a4fea:	4294      	cmp	r4, r2
 80a4fec:	f080 83d8 	bcs.w	80a57a0 <strftime+0x954>
 80a4ff0:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 80a4ff4:	3401      	adds	r4, #1
 80a4ff6:	f803 2b01 	strb.w	r2, [r3], #1
 80a4ffa:	e7f2      	b.n	80a4fe2 <strftime+0x196>
 80a4ffc:	692b      	ldr	r3, [r5, #16]
 80a4ffe:	9a03      	ldr	r2, [sp, #12]
 80a5000:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 80a5004:	4640      	mov	r0, r8
 80a5006:	f000 fbd5 	bl	80a57b4 <strlen>
 80a500a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80a500e:	193b      	adds	r3, r7, r4
 80a5010:	4420      	add	r0, r4
 80a5012:	4284      	cmp	r4, r0
 80a5014:	f000 83b9 	beq.w	80a578a <strftime+0x93e>
 80a5018:	9a02      	ldr	r2, [sp, #8]
 80a501a:	4294      	cmp	r4, r2
 80a501c:	f080 83c0 	bcs.w	80a57a0 <strftime+0x954>
 80a5020:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 80a5024:	3401      	adds	r4, #1
 80a5026:	f803 2b01 	strb.w	r2, [r3], #1
 80a502a:	e7f2      	b.n	80a5012 <strftime+0x1c6>
 80a502c:	692b      	ldr	r3, [r5, #16]
 80a502e:	9a03      	ldr	r2, [sp, #12]
 80a5030:	330c      	adds	r3, #12
 80a5032:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 80a5036:	4640      	mov	r0, r8
 80a5038:	f000 fbbc 	bl	80a57b4 <strlen>
 80a503c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80a5040:	193b      	adds	r3, r7, r4
 80a5042:	4420      	add	r0, r4
 80a5044:	4284      	cmp	r4, r0
 80a5046:	f000 83a0 	beq.w	80a578a <strftime+0x93e>
 80a504a:	9a02      	ldr	r2, [sp, #8]
 80a504c:	4294      	cmp	r4, r2
 80a504e:	f080 83a7 	bcs.w	80a57a0 <strftime+0x954>
 80a5052:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 80a5056:	3401      	adds	r4, #1
 80a5058:	f803 2b01 	strb.w	r2, [r3], #1
 80a505c:	e7f2      	b.n	80a5044 <strftime+0x1f8>
 80a505e:	9b03      	ldr	r3, [sp, #12]
 80a5060:	f8d3 80a0 	ldr.w	r8, [r3, #160]	; 0xa0
 80a5064:	e00a      	b.n	80a507c <strftime+0x230>
 80a5066:	9b03      	ldr	r3, [sp, #12]
 80a5068:	f8d3 80e4 	ldr.w	r8, [r3, #228]	; 0xe4
 80a506c:	e006      	b.n	80a507c <strftime+0x230>
 80a506e:	9b03      	ldr	r3, [sp, #12]
 80a5070:	f8d3 809c 	ldr.w	r8, [r3, #156]	; 0x9c
 80a5074:	e002      	b.n	80a507c <strftime+0x230>
 80a5076:	9b03      	ldr	r3, [sp, #12]
 80a5078:	f8d3 8098 	ldr.w	r8, [r3, #152]	; 0x98
 80a507c:	4640      	mov	r0, r8
 80a507e:	f000 fb99 	bl	80a57b4 <strlen>
 80a5082:	f898 3000 	ldrb.w	r3, [r8]
 80a5086:	2b00      	cmp	r3, #0
 80a5088:	f000 837f 	beq.w	80a578a <strftime+0x93e>
 80a508c:	462b      	mov	r3, r5
 80a508e:	4642      	mov	r2, r8
 80a5090:	e093      	b.n	80a51ba <strftime+0x36e>
 80a5092:	49b6      	ldr	r1, [pc, #728]	; (80a536c <strftime+0x520>)
 80a5094:	f8d5 b014 	ldr.w	fp, [r5, #20]
 80a5098:	458b      	cmp	fp, r1
 80a509a:	bfac      	ite	ge
 80a509c:	2100      	movge	r1, #0
 80a509e:	2101      	movlt	r1, #1
 80a50a0:	f1bb 0f00 	cmp.w	fp, #0
 80a50a4:	db04      	blt.n	80a50b0 <strftime+0x264>
 80a50a6:	2064      	movs	r0, #100	; 0x64
 80a50a8:	fb9b f0f0 	sdiv	r0, fp, r0
 80a50ac:	3013      	adds	r0, #19
 80a50ae:	e008      	b.n	80a50c2 <strftime+0x276>
 80a50b0:	f20b 706c 	addw	r0, fp, #1900	; 0x76c
 80a50b4:	9107      	str	r1, [sp, #28]
 80a50b6:	f001 fd1b 	bl	80a6af0 <abs>
 80a50ba:	2364      	movs	r3, #100	; 0x64
 80a50bc:	fb90 f0f3 	sdiv	r0, r0, r3
 80a50c0:	9907      	ldr	r1, [sp, #28]
 80a50c2:	f1ba 0f00 	cmp.w	sl, #0
 80a50c6:	d008      	beq.n	80a50da <strftime+0x28e>
 80a50c8:	2863      	cmp	r0, #99	; 0x63
 80a50ca:	dd09      	ble.n	80a50e0 <strftime+0x294>
 80a50cc:	4ba8      	ldr	r3, [pc, #672]	; (80a5370 <strftime+0x524>)
 80a50ce:	4aa9      	ldr	r2, [pc, #676]	; (80a5374 <strftime+0x528>)
 80a50d0:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 80a50d4:	bf18      	it	ne
 80a50d6:	4613      	movne	r3, r2
 80a50d8:	e003      	b.n	80a50e2 <strftime+0x296>
 80a50da:	4ba6      	ldr	r3, [pc, #664]	; (80a5374 <strftime+0x528>)
 80a50dc:	4aa6      	ldr	r2, [pc, #664]	; (80a5378 <strftime+0x52c>)
 80a50de:	e001      	b.n	80a50e4 <strftime+0x298>
 80a50e0:	4ba4      	ldr	r3, [pc, #656]	; (80a5374 <strftime+0x528>)
 80a50e2:	4aa6      	ldr	r2, [pc, #664]	; (80a537c <strftime+0x530>)
 80a50e4:	f1b8 0f01 	cmp.w	r8, #1
 80a50e8:	bf98      	it	ls
 80a50ea:	f04f 0802 	movls.w	r8, #2
 80a50ee:	ebc1 0108 	rsb	r1, r1, r8
 80a50f2:	9001      	str	r0, [sp, #4]
 80a50f4:	9100      	str	r1, [sp, #0]
 80a50f6:	489d      	ldr	r0, [pc, #628]	; (80a536c <strftime+0x520>)
 80a50f8:	49a1      	ldr	r1, [pc, #644]	; (80a5380 <strftime+0x534>)
 80a50fa:	4583      	cmp	fp, r0
 80a50fc:	bfb8      	it	lt
 80a50fe:	460b      	movlt	r3, r1
 80a5100:	e21d      	b.n	80a553e <strftime+0x6f2>
 80a5102:	4aa0      	ldr	r2, [pc, #640]	; (80a5384 <strftime+0x538>)
 80a5104:	49a0      	ldr	r1, [pc, #640]	; (80a5388 <strftime+0x53c>)
 80a5106:	68eb      	ldr	r3, [r5, #12]
 80a5108:	2864      	cmp	r0, #100	; 0x64
 80a510a:	bf08      	it	eq
 80a510c:	460a      	moveq	r2, r1
 80a510e:	1b31      	subs	r1, r6, r4
 80a5110:	1938      	adds	r0, r7, r4
 80a5112:	f7fc fde1 	bl	80a1cd8 <sniprintf>
 80a5116:	2800      	cmp	r0, #0
 80a5118:	f280 8302 	bge.w	80a5720 <strftime+0x8d4>
 80a511c:	e340      	b.n	80a57a0 <strftime+0x954>
 80a511e:	6968      	ldr	r0, [r5, #20]
 80a5120:	692b      	ldr	r3, [r5, #16]
 80a5122:	2800      	cmp	r0, #0
 80a5124:	f103 0b01 	add.w	fp, r3, #1
 80a5128:	eb07 0804 	add.w	r8, r7, r4
 80a512c:	ebc4 0a06 	rsb	sl, r4, r6
 80a5130:	68eb      	ldr	r3, [r5, #12]
 80a5132:	db05      	blt.n	80a5140 <strftime+0x2f4>
 80a5134:	2264      	movs	r2, #100	; 0x64
 80a5136:	fb90 f1f2 	sdiv	r1, r0, r2
 80a513a:	fb02 0011 	mls	r0, r2, r1, r0
 80a513e:	e00a      	b.n	80a5156 <strftime+0x30a>
 80a5140:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80a5144:	9307      	str	r3, [sp, #28]
 80a5146:	f001 fcd3 	bl	80a6af0 <abs>
 80a514a:	2264      	movs	r2, #100	; 0x64
 80a514c:	fb90 f1f2 	sdiv	r1, r0, r2
 80a5150:	fb01 0012 	mls	r0, r1, r2, r0
 80a5154:	9b07      	ldr	r3, [sp, #28]
 80a5156:	9001      	str	r0, [sp, #4]
 80a5158:	9300      	str	r3, [sp, #0]
 80a515a:	4651      	mov	r1, sl
 80a515c:	465b      	mov	r3, fp
 80a515e:	4640      	mov	r0, r8
 80a5160:	4a8a      	ldr	r2, [pc, #552]	; (80a538c <strftime+0x540>)
 80a5162:	f7fc fdb9 	bl	80a1cd8 <sniprintf>
 80a5166:	e7d6      	b.n	80a5116 <strftime+0x2ca>
 80a5168:	2325      	movs	r3, #37	; 0x25
 80a516a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 80a516e:	f1ba 0f00 	cmp.w	sl, #0
 80a5172:	d007      	beq.n	80a5184 <strftime+0x338>
 80a5174:	f1b8 0f05 	cmp.w	r8, #5
 80a5178:	f88d a029 	strb.w	sl, [sp, #41]	; 0x29
 80a517c:	bf98      	it	ls
 80a517e:	f04f 0806 	movls.w	r8, #6
 80a5182:	e004      	b.n	80a518e <strftime+0x342>
 80a5184:	232b      	movs	r3, #43	; 0x2b
 80a5186:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80a518a:	f04f 080a 	mov.w	r8, #10
 80a518e:	f1b8 0306 	subs.w	r3, r8, #6
 80a5192:	d102      	bne.n	80a519a <strftime+0x34e>
 80a5194:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
 80a5198:	e00a      	b.n	80a51b0 <strftime+0x364>
 80a519a:	4a7d      	ldr	r2, [pc, #500]	; (80a5390 <strftime+0x544>)
 80a519c:	211e      	movs	r1, #30
 80a519e:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
 80a51a2:	f7fc fd99 	bl	80a1cd8 <sniprintf>
 80a51a6:	2800      	cmp	r0, #0
 80a51a8:	ddf4      	ble.n	80a5194 <strftime+0x348>
 80a51aa:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 80a51ae:	4418      	add	r0, r3
 80a51b0:	4978      	ldr	r1, [pc, #480]	; (80a5394 <strftime+0x548>)
 80a51b2:	f7ff fdc7 	bl	80a4d44 <strcpy>
 80a51b6:	462b      	mov	r3, r5
 80a51b8:	aa0a      	add	r2, sp, #40	; 0x28
 80a51ba:	1b31      	subs	r1, r6, r4
 80a51bc:	1938      	adds	r0, r7, r4
 80a51be:	f7ff fe45 	bl	80a4e4c <strftime>
 80a51c2:	2800      	cmp	r0, #0
 80a51c4:	f340 82ec 	ble.w	80a57a0 <strftime+0x954>
 80a51c8:	4404      	add	r4, r0
 80a51ca:	e2de      	b.n	80a578a <strftime+0x93e>
 80a51cc:	4628      	mov	r0, r5
 80a51ce:	f7ff fddc 	bl	80a4d8a <iso_year_adjust>
 80a51d2:	4680      	mov	r8, r0
 80a51d4:	6968      	ldr	r0, [r5, #20]
 80a51d6:	2800      	cmp	r0, #0
 80a51d8:	db05      	blt.n	80a51e6 <strftime+0x39a>
 80a51da:	2264      	movs	r2, #100	; 0x64
 80a51dc:	fb90 f1f2 	sdiv	r1, r0, r2
 80a51e0:	fb02 0011 	mls	r0, r2, r1, r0
 80a51e4:	e008      	b.n	80a51f8 <strftime+0x3ac>
 80a51e6:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80a51ea:	f001 fc81 	bl	80a6af0 <abs>
 80a51ee:	2264      	movs	r2, #100	; 0x64
 80a51f0:	fb90 f3f2 	sdiv	r3, r0, r2
 80a51f4:	fb03 0012 	mls	r0, r3, r2, r0
 80a51f8:	f1b8 0f00 	cmp.w	r8, #0
 80a51fc:	da06      	bge.n	80a520c <strftime+0x3c0>
 80a51fe:	696a      	ldr	r2, [r5, #20]
 80a5200:	4b65      	ldr	r3, [pc, #404]	; (80a5398 <strftime+0x54c>)
 80a5202:	429a      	cmp	r2, r3
 80a5204:	bfb8      	it	lt
 80a5206:	f04f 0801 	movlt.w	r8, #1
 80a520a:	e006      	b.n	80a521a <strftime+0x3ce>
 80a520c:	d005      	beq.n	80a521a <strftime+0x3ce>
 80a520e:	696a      	ldr	r2, [r5, #20]
 80a5210:	4b56      	ldr	r3, [pc, #344]	; (80a536c <strftime+0x520>)
 80a5212:	429a      	cmp	r2, r3
 80a5214:	bfb8      	it	lt
 80a5216:	f04f 38ff 	movlt.w	r8, #4294967295	; 0xffffffff
 80a521a:	2364      	movs	r3, #100	; 0x64
 80a521c:	4440      	add	r0, r8
 80a521e:	fb90 f2f3 	sdiv	r2, r0, r3
 80a5222:	fb03 0012 	mls	r0, r3, r2, r0
 80a5226:	4418      	add	r0, r3
 80a5228:	e1f8      	b.n	80a561c <strftime+0x7d0>
 80a522a:	4b50      	ldr	r3, [pc, #320]	; (80a536c <strftime+0x520>)
 80a522c:	6969      	ldr	r1, [r5, #20]
 80a522e:	4628      	mov	r0, r5
 80a5230:	4299      	cmp	r1, r3
 80a5232:	bfac      	ite	ge
 80a5234:	2300      	movge	r3, #0
 80a5236:	2301      	movlt	r3, #1
 80a5238:	9108      	str	r1, [sp, #32]
 80a523a:	9307      	str	r3, [sp, #28]
 80a523c:	f7ff fda5 	bl	80a4d8a <iso_year_adjust>
 80a5240:	9908      	ldr	r1, [sp, #32]
 80a5242:	4683      	mov	fp, r0
 80a5244:	2900      	cmp	r1, #0
 80a5246:	db04      	blt.n	80a5252 <strftime+0x406>
 80a5248:	2364      	movs	r3, #100	; 0x64
 80a524a:	fb91 f3f3 	sdiv	r3, r1, r3
 80a524e:	3313      	adds	r3, #19
 80a5250:	e008      	b.n	80a5264 <strftime+0x418>
 80a5252:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 80a5256:	9108      	str	r1, [sp, #32]
 80a5258:	f001 fc4a 	bl	80a6af0 <abs>
 80a525c:	2364      	movs	r3, #100	; 0x64
 80a525e:	fb90 f3f3 	sdiv	r3, r0, r3
 80a5262:	9908      	ldr	r1, [sp, #32]
 80a5264:	6968      	ldr	r0, [r5, #20]
 80a5266:	2800      	cmp	r0, #0
 80a5268:	db06      	blt.n	80a5278 <strftime+0x42c>
 80a526a:	f04f 0e64 	mov.w	lr, #100	; 0x64
 80a526e:	fb90 fcfe 	sdiv	ip, r0, lr
 80a5272:	fb0e 001c 	mls	r0, lr, ip, r0
 80a5276:	e00d      	b.n	80a5294 <strftime+0x448>
 80a5278:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80a527c:	9109      	str	r1, [sp, #36]	; 0x24
 80a527e:	9308      	str	r3, [sp, #32]
 80a5280:	f001 fc36 	bl	80a6af0 <abs>
 80a5284:	f04f 0e64 	mov.w	lr, #100	; 0x64
 80a5288:	fb90 fcfe 	sdiv	ip, r0, lr
 80a528c:	fb0c 001e 	mls	r0, ip, lr, r0
 80a5290:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a5292:	9b08      	ldr	r3, [sp, #32]
 80a5294:	f1bb 0f00 	cmp.w	fp, #0
 80a5298:	da08      	bge.n	80a52ac <strftime+0x460>
 80a529a:	6969      	ldr	r1, [r5, #20]
 80a529c:	4a3e      	ldr	r2, [pc, #248]	; (80a5398 <strftime+0x54c>)
 80a529e:	4291      	cmp	r1, r2
 80a52a0:	da0a      	bge.n	80a52b8 <strftime+0x46c>
 80a52a2:	f04f 0b01 	mov.w	fp, #1
 80a52a6:	f8cd b01c 	str.w	fp, [sp, #28]
 80a52aa:	e005      	b.n	80a52b8 <strftime+0x46c>
 80a52ac:	d004      	beq.n	80a52b8 <strftime+0x46c>
 80a52ae:	4a2f      	ldr	r2, [pc, #188]	; (80a536c <strftime+0x520>)
 80a52b0:	4291      	cmp	r1, r2
 80a52b2:	bfb8      	it	lt
 80a52b4:	f04f 3bff 	movlt.w	fp, #4294967295	; 0xffffffff
 80a52b8:	eb0b 0200 	add.w	r2, fp, r0
 80a52bc:	1c50      	adds	r0, r2, #1
 80a52be:	d102      	bne.n	80a52c6 <strftime+0x47a>
 80a52c0:	3b01      	subs	r3, #1
 80a52c2:	2263      	movs	r2, #99	; 0x63
 80a52c4:	e003      	b.n	80a52ce <strftime+0x482>
 80a52c6:	2a64      	cmp	r2, #100	; 0x64
 80a52c8:	bf04      	itt	eq
 80a52ca:	3301      	addeq	r3, #1
 80a52cc:	2200      	moveq	r2, #0
 80a52ce:	2064      	movs	r0, #100	; 0x64
 80a52d0:	fb00 2303 	mla	r3, r0, r3, r2
 80a52d4:	9a07      	ldr	r2, [sp, #28]
 80a52d6:	b142      	cbz	r2, 80a52ea <strftime+0x49e>
 80a52d8:	222d      	movs	r2, #45	; 0x2d
 80a52da:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
 80a52de:	f1b8 0f00 	cmp.w	r8, #0
 80a52e2:	d013      	beq.n	80a530c <strftime+0x4c0>
 80a52e4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80a52e8:	e010      	b.n	80a530c <strftime+0x4c0>
 80a52ea:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 80a52ee:	d110      	bne.n	80a5312 <strftime+0x4c6>
 80a52f0:	f242 720f 	movw	r2, #9999	; 0x270f
 80a52f4:	4293      	cmp	r3, r2
 80a52f6:	d90c      	bls.n	80a5312 <strftime+0x4c6>
 80a52f8:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 80a52fc:	f1b8 0f00 	cmp.w	r8, #0
 80a5300:	d1f0      	bne.n	80a52e4 <strftime+0x498>
 80a5302:	aa12      	add	r2, sp, #72	; 0x48
 80a5304:	2125      	movs	r1, #37	; 0x25
 80a5306:	f802 1d1f 	strb.w	r1, [r2, #-31]!
 80a530a:	e00a      	b.n	80a5322 <strftime+0x4d6>
 80a530c:	f10d 0229 	add.w	r2, sp, #41	; 0x29
 80a5310:	e000      	b.n	80a5314 <strftime+0x4c8>
 80a5312:	aa0a      	add	r2, sp, #40	; 0x28
 80a5314:	2125      	movs	r1, #37	; 0x25
 80a5316:	7011      	strb	r1, [r2, #0]
 80a5318:	f1ba 0f00 	cmp.w	sl, #0
 80a531c:	d101      	bne.n	80a5322 <strftime+0x4d6>
 80a531e:	1c50      	adds	r0, r2, #1
 80a5320:	e002      	b.n	80a5328 <strftime+0x4dc>
 80a5322:	2130      	movs	r1, #48	; 0x30
 80a5324:	1c90      	adds	r0, r2, #2
 80a5326:	7051      	strb	r1, [r2, #1]
 80a5328:	491c      	ldr	r1, [pc, #112]	; (80a539c <strftime+0x550>)
 80a532a:	9307      	str	r3, [sp, #28]
 80a532c:	f7ff fd0a 	bl	80a4d44 <strcpy>
 80a5330:	9b07      	ldr	r3, [sp, #28]
 80a5332:	9300      	str	r3, [sp, #0]
 80a5334:	e1ac      	b.n	80a5690 <strftime+0x844>
 80a5336:	4a14      	ldr	r2, [pc, #80]	; (80a5388 <strftime+0x53c>)
 80a5338:	4912      	ldr	r1, [pc, #72]	; (80a5384 <strftime+0x538>)
 80a533a:	68ab      	ldr	r3, [r5, #8]
 80a533c:	286b      	cmp	r0, #107	; 0x6b
 80a533e:	bf08      	it	eq
 80a5340:	460a      	moveq	r2, r1
 80a5342:	e6e4      	b.n	80a510e <strftime+0x2c2>
 80a5344:	68a9      	ldr	r1, [r5, #8]
 80a5346:	230c      	movs	r3, #12
 80a5348:	b131      	cbz	r1, 80a5358 <strftime+0x50c>
 80a534a:	4299      	cmp	r1, r3
 80a534c:	bf16      	itet	ne
 80a534e:	fb91 f2f3 	sdivne	r2, r1, r3
 80a5352:	460b      	moveq	r3, r1
 80a5354:	fb03 1312 	mlsne	r3, r3, r2, r1
 80a5358:	4a0a      	ldr	r2, [pc, #40]	; (80a5384 <strftime+0x538>)
 80a535a:	490b      	ldr	r1, [pc, #44]	; (80a5388 <strftime+0x53c>)
 80a535c:	2849      	cmp	r0, #73	; 0x49
 80a535e:	bf08      	it	eq
 80a5360:	460a      	moveq	r2, r1
 80a5362:	e6d4      	b.n	80a510e <strftime+0x2c2>
 80a5364:	69eb      	ldr	r3, [r5, #28]
 80a5366:	4a0e      	ldr	r2, [pc, #56]	; (80a53a0 <strftime+0x554>)
 80a5368:	3301      	adds	r3, #1
 80a536a:	e6d0      	b.n	80a510e <strftime+0x2c2>
 80a536c:	fffff894 	.word	0xfffff894
 80a5370:	080a820f 	.word	0x080a820f
 80a5374:	080a7de4 	.word	0x080a7de4
 80a5378:	080a8200 	.word	0x080a8200
 80a537c:	080a8207 	.word	0x080a8207
 80a5380:	080a8211 	.word	0x080a8211
 80a5384:	080a8213 	.word	0x080a8213
 80a5388:	080a8221 	.word	0x080a8221
 80a538c:	080a8217 	.word	0x080a8217
 80a5390:	080a8226 	.word	0x080a8226
 80a5394:	080a822a 	.word	0x080a822a
 80a5398:	fffff895 	.word	0xfffff895
 80a539c:	080a8232 	.word	0x080a8232
 80a53a0:	080a8236 	.word	0x080a8236
 80a53a4:	692b      	ldr	r3, [r5, #16]
 80a53a6:	3301      	adds	r3, #1
 80a53a8:	e13c      	b.n	80a5624 <strftime+0x7d8>
 80a53aa:	686b      	ldr	r3, [r5, #4]
 80a53ac:	e13a      	b.n	80a5624 <strftime+0x7d8>
 80a53ae:	9b02      	ldr	r3, [sp, #8]
 80a53b0:	429c      	cmp	r4, r3
 80a53b2:	f080 81f5 	bcs.w	80a57a0 <strftime+0x954>
 80a53b6:	230a      	movs	r3, #10
 80a53b8:	e1e5      	b.n	80a5786 <strftime+0x93a>
 80a53ba:	68ab      	ldr	r3, [r5, #8]
 80a53bc:	9a03      	ldr	r2, [sp, #12]
 80a53be:	2b0b      	cmp	r3, #11
 80a53c0:	bfcc      	ite	gt
 80a53c2:	23a4      	movgt	r3, #164	; 0xa4
 80a53c4:	23a0      	movle	r3, #160	; 0xa0
 80a53c6:	4413      	add	r3, r2
 80a53c8:	f8d3 8004 	ldr.w	r8, [r3, #4]
 80a53cc:	4640      	mov	r0, r8
 80a53ce:	f000 f9f1 	bl	80a57b4 <strlen>
 80a53d2:	4642      	mov	r2, r8
 80a53d4:	4bb1      	ldr	r3, [pc, #708]	; (80a569c <strftime+0x850>)
 80a53d6:	1939      	adds	r1, r7, r4
 80a53d8:	f8d3 e000 	ldr.w	lr, [r3]
 80a53dc:	4420      	add	r0, r4
 80a53de:	4284      	cmp	r4, r0
 80a53e0:	f000 81d3 	beq.w	80a578a <strftime+0x93e>
 80a53e4:	9b02      	ldr	r3, [sp, #8]
 80a53e6:	429c      	cmp	r4, r3
 80a53e8:	f080 81da 	bcs.w	80a57a0 <strftime+0x954>
 80a53ec:	f899 3000 	ldrb.w	r3, [r9]
 80a53f0:	3401      	adds	r4, #1
 80a53f2:	2b50      	cmp	r3, #80	; 0x50
 80a53f4:	7813      	ldrb	r3, [r2, #0]
 80a53f6:	d10a      	bne.n	80a540e <strftime+0x5c2>
 80a53f8:	eb0e 0c03 	add.w	ip, lr, r3
 80a53fc:	f89c c001 	ldrb.w	ip, [ip, #1]
 80a5400:	f00c 0c03 	and.w	ip, ip, #3
 80a5404:	f1bc 0f01 	cmp.w	ip, #1
 80a5408:	bf08      	it	eq
 80a540a:	3320      	addeq	r3, #32
 80a540c:	b2db      	uxtb	r3, r3
 80a540e:	f801 3b01 	strb.w	r3, [r1], #1
 80a5412:	3201      	adds	r2, #1
 80a5414:	e7e3      	b.n	80a53de <strftime+0x592>
 80a5416:	686b      	ldr	r3, [r5, #4]
 80a5418:	4aa1      	ldr	r2, [pc, #644]	; (80a56a0 <strftime+0x854>)
 80a541a:	9300      	str	r3, [sp, #0]
 80a541c:	68ab      	ldr	r3, [r5, #8]
 80a541e:	e139      	b.n	80a5694 <strftime+0x848>
 80a5420:	6a2b      	ldr	r3, [r5, #32]
 80a5422:	2b00      	cmp	r3, #0
 80a5424:	db17      	blt.n	80a5456 <strftime+0x60a>
 80a5426:	f001 f9db 	bl	80a67e0 <__tz_lock>
 80a542a:	9b06      	ldr	r3, [sp, #24]
 80a542c:	b91b      	cbnz	r3, 80a5436 <strftime+0x5ea>
 80a542e:	f001 f9d9 	bl	80a67e4 <_tzset_unlocked>
 80a5432:	2301      	movs	r3, #1
 80a5434:	9306      	str	r3, [sp, #24]
 80a5436:	f001 fec1 	bl	80a71bc <__gettzinfo>
 80a543a:	6a2b      	ldr	r3, [r5, #32]
 80a543c:	221c      	movs	r2, #28
 80a543e:	2b00      	cmp	r3, #0
 80a5440:	bfd4      	ite	le
 80a5442:	2300      	movle	r3, #0
 80a5444:	2301      	movgt	r3, #1
 80a5446:	fb02 0003 	mla	r0, r2, r3, r0
 80a544a:	6a03      	ldr	r3, [r0, #32]
 80a544c:	f1c3 0800 	rsb	r8, r3, #0
 80a5450:	f001 f9c7 	bl	80a67e2 <__tz_unlock>
 80a5454:	e001      	b.n	80a545a <strftime+0x60e>
 80a5456:	f04f 0800 	mov.w	r8, #0
 80a545a:	f8d5 e014 	ldr.w	lr, [r5, #20]
 80a545e:	ebc4 0c06 	rsb	ip, r4, r6
 80a5462:	4670      	mov	r0, lr
 80a5464:	f1be 0245 	subs.w	r2, lr, #69	; 0x45
 80a5468:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80a546c:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
 80a5470:	2a00      	cmp	r2, #0
 80a5472:	f173 0b00 	sbcs.w	fp, r3, #0
 80a5476:	eb07 0a04 	add.w	sl, r7, r4
 80a547a:	da03      	bge.n	80a5484 <strftime+0x638>
 80a547c:	f1be 0242 	subs.w	r2, lr, #66	; 0x42
 80a5480:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
 80a5484:	0891      	lsrs	r1, r2, #2
 80a5486:	ea41 7183 	orr.w	r1, r1, r3, lsl #30
 80a548a:	109b      	asrs	r3, r3, #2
 80a548c:	9104      	str	r1, [sp, #16]
 80a548e:	9305      	str	r3, [sp, #20]
 80a5490:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 80a5494:	2364      	movs	r3, #100	; 0x64
 80a5496:	fb91 f1f3 	sdiv	r1, r1, r3
 80a549a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a549e:	1a52      	subs	r2, r2, r1
 80a54a0:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
 80a54a4:	f20e 102b 	addw	r0, lr, #299	; 0x12b
 80a54a8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80a54ac:	fb90 f1f1 	sdiv	r1, r0, r1
 80a54b0:	1852      	adds	r2, r2, r1
 80a54b2:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 80a54b6:	f240 116d 	movw	r1, #365	; 0x16d
 80a54ba:	f1ae 0e46 	sub.w	lr, lr, #70	; 0x46
 80a54be:	fb01 fe0e 	mul.w	lr, r1, lr
 80a54c2:	69e9      	ldr	r1, [r5, #28]
 80a54c4:	eb12 020e 	adds.w	r2, r2, lr
 80a54c8:	eb43 73ee 	adc.w	r3, r3, lr, asr #31
 80a54cc:	1852      	adds	r2, r2, r1
 80a54ce:	f04f 0e18 	mov.w	lr, #24
 80a54d2:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 80a54d6:	fba2 010e 	umull	r0, r1, r2, lr
 80a54da:	fb0e 1103 	mla	r1, lr, r3, r1
 80a54de:	68ab      	ldr	r3, [r5, #8]
 80a54e0:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
 80a54e4:	18c0      	adds	r0, r0, r3
 80a54e6:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 80a54ea:	fba0 230e 	umull	r2, r3, r0, lr
 80a54ee:	fb0e 3301 	mla	r3, lr, r1, r3
 80a54f2:	6869      	ldr	r1, [r5, #4]
 80a54f4:	1852      	adds	r2, r2, r1
 80a54f6:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 80a54fa:	fba2 010e 	umull	r0, r1, r2, lr
 80a54fe:	fb0e 1103 	mla	r1, lr, r3, r1
 80a5502:	682b      	ldr	r3, [r5, #0]
 80a5504:	4a67      	ldr	r2, [pc, #412]	; (80a56a4 <strftime+0x858>)
 80a5506:	18c0      	adds	r0, r0, r3
 80a5508:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 80a550c:	ebb0 0008 	subs.w	r0, r0, r8
 80a5510:	eb61 71e8 	sbc.w	r1, r1, r8, asr #31
 80a5514:	e9cd 0100 	strd	r0, r1, [sp]
 80a5518:	4661      	mov	r1, ip
 80a551a:	4650      	mov	r0, sl
 80a551c:	f7fc fbdc 	bl	80a1cd8 <sniprintf>
 80a5520:	e5f9      	b.n	80a5116 <strftime+0x2ca>
 80a5522:	682b      	ldr	r3, [r5, #0]
 80a5524:	e07e      	b.n	80a5624 <strftime+0x7d8>
 80a5526:	9b02      	ldr	r3, [sp, #8]
 80a5528:	429c      	cmp	r4, r3
 80a552a:	f080 8139 	bcs.w	80a57a0 <strftime+0x954>
 80a552e:	2309      	movs	r3, #9
 80a5530:	e129      	b.n	80a5786 <strftime+0x93a>
 80a5532:	682b      	ldr	r3, [r5, #0]
 80a5534:	4a5c      	ldr	r2, [pc, #368]	; (80a56a8 <strftime+0x85c>)
 80a5536:	9301      	str	r3, [sp, #4]
 80a5538:	686b      	ldr	r3, [r5, #4]
 80a553a:	9300      	str	r3, [sp, #0]
 80a553c:	68ab      	ldr	r3, [r5, #8]
 80a553e:	1b31      	subs	r1, r6, r4
 80a5540:	1938      	adds	r0, r7, r4
 80a5542:	e60e      	b.n	80a5162 <strftime+0x316>
 80a5544:	9b02      	ldr	r3, [sp, #8]
 80a5546:	429c      	cmp	r4, r3
 80a5548:	f080 812a 	bcs.w	80a57a0 <strftime+0x954>
 80a554c:	69ab      	ldr	r3, [r5, #24]
 80a554e:	1c62      	adds	r2, r4, #1
 80a5550:	b90b      	cbnz	r3, 80a5556 <strftime+0x70a>
 80a5552:	2337      	movs	r3, #55	; 0x37
 80a5554:	e000      	b.n	80a5558 <strftime+0x70c>
 80a5556:	3330      	adds	r3, #48	; 0x30
 80a5558:	553b      	strb	r3, [r7, r4]
 80a555a:	4614      	mov	r4, r2
 80a555c:	e115      	b.n	80a578a <strftime+0x93e>
 80a555e:	69eb      	ldr	r3, [r5, #28]
 80a5560:	69aa      	ldr	r2, [r5, #24]
 80a5562:	3307      	adds	r3, #7
 80a5564:	1a9b      	subs	r3, r3, r2
 80a5566:	2207      	movs	r2, #7
 80a5568:	fb93 f3f2 	sdiv	r3, r3, r2
 80a556c:	e05a      	b.n	80a5624 <strftime+0x7d8>
 80a556e:	4628      	mov	r0, r5
 80a5570:	f7ff fc0b 	bl	80a4d8a <iso_year_adjust>
 80a5574:	69aa      	ldr	r2, [r5, #24]
 80a5576:	b10a      	cbz	r2, 80a557c <strftime+0x730>
 80a5578:	1e53      	subs	r3, r2, #1
 80a557a:	e000      	b.n	80a557e <strftime+0x732>
 80a557c:	2306      	movs	r3, #6
 80a557e:	2800      	cmp	r0, #0
 80a5580:	dc2f      	bgt.n	80a55e2 <strftime+0x796>
 80a5582:	69ea      	ldr	r2, [r5, #28]
 80a5584:	d101      	bne.n	80a558a <strftime+0x73e>
 80a5586:	320a      	adds	r2, #10
 80a5588:	e03b      	b.n	80a5602 <strftime+0x7b6>
 80a558a:	f240 716b 	movw	r1, #1899	; 0x76b
 80a558e:	1a9a      	subs	r2, r3, r2
 80a5590:	696b      	ldr	r3, [r5, #20]
 80a5592:	2b00      	cmp	r3, #0
 80a5594:	bfb4      	ite	lt
 80a5596:	4608      	movlt	r0, r1
 80a5598:	f06f 0064 	mvnge.w	r0, #100	; 0x64
 80a559c:	4418      	add	r0, r3
 80a559e:	0781      	lsls	r1, r0, #30
 80a55a0:	d107      	bne.n	80a55b2 <strftime+0x766>
 80a55a2:	f04f 0e64 	mov.w	lr, #100	; 0x64
 80a55a6:	4601      	mov	r1, r0
 80a55a8:	fb90 f0fe 	sdiv	r0, r0, lr
 80a55ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80a55b0:	b981      	cbnz	r1, 80a55d4 <strftime+0x788>
 80a55b2:	f240 716b 	movw	r1, #1899	; 0x76b
 80a55b6:	2b00      	cmp	r3, #0
 80a55b8:	bfa8      	it	ge
 80a55ba:	f06f 0164 	mvnge.w	r1, #100	; 0x64
 80a55be:	4419      	add	r1, r3
 80a55c0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80a55c4:	fb91 f0f3 	sdiv	r0, r1, r3
 80a55c8:	fb03 1110 	mls	r1, r3, r0, r1
 80a55cc:	fab1 f181 	clz	r1, r1
 80a55d0:	0949      	lsrs	r1, r1, #5
 80a55d2:	e000      	b.n	80a55d6 <strftime+0x78a>
 80a55d4:	2101      	movs	r1, #1
 80a55d6:	1a52      	subs	r2, r2, r1
 80a55d8:	2a05      	cmp	r2, #5
 80a55da:	bfb4      	ite	lt
 80a55dc:	2335      	movlt	r3, #53	; 0x35
 80a55de:	2334      	movge	r3, #52	; 0x34
 80a55e0:	e020      	b.n	80a5624 <strftime+0x7d8>
 80a55e2:	2301      	movs	r3, #1
 80a55e4:	e01e      	b.n	80a5624 <strftime+0x7d8>
 80a55e6:	9b02      	ldr	r3, [sp, #8]
 80a55e8:	429c      	cmp	r4, r3
 80a55ea:	f080 80d9 	bcs.w	80a57a0 <strftime+0x954>
 80a55ee:	69ab      	ldr	r3, [r5, #24]
 80a55f0:	3330      	adds	r3, #48	; 0x30
 80a55f2:	e0c8      	b.n	80a5786 <strftime+0x93a>
 80a55f4:	69aa      	ldr	r2, [r5, #24]
 80a55f6:	b10a      	cbz	r2, 80a55fc <strftime+0x7b0>
 80a55f8:	1e53      	subs	r3, r2, #1
 80a55fa:	e000      	b.n	80a55fe <strftime+0x7b2>
 80a55fc:	2306      	movs	r3, #6
 80a55fe:	69ea      	ldr	r2, [r5, #28]
 80a5600:	3207      	adds	r2, #7
 80a5602:	1ad2      	subs	r2, r2, r3
 80a5604:	2307      	movs	r3, #7
 80a5606:	fb92 f3f3 	sdiv	r3, r2, r3
 80a560a:	e00b      	b.n	80a5624 <strftime+0x7d8>
 80a560c:	6968      	ldr	r0, [r5, #20]
 80a560e:	2800      	cmp	r0, #0
 80a5610:	da03      	bge.n	80a561a <strftime+0x7ce>
 80a5612:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80a5616:	f001 fa6b 	bl	80a6af0 <abs>
 80a561a:	2364      	movs	r3, #100	; 0x64
 80a561c:	fb90 f2f3 	sdiv	r2, r0, r3
 80a5620:	fb02 0313 	mls	r3, r2, r3, r0
 80a5624:	4a21      	ldr	r2, [pc, #132]	; (80a56ac <strftime+0x860>)
 80a5626:	e572      	b.n	80a510e <strftime+0x2c2>
 80a5628:	696b      	ldr	r3, [r5, #20]
 80a562a:	4a21      	ldr	r2, [pc, #132]	; (80a56b0 <strftime+0x864>)
 80a562c:	f203 7b6c 	addw	fp, r3, #1900	; 0x76c
 80a5630:	4293      	cmp	r3, r2
 80a5632:	da05      	bge.n	80a5640 <strftime+0x7f4>
 80a5634:	232d      	movs	r3, #45	; 0x2d
 80a5636:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 80a563a:	f1cb 0b00 	rsb	fp, fp, #0
 80a563e:	e008      	b.n	80a5652 <strftime+0x806>
 80a5640:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 80a5644:	d10d      	bne.n	80a5662 <strftime+0x816>
 80a5646:	f242 730f 	movw	r3, #9999	; 0x270f
 80a564a:	459b      	cmp	fp, r3
 80a564c:	d911      	bls.n	80a5672 <strftime+0x826>
 80a564e:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 80a5652:	f1b8 0f00 	cmp.w	r8, #0
 80a5656:	d001      	beq.n	80a565c <strftime+0x810>
 80a5658:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80a565c:	f10d 0329 	add.w	r3, sp, #41	; 0x29
 80a5660:	e000      	b.n	80a5664 <strftime+0x818>
 80a5662:	ab0a      	add	r3, sp, #40	; 0x28
 80a5664:	2225      	movs	r2, #37	; 0x25
 80a5666:	701a      	strb	r2, [r3, #0]
 80a5668:	f1ba 0f00 	cmp.w	sl, #0
 80a566c:	d108      	bne.n	80a5680 <strftime+0x834>
 80a566e:	1c58      	adds	r0, r3, #1
 80a5670:	e009      	b.n	80a5686 <strftime+0x83a>
 80a5672:	f1b8 0f00 	cmp.w	r8, #0
 80a5676:	d1f4      	bne.n	80a5662 <strftime+0x816>
 80a5678:	2325      	movs	r3, #37	; 0x25
 80a567a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 80a567e:	ab0a      	add	r3, sp, #40	; 0x28
 80a5680:	2230      	movs	r2, #48	; 0x30
 80a5682:	1c98      	adds	r0, r3, #2
 80a5684:	705a      	strb	r2, [r3, #1]
 80a5686:	490b      	ldr	r1, [pc, #44]	; (80a56b4 <strftime+0x868>)
 80a5688:	f7ff fb5c 	bl	80a4d44 <strcpy>
 80a568c:	f8cd b000 	str.w	fp, [sp]
 80a5690:	4643      	mov	r3, r8
 80a5692:	aa0a      	add	r2, sp, #40	; 0x28
 80a5694:	1b31      	subs	r1, r6, r4
 80a5696:	1938      	adds	r0, r7, r4
 80a5698:	e03f      	b.n	80a571a <strftime+0x8ce>
 80a569a:	bf00      	nop
 80a569c:	20000388 	.word	0x20000388
 80a56a0:	080a8245 	.word	0x080a8245
 80a56a4:	080a823b 	.word	0x080a823b
 80a56a8:	080a8240 	.word	0x080a8240
 80a56ac:	080a8221 	.word	0x080a8221
 80a56b0:	fffff894 	.word	0xfffff894
 80a56b4:	080a8232 	.word	0x080a8232
 80a56b8:	6a2b      	ldr	r3, [r5, #32]
 80a56ba:	2b00      	cmp	r3, #0
 80a56bc:	db65      	blt.n	80a578a <strftime+0x93e>
 80a56be:	f001 f88f 	bl	80a67e0 <__tz_lock>
 80a56c2:	9b06      	ldr	r3, [sp, #24]
 80a56c4:	b91b      	cbnz	r3, 80a56ce <strftime+0x882>
 80a56c6:	f001 f88d 	bl	80a67e4 <_tzset_unlocked>
 80a56ca:	2301      	movs	r3, #1
 80a56cc:	9306      	str	r3, [sp, #24]
 80a56ce:	f001 fd75 	bl	80a71bc <__gettzinfo>
 80a56d2:	6a2b      	ldr	r3, [r5, #32]
 80a56d4:	221c      	movs	r2, #28
 80a56d6:	2b00      	cmp	r3, #0
 80a56d8:	bfd4      	ite	le
 80a56da:	2300      	movle	r3, #0
 80a56dc:	2301      	movgt	r3, #1
 80a56de:	fb02 0003 	mla	r0, r2, r3, r0
 80a56e2:	6a03      	ldr	r3, [r0, #32]
 80a56e4:	eb07 0a04 	add.w	sl, r7, r4
 80a56e8:	f1c3 0800 	rsb	r8, r3, #0
 80a56ec:	f001 f879 	bl	80a67e2 <__tz_unlock>
 80a56f0:	233c      	movs	r3, #60	; 0x3c
 80a56f2:	fb98 f0f3 	sdiv	r0, r8, r3
 80a56f6:	9307      	str	r3, [sp, #28]
 80a56f8:	f001 fdfa 	bl	80a72f0 <labs>
 80a56fc:	9b07      	ldr	r3, [sp, #28]
 80a56fe:	ebc4 0b06 	rsb	fp, r4, r6
 80a5702:	fb90 f2f3 	sdiv	r2, r0, r3
 80a5706:	fb02 0013 	mls	r0, r2, r3, r0
 80a570a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80a570e:	9000      	str	r0, [sp, #0]
 80a5710:	fb98 f3f3 	sdiv	r3, r8, r3
 80a5714:	4659      	mov	r1, fp
 80a5716:	4650      	mov	r0, sl
 80a5718:	4a24      	ldr	r2, [pc, #144]	; (80a57ac <strftime+0x960>)
 80a571a:	f7fc fadd 	bl	80a1cd8 <sniprintf>
 80a571e:	e4fa      	b.n	80a5116 <strftime+0x2ca>
 80a5720:	4404      	add	r4, r0
 80a5722:	42a6      	cmp	r6, r4
 80a5724:	d831      	bhi.n	80a578a <strftime+0x93e>
 80a5726:	e03b      	b.n	80a57a0 <strftime+0x954>
 80a5728:	6a2b      	ldr	r3, [r5, #32]
 80a572a:	2b00      	cmp	r3, #0
 80a572c:	db2d      	blt.n	80a578a <strftime+0x93e>
 80a572e:	f001 f857 	bl	80a67e0 <__tz_lock>
 80a5732:	9b06      	ldr	r3, [sp, #24]
 80a5734:	b91b      	cbnz	r3, 80a573e <strftime+0x8f2>
 80a5736:	f001 f855 	bl	80a67e4 <_tzset_unlocked>
 80a573a:	2301      	movs	r3, #1
 80a573c:	9306      	str	r3, [sp, #24]
 80a573e:	6a2b      	ldr	r3, [r5, #32]
 80a5740:	4a1b      	ldr	r2, [pc, #108]	; (80a57b0 <strftime+0x964>)
 80a5742:	2b00      	cmp	r3, #0
 80a5744:	bfd4      	ite	le
 80a5746:	2300      	movle	r3, #0
 80a5748:	2301      	movgt	r3, #1
 80a574a:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 80a574e:	4640      	mov	r0, r8
 80a5750:	f000 f830 	bl	80a57b4 <strlen>
 80a5754:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80a5758:	193b      	adds	r3, r7, r4
 80a575a:	4420      	add	r0, r4
 80a575c:	4284      	cmp	r4, r0
 80a575e:	d00b      	beq.n	80a5778 <strftime+0x92c>
 80a5760:	9a02      	ldr	r2, [sp, #8]
 80a5762:	4294      	cmp	r4, r2
 80a5764:	d205      	bcs.n	80a5772 <strftime+0x926>
 80a5766:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 80a576a:	3401      	adds	r4, #1
 80a576c:	f803 2b01 	strb.w	r2, [r3], #1
 80a5770:	e7f4      	b.n	80a575c <strftime+0x910>
 80a5772:	f001 f836 	bl	80a67e2 <__tz_unlock>
 80a5776:	e013      	b.n	80a57a0 <strftime+0x954>
 80a5778:	f001 f833 	bl	80a67e2 <__tz_unlock>
 80a577c:	e005      	b.n	80a578a <strftime+0x93e>
 80a577e:	9b02      	ldr	r3, [sp, #8]
 80a5780:	429c      	cmp	r4, r3
 80a5782:	d20d      	bcs.n	80a57a0 <strftime+0x954>
 80a5784:	2325      	movs	r3, #37	; 0x25
 80a5786:	553b      	strb	r3, [r7, r4]
 80a5788:	3401      	adds	r4, #1
 80a578a:	f899 3000 	ldrb.w	r3, [r9]
 80a578e:	b11b      	cbz	r3, 80a5798 <strftime+0x94c>
 80a5790:	f109 0901 	add.w	r9, r9, #1
 80a5794:	f7ff bb69 	b.w	80a4e6a <strftime+0x1e>
 80a5798:	b126      	cbz	r6, 80a57a4 <strftime+0x958>
 80a579a:	2300      	movs	r3, #0
 80a579c:	553b      	strb	r3, [r7, r4]
 80a579e:	e001      	b.n	80a57a4 <strftime+0x958>
 80a57a0:	2000      	movs	r0, #0
 80a57a2:	e000      	b.n	80a57a6 <strftime+0x95a>
 80a57a4:	4620      	mov	r0, r4
 80a57a6:	b013      	add	sp, #76	; 0x4c
 80a57a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a57ac:	080a824f 	.word	0x080a824f
 80a57b0:	20000428 	.word	0x20000428

080a57b4 <strlen>:
 80a57b4:	4603      	mov	r3, r0
 80a57b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a57ba:	2a00      	cmp	r2, #0
 80a57bc:	d1fb      	bne.n	80a57b6 <strlen+0x2>
 80a57be:	1a18      	subs	r0, r3, r0
 80a57c0:	3801      	subs	r0, #1
 80a57c2:	4770      	bx	lr

080a57c4 <strncmp>:
 80a57c4:	b530      	push	{r4, r5, lr}
 80a57c6:	b182      	cbz	r2, 80a57ea <strncmp+0x26>
 80a57c8:	1e45      	subs	r5, r0, #1
 80a57ca:	3901      	subs	r1, #1
 80a57cc:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80a57d0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80a57d4:	42a3      	cmp	r3, r4
 80a57d6:	d106      	bne.n	80a57e6 <strncmp+0x22>
 80a57d8:	43ec      	mvns	r4, r5
 80a57da:	4414      	add	r4, r2
 80a57dc:	42e0      	cmn	r0, r4
 80a57de:	d001      	beq.n	80a57e4 <strncmp+0x20>
 80a57e0:	2b00      	cmp	r3, #0
 80a57e2:	d1f3      	bne.n	80a57cc <strncmp+0x8>
 80a57e4:	461c      	mov	r4, r3
 80a57e6:	1b18      	subs	r0, r3, r4
 80a57e8:	bd30      	pop	{r4, r5, pc}
 80a57ea:	4610      	mov	r0, r2
 80a57ec:	bd30      	pop	{r4, r5, pc}

080a57ee <sulp>:
 80a57ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a57f2:	460f      	mov	r7, r1
 80a57f4:	4690      	mov	r8, r2
 80a57f6:	f002 f845 	bl	80a7884 <__ulp>
 80a57fa:	4604      	mov	r4, r0
 80a57fc:	460d      	mov	r5, r1
 80a57fe:	f1b8 0f00 	cmp.w	r8, #0
 80a5802:	d011      	beq.n	80a5828 <sulp+0x3a>
 80a5804:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80a5808:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80a580c:	2b00      	cmp	r3, #0
 80a580e:	dd0b      	ble.n	80a5828 <sulp+0x3a>
 80a5810:	051b      	lsls	r3, r3, #20
 80a5812:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80a5816:	2400      	movs	r4, #0
 80a5818:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80a581c:	4622      	mov	r2, r4
 80a581e:	462b      	mov	r3, r5
 80a5820:	f7fe f91c 	bl	80a3a5c <__aeabi_dmul>
 80a5824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a5828:	4620      	mov	r0, r4
 80a582a:	4629      	mov	r1, r5
 80a582c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a5830 <_strtod_r>:
 80a5830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a5834:	4682      	mov	sl, r0
 80a5836:	460c      	mov	r4, r1
 80a5838:	b09d      	sub	sp, #116	; 0x74
 80a583a:	2300      	movs	r3, #0
 80a583c:	9213      	str	r2, [sp, #76]	; 0x4c
 80a583e:	9318      	str	r3, [sp, #96]	; 0x60
 80a5840:	f04f 0800 	mov.w	r8, #0
 80a5844:	f04f 0900 	mov.w	r9, #0
 80a5848:	9117      	str	r1, [sp, #92]	; 0x5c
 80a584a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a584c:	781a      	ldrb	r2, [r3, #0]
 80a584e:	2a0d      	cmp	r2, #13
 80a5850:	d805      	bhi.n	80a585e <_strtod_r+0x2e>
 80a5852:	2a09      	cmp	r2, #9
 80a5854:	d213      	bcs.n	80a587e <_strtod_r+0x4e>
 80a5856:	2a00      	cmp	r2, #0
 80a5858:	f000 81ad 	beq.w	80a5bb6 <_strtod_r+0x386>
 80a585c:	e012      	b.n	80a5884 <_strtod_r+0x54>
 80a585e:	2a2b      	cmp	r2, #43	; 0x2b
 80a5860:	d004      	beq.n	80a586c <_strtod_r+0x3c>
 80a5862:	2a2d      	cmp	r2, #45	; 0x2d
 80a5864:	d004      	beq.n	80a5870 <_strtod_r+0x40>
 80a5866:	2a20      	cmp	r2, #32
 80a5868:	d10c      	bne.n	80a5884 <_strtod_r+0x54>
 80a586a:	e008      	b.n	80a587e <_strtod_r+0x4e>
 80a586c:	2200      	movs	r2, #0
 80a586e:	e000      	b.n	80a5872 <_strtod_r+0x42>
 80a5870:	2201      	movs	r2, #1
 80a5872:	920c      	str	r2, [sp, #48]	; 0x30
 80a5874:	1c5a      	adds	r2, r3, #1
 80a5876:	9217      	str	r2, [sp, #92]	; 0x5c
 80a5878:	785b      	ldrb	r3, [r3, #1]
 80a587a:	b92b      	cbnz	r3, 80a5888 <_strtod_r+0x58>
 80a587c:	e19b      	b.n	80a5bb6 <_strtod_r+0x386>
 80a587e:	3301      	adds	r3, #1
 80a5880:	9317      	str	r3, [sp, #92]	; 0x5c
 80a5882:	e7e2      	b.n	80a584a <_strtod_r+0x1a>
 80a5884:	2300      	movs	r3, #0
 80a5886:	930c      	str	r3, [sp, #48]	; 0x30
 80a5888:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80a588a:	782b      	ldrb	r3, [r5, #0]
 80a588c:	2b30      	cmp	r3, #48	; 0x30
 80a588e:	d15c      	bne.n	80a594a <_strtod_r+0x11a>
 80a5890:	786b      	ldrb	r3, [r5, #1]
 80a5892:	2b58      	cmp	r3, #88	; 0x58
 80a5894:	d001      	beq.n	80a589a <_strtod_r+0x6a>
 80a5896:	2b78      	cmp	r3, #120	; 0x78
 80a5898:	d14c      	bne.n	80a5934 <_strtod_r+0x104>
 80a589a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a589c:	4aa8      	ldr	r2, [pc, #672]	; (80a5b40 <_strtod_r+0x310>)
 80a589e:	9301      	str	r3, [sp, #4]
 80a58a0:	ab18      	add	r3, sp, #96	; 0x60
 80a58a2:	9300      	str	r3, [sp, #0]
 80a58a4:	a917      	add	r1, sp, #92	; 0x5c
 80a58a6:	ab19      	add	r3, sp, #100	; 0x64
 80a58a8:	4650      	mov	r0, sl
 80a58aa:	f001 f970 	bl	80a6b8e <__gethex>
 80a58ae:	f010 0607 	ands.w	r6, r0, #7
 80a58b2:	4604      	mov	r4, r0
 80a58b4:	f000 8585 	beq.w	80a63c2 <_strtod_r+0xb92>
 80a58b8:	2e06      	cmp	r6, #6
 80a58ba:	d105      	bne.n	80a58c8 <_strtod_r+0x98>
 80a58bc:	3501      	adds	r5, #1
 80a58be:	2300      	movs	r3, #0
 80a58c0:	9517      	str	r5, [sp, #92]	; 0x5c
 80a58c2:	930c      	str	r3, [sp, #48]	; 0x30
 80a58c4:	f000 bd7d 	b.w	80a63c2 <_strtod_r+0xb92>
 80a58c8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80a58ca:	b13a      	cbz	r2, 80a58dc <_strtod_r+0xac>
 80a58cc:	2135      	movs	r1, #53	; 0x35
 80a58ce:	a81a      	add	r0, sp, #104	; 0x68
 80a58d0:	f002 f8bf 	bl	80a7a52 <__copybits>
 80a58d4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80a58d6:	4650      	mov	r0, sl
 80a58d8:	f001 fd43 	bl	80a7362 <_Bfree>
 80a58dc:	2e06      	cmp	r6, #6
 80a58de:	d822      	bhi.n	80a5926 <_strtod_r+0xf6>
 80a58e0:	e8df f006 	tbb	[pc, r6]
 80a58e4:	18080d04 	.word	0x18080d04
 80a58e8:	0d1d      	.short	0x0d1d
 80a58ea:	04          	.byte	0x04
 80a58eb:	00          	.byte	0x00
 80a58ec:	f04f 0900 	mov.w	r9, #0
 80a58f0:	46c8      	mov	r8, r9
 80a58f2:	e018      	b.n	80a5926 <_strtod_r+0xf6>
 80a58f4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80a58f8:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 80a58fc:	e013      	b.n	80a5926 <_strtod_r+0xf6>
 80a58fe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80a5900:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80a5902:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80a5906:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80a590a:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80a590e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80a5912:	e008      	b.n	80a5926 <_strtod_r+0xf6>
 80a5914:	f8df 922c 	ldr.w	r9, [pc, #556]	; 80a5b44 <_strtod_r+0x314>
 80a5918:	f04f 0800 	mov.w	r8, #0
 80a591c:	e003      	b.n	80a5926 <_strtod_r+0xf6>
 80a591e:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80a5922:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80a5926:	0721      	lsls	r1, r4, #28
 80a5928:	f140 854b 	bpl.w	80a63c2 <_strtod_r+0xb92>
 80a592c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80a5930:	f000 bd47 	b.w	80a63c2 <_strtod_r+0xb92>
 80a5934:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a5936:	1c5a      	adds	r2, r3, #1
 80a5938:	9217      	str	r2, [sp, #92]	; 0x5c
 80a593a:	785b      	ldrb	r3, [r3, #1]
 80a593c:	2b30      	cmp	r3, #48	; 0x30
 80a593e:	d0f9      	beq.n	80a5934 <_strtod_r+0x104>
 80a5940:	2b00      	cmp	r3, #0
 80a5942:	f000 853e 	beq.w	80a63c2 <_strtod_r+0xb92>
 80a5946:	2301      	movs	r3, #1
 80a5948:	e000      	b.n	80a594c <_strtod_r+0x11c>
 80a594a:	2300      	movs	r3, #0
 80a594c:	9305      	str	r3, [sp, #20]
 80a594e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a5950:	220a      	movs	r2, #10
 80a5952:	9306      	str	r3, [sp, #24]
 80a5954:	2300      	movs	r3, #0
 80a5956:	469b      	mov	fp, r3
 80a5958:	9302      	str	r3, [sp, #8]
 80a595a:	9304      	str	r3, [sp, #16]
 80a595c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80a595e:	782e      	ldrb	r6, [r5, #0]
 80a5960:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80a5964:	b2d9      	uxtb	r1, r3
 80a5966:	2909      	cmp	r1, #9
 80a5968:	d811      	bhi.n	80a598e <_strtod_r+0x15e>
 80a596a:	f1bb 0f08 	cmp.w	fp, #8
 80a596e:	bfd5      	itete	le
 80a5970:	9904      	ldrle	r1, [sp, #16]
 80a5972:	9902      	ldrgt	r1, [sp, #8]
 80a5974:	fb02 3301 	mlale	r3, r2, r1, r3
 80a5978:	fb02 3301 	mlagt	r3, r2, r1, r3
 80a597c:	f105 0501 	add.w	r5, r5, #1
 80a5980:	bfd4      	ite	le
 80a5982:	9304      	strle	r3, [sp, #16]
 80a5984:	9302      	strgt	r3, [sp, #8]
 80a5986:	f10b 0b01 	add.w	fp, fp, #1
 80a598a:	9517      	str	r5, [sp, #92]	; 0x5c
 80a598c:	e7e6      	b.n	80a595c <_strtod_r+0x12c>
 80a598e:	4650      	mov	r0, sl
 80a5990:	f7ff f98e 	bl	80a4cb0 <_localeconv_r>
 80a5994:	6807      	ldr	r7, [r0, #0]
 80a5996:	4650      	mov	r0, sl
 80a5998:	f7ff f98a 	bl	80a4cb0 <_localeconv_r>
 80a599c:	6800      	ldr	r0, [r0, #0]
 80a599e:	f7ff ff09 	bl	80a57b4 <strlen>
 80a59a2:	4639      	mov	r1, r7
 80a59a4:	4602      	mov	r2, r0
 80a59a6:	4628      	mov	r0, r5
 80a59a8:	f7ff ff0c 	bl	80a57c4 <strncmp>
 80a59ac:	4607      	mov	r7, r0
 80a59ae:	b128      	cbz	r0, 80a59bc <_strtod_r+0x18c>
 80a59b0:	2000      	movs	r0, #0
 80a59b2:	4633      	mov	r3, r6
 80a59b4:	465d      	mov	r5, fp
 80a59b6:	4602      	mov	r2, r0
 80a59b8:	4601      	mov	r1, r0
 80a59ba:	e05a      	b.n	80a5a72 <_strtod_r+0x242>
 80a59bc:	4650      	mov	r0, sl
 80a59be:	f7ff f977 	bl	80a4cb0 <_localeconv_r>
 80a59c2:	6800      	ldr	r0, [r0, #0]
 80a59c4:	f7ff fef6 	bl	80a57b4 <strlen>
 80a59c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a59ca:	181a      	adds	r2, r3, r0
 80a59cc:	9217      	str	r2, [sp, #92]	; 0x5c
 80a59ce:	5c1b      	ldrb	r3, [r3, r0]
 80a59d0:	f1bb 0f00 	cmp.w	fp, #0
 80a59d4:	d145      	bne.n	80a5a62 <_strtod_r+0x232>
 80a59d6:	4658      	mov	r0, fp
 80a59d8:	2b30      	cmp	r3, #48	; 0x30
 80a59da:	d105      	bne.n	80a59e8 <_strtod_r+0x1b8>
 80a59dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a59de:	3001      	adds	r0, #1
 80a59e0:	1c5a      	adds	r2, r3, #1
 80a59e2:	9217      	str	r2, [sp, #92]	; 0x5c
 80a59e4:	785b      	ldrb	r3, [r3, #1]
 80a59e6:	e7f7      	b.n	80a59d8 <_strtod_r+0x1a8>
 80a59e8:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80a59ec:	2a08      	cmp	r2, #8
 80a59ee:	d846      	bhi.n	80a5a7e <_strtod_r+0x24e>
 80a59f0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80a59f2:	9206      	str	r2, [sp, #24]
 80a59f4:	4602      	mov	r2, r0
 80a59f6:	2000      	movs	r0, #0
 80a59f8:	4605      	mov	r5, r0
 80a59fa:	3b30      	subs	r3, #48	; 0x30
 80a59fc:	f100 0101 	add.w	r1, r0, #1
 80a5a00:	d029      	beq.n	80a5a56 <_strtod_r+0x226>
 80a5a02:	440a      	add	r2, r1
 80a5a04:	4629      	mov	r1, r5
 80a5a06:	eb05 0c00 	add.w	ip, r5, r0
 80a5a0a:	260a      	movs	r6, #10
 80a5a0c:	4561      	cmp	r1, ip
 80a5a0e:	d00f      	beq.n	80a5a30 <_strtod_r+0x200>
 80a5a10:	3101      	adds	r1, #1
 80a5a12:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 80a5a16:	f1be 0f08 	cmp.w	lr, #8
 80a5a1a:	dc03      	bgt.n	80a5a24 <_strtod_r+0x1f4>
 80a5a1c:	9f04      	ldr	r7, [sp, #16]
 80a5a1e:	4377      	muls	r7, r6
 80a5a20:	9704      	str	r7, [sp, #16]
 80a5a22:	e7f3      	b.n	80a5a0c <_strtod_r+0x1dc>
 80a5a24:	2910      	cmp	r1, #16
 80a5a26:	bfde      	ittt	le
 80a5a28:	9f02      	ldrle	r7, [sp, #8]
 80a5a2a:	4377      	mulle	r7, r6
 80a5a2c:	9702      	strle	r7, [sp, #8]
 80a5a2e:	e7ed      	b.n	80a5a0c <_strtod_r+0x1dc>
 80a5a30:	4428      	add	r0, r5
 80a5a32:	2808      	cmp	r0, #8
 80a5a34:	f100 0501 	add.w	r5, r0, #1
 80a5a38:	dc05      	bgt.n	80a5a46 <_strtod_r+0x216>
 80a5a3a:	9804      	ldr	r0, [sp, #16]
 80a5a3c:	210a      	movs	r1, #10
 80a5a3e:	fb01 3300 	mla	r3, r1, r0, r3
 80a5a42:	9304      	str	r3, [sp, #16]
 80a5a44:	e006      	b.n	80a5a54 <_strtod_r+0x224>
 80a5a46:	2d10      	cmp	r5, #16
 80a5a48:	bfdf      	itttt	le
 80a5a4a:	9802      	ldrle	r0, [sp, #8]
 80a5a4c:	210a      	movle	r1, #10
 80a5a4e:	fb01 3300 	mlale	r3, r1, r0, r3
 80a5a52:	9302      	strle	r3, [sp, #8]
 80a5a54:	2100      	movs	r1, #0
 80a5a56:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a5a58:	1c58      	adds	r0, r3, #1
 80a5a5a:	9017      	str	r0, [sp, #92]	; 0x5c
 80a5a5c:	785b      	ldrb	r3, [r3, #1]
 80a5a5e:	4608      	mov	r0, r1
 80a5a60:	e002      	b.n	80a5a68 <_strtod_r+0x238>
 80a5a62:	465d      	mov	r5, fp
 80a5a64:	4638      	mov	r0, r7
 80a5a66:	463a      	mov	r2, r7
 80a5a68:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80a5a6c:	2909      	cmp	r1, #9
 80a5a6e:	d9c4      	bls.n	80a59fa <_strtod_r+0x1ca>
 80a5a70:	2101      	movs	r1, #1
 80a5a72:	2b65      	cmp	r3, #101	; 0x65
 80a5a74:	d001      	beq.n	80a5a7a <_strtod_r+0x24a>
 80a5a76:	2b45      	cmp	r3, #69	; 0x45
 80a5a78:	d14f      	bne.n	80a5b1a <_strtod_r+0x2ea>
 80a5a7a:	b96d      	cbnz	r5, 80a5a98 <_strtod_r+0x268>
 80a5a7c:	e004      	b.n	80a5a88 <_strtod_r+0x258>
 80a5a7e:	2b65      	cmp	r3, #101	; 0x65
 80a5a80:	f040 84ad 	bne.w	80a63de <_strtod_r+0xbae>
 80a5a84:	2200      	movs	r2, #0
 80a5a86:	2101      	movs	r1, #1
 80a5a88:	b928      	cbnz	r0, 80a5a96 <_strtod_r+0x266>
 80a5a8a:	9b05      	ldr	r3, [sp, #20]
 80a5a8c:	2b00      	cmp	r3, #0
 80a5a8e:	f000 8092 	beq.w	80a5bb6 <_strtod_r+0x386>
 80a5a92:	4605      	mov	r5, r0
 80a5a94:	e000      	b.n	80a5a98 <_strtod_r+0x268>
 80a5a96:	2500      	movs	r5, #0
 80a5a98:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80a5a9a:	1c63      	adds	r3, r4, #1
 80a5a9c:	9317      	str	r3, [sp, #92]	; 0x5c
 80a5a9e:	7863      	ldrb	r3, [r4, #1]
 80a5aa0:	2b2b      	cmp	r3, #43	; 0x2b
 80a5aa2:	d006      	beq.n	80a5ab2 <_strtod_r+0x282>
 80a5aa4:	2b2d      	cmp	r3, #45	; 0x2d
 80a5aa6:	d002      	beq.n	80a5aae <_strtod_r+0x27e>
 80a5aa8:	2600      	movs	r6, #0
 80a5aaa:	9603      	str	r6, [sp, #12]
 80a5aac:	e006      	b.n	80a5abc <_strtod_r+0x28c>
 80a5aae:	2301      	movs	r3, #1
 80a5ab0:	e000      	b.n	80a5ab4 <_strtod_r+0x284>
 80a5ab2:	2300      	movs	r3, #0
 80a5ab4:	9303      	str	r3, [sp, #12]
 80a5ab6:	1ca3      	adds	r3, r4, #2
 80a5ab8:	9317      	str	r3, [sp, #92]	; 0x5c
 80a5aba:	78a3      	ldrb	r3, [r4, #2]
 80a5abc:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80a5ac0:	2e09      	cmp	r6, #9
 80a5ac2:	d829      	bhi.n	80a5b18 <_strtod_r+0x2e8>
 80a5ac4:	2b30      	cmp	r3, #48	; 0x30
 80a5ac6:	d104      	bne.n	80a5ad2 <_strtod_r+0x2a2>
 80a5ac8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a5aca:	1c5e      	adds	r6, r3, #1
 80a5acc:	9617      	str	r6, [sp, #92]	; 0x5c
 80a5ace:	785b      	ldrb	r3, [r3, #1]
 80a5ad0:	e7f8      	b.n	80a5ac4 <_strtod_r+0x294>
 80a5ad2:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
 80a5ad6:	2e08      	cmp	r6, #8
 80a5ad8:	d81f      	bhi.n	80a5b1a <_strtod_r+0x2ea>
 80a5ada:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80a5ade:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a5ae0:	461f      	mov	r7, r3
 80a5ae2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a5ae4:	1c5e      	adds	r6, r3, #1
 80a5ae6:	9617      	str	r6, [sp, #92]	; 0x5c
 80a5ae8:	785b      	ldrb	r3, [r3, #1]
 80a5aea:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 80a5aee:	f1bc 0f09 	cmp.w	ip, #9
 80a5af2:	d805      	bhi.n	80a5b00 <_strtod_r+0x2d0>
 80a5af4:	260a      	movs	r6, #10
 80a5af6:	fb06 3e0e 	mla	lr, r6, lr, r3
 80a5afa:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80a5afe:	e7f0      	b.n	80a5ae2 <_strtod_r+0x2b2>
 80a5b00:	1bf6      	subs	r6, r6, r7
 80a5b02:	2e08      	cmp	r6, #8
 80a5b04:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80a5b08:	dc02      	bgt.n	80a5b10 <_strtod_r+0x2e0>
 80a5b0a:	4576      	cmp	r6, lr
 80a5b0c:	bfa8      	it	ge
 80a5b0e:	4676      	movge	r6, lr
 80a5b10:	9f03      	ldr	r7, [sp, #12]
 80a5b12:	b11f      	cbz	r7, 80a5b1c <_strtod_r+0x2ec>
 80a5b14:	4276      	negs	r6, r6
 80a5b16:	e001      	b.n	80a5b1c <_strtod_r+0x2ec>
 80a5b18:	9417      	str	r4, [sp, #92]	; 0x5c
 80a5b1a:	2600      	movs	r6, #0
 80a5b1c:	2d00      	cmp	r5, #0
 80a5b1e:	d152      	bne.n	80a5bc6 <_strtod_r+0x396>
 80a5b20:	2800      	cmp	r0, #0
 80a5b22:	f040 844e 	bne.w	80a63c2 <_strtod_r+0xb92>
 80a5b26:	9a05      	ldr	r2, [sp, #20]
 80a5b28:	2a00      	cmp	r2, #0
 80a5b2a:	f040 844a 	bne.w	80a63c2 <_strtod_r+0xb92>
 80a5b2e:	2900      	cmp	r1, #0
 80a5b30:	d141      	bne.n	80a5bb6 <_strtod_r+0x386>
 80a5b32:	2b4e      	cmp	r3, #78	; 0x4e
 80a5b34:	d020      	beq.n	80a5b78 <_strtod_r+0x348>
 80a5b36:	dc07      	bgt.n	80a5b48 <_strtod_r+0x318>
 80a5b38:	2b49      	cmp	r3, #73	; 0x49
 80a5b3a:	d00a      	beq.n	80a5b52 <_strtod_r+0x322>
 80a5b3c:	e03b      	b.n	80a5bb6 <_strtod_r+0x386>
 80a5b3e:	bf00      	nop
 80a5b40:	080a825c 	.word	0x080a825c
 80a5b44:	7ff00000 	.word	0x7ff00000
 80a5b48:	2b69      	cmp	r3, #105	; 0x69
 80a5b4a:	d002      	beq.n	80a5b52 <_strtod_r+0x322>
 80a5b4c:	2b6e      	cmp	r3, #110	; 0x6e
 80a5b4e:	d013      	beq.n	80a5b78 <_strtod_r+0x348>
 80a5b50:	e031      	b.n	80a5bb6 <_strtod_r+0x386>
 80a5b52:	49aa      	ldr	r1, [pc, #680]	; (80a5dfc <_strtod_r+0x5cc>)
 80a5b54:	a817      	add	r0, sp, #92	; 0x5c
 80a5b56:	f001 fa4b 	bl	80a6ff0 <__match>
 80a5b5a:	b360      	cbz	r0, 80a5bb6 <_strtod_r+0x386>
 80a5b5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a5b5e:	49a8      	ldr	r1, [pc, #672]	; (80a5e00 <_strtod_r+0x5d0>)
 80a5b60:	3b01      	subs	r3, #1
 80a5b62:	a817      	add	r0, sp, #92	; 0x5c
 80a5b64:	9317      	str	r3, [sp, #92]	; 0x5c
 80a5b66:	f001 fa43 	bl	80a6ff0 <__match>
 80a5b6a:	b910      	cbnz	r0, 80a5b72 <_strtod_r+0x342>
 80a5b6c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a5b6e:	3301      	adds	r3, #1
 80a5b70:	9317      	str	r3, [sp, #92]	; 0x5c
 80a5b72:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 80a5e1c <_strtod_r+0x5ec>
 80a5b76:	e01a      	b.n	80a5bae <_strtod_r+0x37e>
 80a5b78:	49a2      	ldr	r1, [pc, #648]	; (80a5e04 <_strtod_r+0x5d4>)
 80a5b7a:	a817      	add	r0, sp, #92	; 0x5c
 80a5b7c:	f001 fa38 	bl	80a6ff0 <__match>
 80a5b80:	b1c8      	cbz	r0, 80a5bb6 <_strtod_r+0x386>
 80a5b82:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a5b84:	781b      	ldrb	r3, [r3, #0]
 80a5b86:	2b28      	cmp	r3, #40	; 0x28
 80a5b88:	d10f      	bne.n	80a5baa <_strtod_r+0x37a>
 80a5b8a:	aa1a      	add	r2, sp, #104	; 0x68
 80a5b8c:	499e      	ldr	r1, [pc, #632]	; (80a5e08 <_strtod_r+0x5d8>)
 80a5b8e:	a817      	add	r0, sp, #92	; 0x5c
 80a5b90:	f001 fa41 	bl	80a7016 <__hexnan>
 80a5b94:	2805      	cmp	r0, #5
 80a5b96:	d108      	bne.n	80a5baa <_strtod_r+0x37a>
 80a5b98:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80a5b9a:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80a5b9e:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80a5ba2:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80a5ba6:	f000 bc0c 	b.w	80a63c2 <_strtod_r+0xb92>
 80a5baa:	f8df 9274 	ldr.w	r9, [pc, #628]	; 80a5e20 <_strtod_r+0x5f0>
 80a5bae:	f04f 0800 	mov.w	r8, #0
 80a5bb2:	f000 bc06 	b.w	80a63c2 <_strtod_r+0xb92>
 80a5bb6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80a5bb8:	9417      	str	r4, [sp, #92]	; 0x5c
 80a5bba:	2b00      	cmp	r3, #0
 80a5bbc:	f000 840c 	beq.w	80a63d8 <_strtod_r+0xba8>
 80a5bc0:	2300      	movs	r3, #0
 80a5bc2:	930c      	str	r3, [sp, #48]	; 0x30
 80a5bc4:	e3ff      	b.n	80a63c6 <_strtod_r+0xb96>
 80a5bc6:	462c      	mov	r4, r5
 80a5bc8:	f1bb 0f00 	cmp.w	fp, #0
 80a5bcc:	bf08      	it	eq
 80a5bce:	46ab      	moveq	fp, r5
 80a5bd0:	9804      	ldr	r0, [sp, #16]
 80a5bd2:	2d10      	cmp	r5, #16
 80a5bd4:	bfa8      	it	ge
 80a5bd6:	2410      	movge	r4, #16
 80a5bd8:	1ab7      	subs	r7, r6, r2
 80a5bda:	f7fd fec9 	bl	80a3970 <__aeabi_ui2d>
 80a5bde:	2c09      	cmp	r4, #9
 80a5be0:	4680      	mov	r8, r0
 80a5be2:	4689      	mov	r9, r1
 80a5be4:	dd13      	ble.n	80a5c0e <_strtod_r+0x3de>
 80a5be6:	4b89      	ldr	r3, [pc, #548]	; (80a5e0c <_strtod_r+0x5dc>)
 80a5be8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80a5bec:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80a5bf0:	f7fd ff34 	bl	80a3a5c <__aeabi_dmul>
 80a5bf4:	4680      	mov	r8, r0
 80a5bf6:	9802      	ldr	r0, [sp, #8]
 80a5bf8:	4689      	mov	r9, r1
 80a5bfa:	f7fd feb9 	bl	80a3970 <__aeabi_ui2d>
 80a5bfe:	4602      	mov	r2, r0
 80a5c00:	460b      	mov	r3, r1
 80a5c02:	4640      	mov	r0, r8
 80a5c04:	4649      	mov	r1, r9
 80a5c06:	f7fd fd77 	bl	80a36f8 <__adddf3>
 80a5c0a:	4680      	mov	r8, r0
 80a5c0c:	4689      	mov	r9, r1
 80a5c0e:	2d0f      	cmp	r5, #15
 80a5c10:	dc33      	bgt.n	80a5c7a <_strtod_r+0x44a>
 80a5c12:	2f00      	cmp	r7, #0
 80a5c14:	f000 83d5 	beq.w	80a63c2 <_strtod_r+0xb92>
 80a5c18:	dd22      	ble.n	80a5c60 <_strtod_r+0x430>
 80a5c1a:	2f16      	cmp	r7, #22
 80a5c1c:	dc07      	bgt.n	80a5c2e <_strtod_r+0x3fe>
 80a5c1e:	4d7b      	ldr	r5, [pc, #492]	; (80a5e0c <_strtod_r+0x5dc>)
 80a5c20:	4642      	mov	r2, r8
 80a5c22:	eb05 01c7 	add.w	r1, r5, r7, lsl #3
 80a5c26:	464b      	mov	r3, r9
 80a5c28:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a5c2c:	e013      	b.n	80a5c56 <_strtod_r+0x426>
 80a5c2e:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80a5c32:	429f      	cmp	r7, r3
 80a5c34:	dc21      	bgt.n	80a5c7a <_strtod_r+0x44a>
 80a5c36:	4c75      	ldr	r4, [pc, #468]	; (80a5e0c <_strtod_r+0x5dc>)
 80a5c38:	f1c5 050f 	rsb	r5, r5, #15
 80a5c3c:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80a5c40:	1b7d      	subs	r5, r7, r5
 80a5c42:	4642      	mov	r2, r8
 80a5c44:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a5c48:	464b      	mov	r3, r9
 80a5c4a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80a5c4e:	f7fd ff05 	bl	80a3a5c <__aeabi_dmul>
 80a5c52:	e9d4 2300 	ldrd	r2, r3, [r4]
 80a5c56:	f7fd ff01 	bl	80a3a5c <__aeabi_dmul>
 80a5c5a:	4680      	mov	r8, r0
 80a5c5c:	4689      	mov	r9, r1
 80a5c5e:	e3b0      	b.n	80a63c2 <_strtod_r+0xb92>
 80a5c60:	f117 0f16 	cmn.w	r7, #22
 80a5c64:	db09      	blt.n	80a5c7a <_strtod_r+0x44a>
 80a5c66:	4d69      	ldr	r5, [pc, #420]	; (80a5e0c <_strtod_r+0x5dc>)
 80a5c68:	4640      	mov	r0, r8
 80a5c6a:	eba5 03c7 	sub.w	r3, r5, r7, lsl #3
 80a5c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5c72:	4649      	mov	r1, r9
 80a5c74:	f7fe f81c 	bl	80a3cb0 <__aeabi_ddiv>
 80a5c78:	e7ef      	b.n	80a5c5a <_strtod_r+0x42a>
 80a5c7a:	1b2c      	subs	r4, r5, r4
 80a5c7c:	443c      	add	r4, r7
 80a5c7e:	2c00      	cmp	r4, #0
 80a5c80:	dd5d      	ble.n	80a5d3e <_strtod_r+0x50e>
 80a5c82:	f014 010f 	ands.w	r1, r4, #15
 80a5c86:	d00a      	beq.n	80a5c9e <_strtod_r+0x46e>
 80a5c88:	4b60      	ldr	r3, [pc, #384]	; (80a5e0c <_strtod_r+0x5dc>)
 80a5c8a:	4642      	mov	r2, r8
 80a5c8c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80a5c90:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a5c94:	464b      	mov	r3, r9
 80a5c96:	f7fd fee1 	bl	80a3a5c <__aeabi_dmul>
 80a5c9a:	4680      	mov	r8, r0
 80a5c9c:	4689      	mov	r9, r1
 80a5c9e:	f034 040f 	bics.w	r4, r4, #15
 80a5ca2:	f000 80c1 	beq.w	80a5e28 <_strtod_r+0x5f8>
 80a5ca6:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
 80a5caa:	dd0f      	ble.n	80a5ccc <_strtod_r+0x49c>
 80a5cac:	f04f 0b00 	mov.w	fp, #0
 80a5cb0:	f8cd b008 	str.w	fp, [sp, #8]
 80a5cb4:	f8cd b014 	str.w	fp, [sp, #20]
 80a5cb8:	f8cd b010 	str.w	fp, [sp, #16]
 80a5cbc:	2322      	movs	r3, #34	; 0x22
 80a5cbe:	f8ca 3000 	str.w	r3, [sl]
 80a5cc2:	f8df 9158 	ldr.w	r9, [pc, #344]	; 80a5e1c <_strtod_r+0x5ec>
 80a5cc6:	f04f 0800 	mov.w	r8, #0
 80a5cca:	e189      	b.n	80a5fe0 <_strtod_r+0x7b0>
 80a5ccc:	4640      	mov	r0, r8
 80a5cce:	4649      	mov	r1, r9
 80a5cd0:	2300      	movs	r3, #0
 80a5cd2:	4e4f      	ldr	r6, [pc, #316]	; (80a5e10 <_strtod_r+0x5e0>)
 80a5cd4:	1124      	asrs	r4, r4, #4
 80a5cd6:	9302      	str	r3, [sp, #8]
 80a5cd8:	2c01      	cmp	r4, #1
 80a5cda:	dd0c      	ble.n	80a5cf6 <_strtod_r+0x4c6>
 80a5cdc:	07e2      	lsls	r2, r4, #31
 80a5cde:	d504      	bpl.n	80a5cea <_strtod_r+0x4ba>
 80a5ce0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80a5ce4:	f7fd feba 	bl	80a3a5c <__aeabi_dmul>
 80a5ce8:	2301      	movs	r3, #1
 80a5cea:	9a02      	ldr	r2, [sp, #8]
 80a5cec:	1064      	asrs	r4, r4, #1
 80a5cee:	3201      	adds	r2, #1
 80a5cf0:	9202      	str	r2, [sp, #8]
 80a5cf2:	3608      	adds	r6, #8
 80a5cf4:	e7f0      	b.n	80a5cd8 <_strtod_r+0x4a8>
 80a5cf6:	b10b      	cbz	r3, 80a5cfc <_strtod_r+0x4cc>
 80a5cf8:	4680      	mov	r8, r0
 80a5cfa:	4689      	mov	r9, r1
 80a5cfc:	4b44      	ldr	r3, [pc, #272]	; (80a5e10 <_strtod_r+0x5e0>)
 80a5cfe:	9a02      	ldr	r2, [sp, #8]
 80a5d00:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80a5d04:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 80a5d08:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a5d0c:	4642      	mov	r2, r8
 80a5d0e:	464b      	mov	r3, r9
 80a5d10:	f7fd fea4 	bl	80a3a5c <__aeabi_dmul>
 80a5d14:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80a5d18:	4689      	mov	r9, r1
 80a5d1a:	460a      	mov	r2, r1
 80a5d1c:	0d1b      	lsrs	r3, r3, #20
 80a5d1e:	493d      	ldr	r1, [pc, #244]	; (80a5e14 <_strtod_r+0x5e4>)
 80a5d20:	051b      	lsls	r3, r3, #20
 80a5d22:	428b      	cmp	r3, r1
 80a5d24:	4680      	mov	r8, r0
 80a5d26:	d8c1      	bhi.n	80a5cac <_strtod_r+0x47c>
 80a5d28:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80a5d2c:	428b      	cmp	r3, r1
 80a5d2e:	bf86      	itte	hi
 80a5d30:	f8df 90f0 	ldrhi.w	r9, [pc, #240]	; 80a5e24 <_strtod_r+0x5f4>
 80a5d34:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 80a5d38:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80a5d3c:	e074      	b.n	80a5e28 <_strtod_r+0x5f8>
 80a5d3e:	d073      	beq.n	80a5e28 <_strtod_r+0x5f8>
 80a5d40:	4264      	negs	r4, r4
 80a5d42:	f014 020f 	ands.w	r2, r4, #15
 80a5d46:	d00a      	beq.n	80a5d5e <_strtod_r+0x52e>
 80a5d48:	4b30      	ldr	r3, [pc, #192]	; (80a5e0c <_strtod_r+0x5dc>)
 80a5d4a:	4640      	mov	r0, r8
 80a5d4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80a5d50:	4649      	mov	r1, r9
 80a5d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5d56:	f7fd ffab 	bl	80a3cb0 <__aeabi_ddiv>
 80a5d5a:	4680      	mov	r8, r0
 80a5d5c:	4689      	mov	r9, r1
 80a5d5e:	1124      	asrs	r4, r4, #4
 80a5d60:	d062      	beq.n	80a5e28 <_strtod_r+0x5f8>
 80a5d62:	2c1f      	cmp	r4, #31
 80a5d64:	dd08      	ble.n	80a5d78 <_strtod_r+0x548>
 80a5d66:	f04f 0b00 	mov.w	fp, #0
 80a5d6a:	f8cd b008 	str.w	fp, [sp, #8]
 80a5d6e:	f8cd b014 	str.w	fp, [sp, #20]
 80a5d72:	f8cd b010 	str.w	fp, [sp, #16]
 80a5d76:	e12c      	b.n	80a5fd2 <_strtod_r+0x7a2>
 80a5d78:	4640      	mov	r0, r8
 80a5d7a:	4649      	mov	r1, r9
 80a5d7c:	f014 0f10 	tst.w	r4, #16
 80a5d80:	bf0c      	ite	eq
 80a5d82:	2300      	moveq	r3, #0
 80a5d84:	236a      	movne	r3, #106	; 0x6a
 80a5d86:	4e24      	ldr	r6, [pc, #144]	; (80a5e18 <_strtod_r+0x5e8>)
 80a5d88:	9303      	str	r3, [sp, #12]
 80a5d8a:	2300      	movs	r3, #0
 80a5d8c:	2c00      	cmp	r4, #0
 80a5d8e:	dd09      	ble.n	80a5da4 <_strtod_r+0x574>
 80a5d90:	07e2      	lsls	r2, r4, #31
 80a5d92:	d504      	bpl.n	80a5d9e <_strtod_r+0x56e>
 80a5d94:	e9d6 2300 	ldrd	r2, r3, [r6]
 80a5d98:	f7fd fe60 	bl	80a3a5c <__aeabi_dmul>
 80a5d9c:	2301      	movs	r3, #1
 80a5d9e:	1064      	asrs	r4, r4, #1
 80a5da0:	3608      	adds	r6, #8
 80a5da2:	e7f3      	b.n	80a5d8c <_strtod_r+0x55c>
 80a5da4:	b10b      	cbz	r3, 80a5daa <_strtod_r+0x57a>
 80a5da6:	4680      	mov	r8, r0
 80a5da8:	4689      	mov	r9, r1
 80a5daa:	9b03      	ldr	r3, [sp, #12]
 80a5dac:	b1eb      	cbz	r3, 80a5dea <_strtod_r+0x5ba>
 80a5dae:	f3c9 530a 	ubfx	r3, r9, #20, #11
 80a5db2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80a5db6:	2b00      	cmp	r3, #0
 80a5db8:	4649      	mov	r1, r9
 80a5dba:	dd16      	ble.n	80a5dea <_strtod_r+0x5ba>
 80a5dbc:	2b1f      	cmp	r3, #31
 80a5dbe:	dd0e      	ble.n	80a5dde <_strtod_r+0x5ae>
 80a5dc0:	2b34      	cmp	r3, #52	; 0x34
 80a5dc2:	bfde      	ittt	le
 80a5dc4:	3b20      	suble	r3, #32
 80a5dc6:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 80a5dca:	fa02 f303 	lslle.w	r3, r2, r3
 80a5dce:	f04f 0800 	mov.w	r8, #0
 80a5dd2:	bfcc      	ite	gt
 80a5dd4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80a5dd8:	ea03 0901 	andle.w	r9, r3, r1
 80a5ddc:	e005      	b.n	80a5dea <_strtod_r+0x5ba>
 80a5dde:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80a5de2:	fa02 f303 	lsl.w	r3, r2, r3
 80a5de6:	ea03 0808 	and.w	r8, r3, r8
 80a5dea:	2200      	movs	r2, #0
 80a5dec:	2300      	movs	r3, #0
 80a5dee:	4640      	mov	r0, r8
 80a5df0:	4649      	mov	r1, r9
 80a5df2:	f7fe f89b 	bl	80a3f2c <__aeabi_dcmpeq>
 80a5df6:	2800      	cmp	r0, #0
 80a5df8:	d1b5      	bne.n	80a5d66 <_strtod_r+0x536>
 80a5dfa:	e017      	b.n	80a5e2c <_strtod_r+0x5fc>
 80a5dfc:	080a8270 	.word	0x080a8270
 80a5e00:	080a8273 	.word	0x080a8273
 80a5e04:	080a82c1 	.word	0x080a82c1
 80a5e08:	080a827c 	.word	0x080a827c
 80a5e0c:	080a8520 	.word	0x080a8520
 80a5e10:	080a85e8 	.word	0x080a85e8
 80a5e14:	7ca00000 	.word	0x7ca00000
 80a5e18:	080a8290 	.word	0x080a8290
 80a5e1c:	7ff00000 	.word	0x7ff00000
 80a5e20:	fff80000 	.word	0xfff80000
 80a5e24:	7fefffff 	.word	0x7fefffff
 80a5e28:	2300      	movs	r3, #0
 80a5e2a:	9303      	str	r3, [sp, #12]
 80a5e2c:	9b04      	ldr	r3, [sp, #16]
 80a5e2e:	465a      	mov	r2, fp
 80a5e30:	9300      	str	r3, [sp, #0]
 80a5e32:	9906      	ldr	r1, [sp, #24]
 80a5e34:	462b      	mov	r3, r5
 80a5e36:	4650      	mov	r0, sl
 80a5e38:	f001 fae5 	bl	80a7406 <__s2b>
 80a5e3c:	9005      	str	r0, [sp, #20]
 80a5e3e:	2800      	cmp	r0, #0
 80a5e40:	f43f af34 	beq.w	80a5cac <_strtod_r+0x47c>
 80a5e44:	2f00      	cmp	r7, #0
 80a5e46:	f1c7 0300 	rsb	r3, r7, #0
 80a5e4a:	bfa8      	it	ge
 80a5e4c:	2300      	movge	r3, #0
 80a5e4e:	930d      	str	r3, [sp, #52]	; 0x34
 80a5e50:	f04f 0b00 	mov.w	fp, #0
 80a5e54:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
 80a5e58:	9312      	str	r3, [sp, #72]	; 0x48
 80a5e5a:	f8cd b008 	str.w	fp, [sp, #8]
 80a5e5e:	9b05      	ldr	r3, [sp, #20]
 80a5e60:	4650      	mov	r0, sl
 80a5e62:	6859      	ldr	r1, [r3, #4]
 80a5e64:	f001 fa48 	bl	80a72f8 <_Balloc>
 80a5e68:	9004      	str	r0, [sp, #16]
 80a5e6a:	2800      	cmp	r0, #0
 80a5e6c:	f43f af26 	beq.w	80a5cbc <_strtod_r+0x48c>
 80a5e70:	9b05      	ldr	r3, [sp, #20]
 80a5e72:	300c      	adds	r0, #12
 80a5e74:	691a      	ldr	r2, [r3, #16]
 80a5e76:	f103 010c 	add.w	r1, r3, #12
 80a5e7a:	3202      	adds	r2, #2
 80a5e7c:	0092      	lsls	r2, r2, #2
 80a5e7e:	f7fe ff1b 	bl	80a4cb8 <memcpy>
 80a5e82:	ab1a      	add	r3, sp, #104	; 0x68
 80a5e84:	9301      	str	r3, [sp, #4]
 80a5e86:	ab19      	add	r3, sp, #100	; 0x64
 80a5e88:	9300      	str	r3, [sp, #0]
 80a5e8a:	4642      	mov	r2, r8
 80a5e8c:	464b      	mov	r3, r9
 80a5e8e:	4650      	mov	r0, sl
 80a5e90:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80a5e94:	f001 fd67 	bl	80a7966 <__d2b>
 80a5e98:	9018      	str	r0, [sp, #96]	; 0x60
 80a5e9a:	2800      	cmp	r0, #0
 80a5e9c:	f43f af0e 	beq.w	80a5cbc <_strtod_r+0x48c>
 80a5ea0:	2101      	movs	r1, #1
 80a5ea2:	4650      	mov	r0, sl
 80a5ea4:	f001 fb3a 	bl	80a751c <__i2b>
 80a5ea8:	9002      	str	r0, [sp, #8]
 80a5eaa:	2800      	cmp	r0, #0
 80a5eac:	f43f af06 	beq.w	80a5cbc <_strtod_r+0x48c>
 80a5eb0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80a5eb2:	9903      	ldr	r1, [sp, #12]
 80a5eb4:	2b00      	cmp	r3, #0
 80a5eb6:	bfac      	ite	ge
 80a5eb8:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
 80a5eba:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80a5ebc:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80a5ebe:	bfac      	ite	ge
 80a5ec0:	18d6      	addge	r6, r2, r3
 80a5ec2:	1ad2      	sublt	r2, r2, r3
 80a5ec4:	eba3 0301 	sub.w	r3, r3, r1
 80a5ec8:	4423      	add	r3, r4
 80a5eca:	49b1      	ldr	r1, [pc, #708]	; (80a6190 <_strtod_r+0x960>)
 80a5ecc:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80a5ed0:	bfac      	ite	ge
 80a5ed2:	9a12      	ldrge	r2, [sp, #72]	; 0x48
 80a5ed4:	9e0d      	ldrlt	r6, [sp, #52]	; 0x34
 80a5ed6:	428b      	cmp	r3, r1
 80a5ed8:	f1c4 0436 	rsb	r4, r4, #54	; 0x36
 80a5edc:	f280 8085 	bge.w	80a5fea <_strtod_r+0x7ba>
 80a5ee0:	1ac9      	subs	r1, r1, r3
 80a5ee2:	291f      	cmp	r1, #31
 80a5ee4:	bfc8      	it	gt
 80a5ee6:	4dab      	ldrgt	r5, [pc, #684]	; (80a6194 <_strtod_r+0x964>)
 80a5ee8:	f04f 0701 	mov.w	r7, #1
 80a5eec:	bfd4      	ite	le
 80a5eee:	fa07 f301 	lslle.w	r3, r7, r1
 80a5ef2:	1aed      	subgt	r5, r5, r3
 80a5ef4:	eba4 0401 	sub.w	r4, r4, r1
 80a5ef8:	bfd9      	ittee	le
 80a5efa:	9307      	strle	r3, [sp, #28]
 80a5efc:	2500      	movle	r5, #0
 80a5efe:	fa07 f505 	lslgt.w	r5, r7, r5
 80a5f02:	9707      	strgt	r7, [sp, #28]
 80a5f04:	1937      	adds	r7, r6, r4
 80a5f06:	9b03      	ldr	r3, [sp, #12]
 80a5f08:	42be      	cmp	r6, r7
 80a5f0a:	4414      	add	r4, r2
 80a5f0c:	441c      	add	r4, r3
 80a5f0e:	4633      	mov	r3, r6
 80a5f10:	bfa8      	it	ge
 80a5f12:	463b      	movge	r3, r7
 80a5f14:	42a3      	cmp	r3, r4
 80a5f16:	bfa8      	it	ge
 80a5f18:	4623      	movge	r3, r4
 80a5f1a:	2b00      	cmp	r3, #0
 80a5f1c:	bfc2      	ittt	gt
 80a5f1e:	1aff      	subgt	r7, r7, r3
 80a5f20:	1ae4      	subgt	r4, r4, r3
 80a5f22:	1af6      	subgt	r6, r6, r3
 80a5f24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80a5f26:	2b00      	cmp	r3, #0
 80a5f28:	d163      	bne.n	80a5ff2 <_strtod_r+0x7c2>
 80a5f2a:	2f00      	cmp	r7, #0
 80a5f2c:	dc7a      	bgt.n	80a6024 <_strtod_r+0x7f4>
 80a5f2e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80a5f30:	2b00      	cmp	r3, #0
 80a5f32:	f040 8081 	bne.w	80a6038 <_strtod_r+0x808>
 80a5f36:	2c00      	cmp	r4, #0
 80a5f38:	f300 8088 	bgt.w	80a604c <_strtod_r+0x81c>
 80a5f3c:	2e00      	cmp	r6, #0
 80a5f3e:	f300 808f 	bgt.w	80a6060 <_strtod_r+0x830>
 80a5f42:	9a04      	ldr	r2, [sp, #16]
 80a5f44:	9918      	ldr	r1, [sp, #96]	; 0x60
 80a5f46:	4650      	mov	r0, sl
 80a5f48:	f001 fc3d 	bl	80a77c6 <__mdiff>
 80a5f4c:	4683      	mov	fp, r0
 80a5f4e:	2800      	cmp	r0, #0
 80a5f50:	f43f aeb4 	beq.w	80a5cbc <_strtod_r+0x48c>
 80a5f54:	68c3      	ldr	r3, [r0, #12]
 80a5f56:	2400      	movs	r4, #0
 80a5f58:	60c4      	str	r4, [r0, #12]
 80a5f5a:	9902      	ldr	r1, [sp, #8]
 80a5f5c:	9306      	str	r3, [sp, #24]
 80a5f5e:	f001 fc16 	bl	80a778e <__mcmp>
 80a5f62:	42a0      	cmp	r0, r4
 80a5f64:	f280 808b 	bge.w	80a607e <_strtod_r+0x84e>
 80a5f68:	9b06      	ldr	r3, [sp, #24]
 80a5f6a:	2b00      	cmp	r3, #0
 80a5f6c:	f040 8202 	bne.w	80a6374 <_strtod_r+0xb44>
 80a5f70:	f1b8 0f00 	cmp.w	r8, #0
 80a5f74:	f040 81fe 	bne.w	80a6374 <_strtod_r+0xb44>
 80a5f78:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80a5f7c:	2b00      	cmp	r3, #0
 80a5f7e:	f040 81f9 	bne.w	80a6374 <_strtod_r+0xb44>
 80a5f82:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80a5f86:	0d1b      	lsrs	r3, r3, #20
 80a5f88:	051b      	lsls	r3, r3, #20
 80a5f8a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80a5f8e:	f240 81f1 	bls.w	80a6374 <_strtod_r+0xb44>
 80a5f92:	f8db 3014 	ldr.w	r3, [fp, #20]
 80a5f96:	2b00      	cmp	r3, #0
 80a5f98:	d06c      	beq.n	80a6074 <_strtod_r+0x844>
 80a5f9a:	4659      	mov	r1, fp
 80a5f9c:	2201      	movs	r2, #1
 80a5f9e:	4650      	mov	r0, sl
 80a5fa0:	f001 fba4 	bl	80a76ec <__lshift>
 80a5fa4:	9902      	ldr	r1, [sp, #8]
 80a5fa6:	4683      	mov	fp, r0
 80a5fa8:	f001 fbf1 	bl	80a778e <__mcmp>
 80a5fac:	2800      	cmp	r0, #0
 80a5fae:	f340 81e1 	ble.w	80a6374 <_strtod_r+0xb44>
 80a5fb2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80a5fb6:	9a03      	ldr	r2, [sp, #12]
 80a5fb8:	0d1b      	lsrs	r3, r3, #20
 80a5fba:	051b      	lsls	r3, r3, #20
 80a5fbc:	2a00      	cmp	r2, #0
 80a5fbe:	f000 808d 	beq.w	80a60dc <_strtod_r+0x8ac>
 80a5fc2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80a5fc6:	f300 8089 	bgt.w	80a60dc <_strtod_r+0x8ac>
 80a5fca:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
 80a5fce:	f300 81d3 	bgt.w	80a6378 <_strtod_r+0xb48>
 80a5fd2:	2322      	movs	r3, #34	; 0x22
 80a5fd4:	f04f 0800 	mov.w	r8, #0
 80a5fd8:	f04f 0900 	mov.w	r9, #0
 80a5fdc:	f8ca 3000 	str.w	r3, [sl]
 80a5fe0:	9b05      	ldr	r3, [sp, #20]
 80a5fe2:	2b00      	cmp	r3, #0
 80a5fe4:	f040 81d9 	bne.w	80a639a <_strtod_r+0xb6a>
 80a5fe8:	e1eb      	b.n	80a63c2 <_strtod_r+0xb92>
 80a5fea:	2301      	movs	r3, #1
 80a5fec:	2500      	movs	r5, #0
 80a5fee:	9307      	str	r3, [sp, #28]
 80a5ff0:	e788      	b.n	80a5f04 <_strtod_r+0x6d4>
 80a5ff2:	461a      	mov	r2, r3
 80a5ff4:	9902      	ldr	r1, [sp, #8]
 80a5ff6:	4650      	mov	r0, sl
 80a5ff8:	f001 fb2a 	bl	80a7650 <__pow5mult>
 80a5ffc:	9002      	str	r0, [sp, #8]
 80a5ffe:	2800      	cmp	r0, #0
 80a6000:	f43f ae5c 	beq.w	80a5cbc <_strtod_r+0x48c>
 80a6004:	4601      	mov	r1, r0
 80a6006:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80a6008:	4650      	mov	r0, sl
 80a600a:	f001 fa90 	bl	80a752e <__multiply>
 80a600e:	9006      	str	r0, [sp, #24]
 80a6010:	2800      	cmp	r0, #0
 80a6012:	f43f ae53 	beq.w	80a5cbc <_strtod_r+0x48c>
 80a6016:	9918      	ldr	r1, [sp, #96]	; 0x60
 80a6018:	4650      	mov	r0, sl
 80a601a:	f001 f9a2 	bl	80a7362 <_Bfree>
 80a601e:	9b06      	ldr	r3, [sp, #24]
 80a6020:	9318      	str	r3, [sp, #96]	; 0x60
 80a6022:	e782      	b.n	80a5f2a <_strtod_r+0x6fa>
 80a6024:	463a      	mov	r2, r7
 80a6026:	9918      	ldr	r1, [sp, #96]	; 0x60
 80a6028:	4650      	mov	r0, sl
 80a602a:	f001 fb5f 	bl	80a76ec <__lshift>
 80a602e:	9018      	str	r0, [sp, #96]	; 0x60
 80a6030:	2800      	cmp	r0, #0
 80a6032:	f47f af7c 	bne.w	80a5f2e <_strtod_r+0x6fe>
 80a6036:	e641      	b.n	80a5cbc <_strtod_r+0x48c>
 80a6038:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80a603a:	9904      	ldr	r1, [sp, #16]
 80a603c:	4650      	mov	r0, sl
 80a603e:	f001 fb07 	bl	80a7650 <__pow5mult>
 80a6042:	9004      	str	r0, [sp, #16]
 80a6044:	2800      	cmp	r0, #0
 80a6046:	f47f af76 	bne.w	80a5f36 <_strtod_r+0x706>
 80a604a:	e637      	b.n	80a5cbc <_strtod_r+0x48c>
 80a604c:	4622      	mov	r2, r4
 80a604e:	9904      	ldr	r1, [sp, #16]
 80a6050:	4650      	mov	r0, sl
 80a6052:	f001 fb4b 	bl	80a76ec <__lshift>
 80a6056:	9004      	str	r0, [sp, #16]
 80a6058:	2800      	cmp	r0, #0
 80a605a:	f47f af6f 	bne.w	80a5f3c <_strtod_r+0x70c>
 80a605e:	e62d      	b.n	80a5cbc <_strtod_r+0x48c>
 80a6060:	4632      	mov	r2, r6
 80a6062:	9902      	ldr	r1, [sp, #8]
 80a6064:	4650      	mov	r0, sl
 80a6066:	f001 fb41 	bl	80a76ec <__lshift>
 80a606a:	9002      	str	r0, [sp, #8]
 80a606c:	2800      	cmp	r0, #0
 80a606e:	f47f af68 	bne.w	80a5f42 <_strtod_r+0x712>
 80a6072:	e623      	b.n	80a5cbc <_strtod_r+0x48c>
 80a6074:	f8db 3010 	ldr.w	r3, [fp, #16]
 80a6078:	2b01      	cmp	r3, #1
 80a607a:	dc8e      	bgt.n	80a5f9a <_strtod_r+0x76a>
 80a607c:	e17a      	b.n	80a6374 <_strtod_r+0xb44>
 80a607e:	d161      	bne.n	80a6144 <_strtod_r+0x914>
 80a6080:	9a06      	ldr	r2, [sp, #24]
 80a6082:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80a6086:	b322      	cbz	r2, 80a60d2 <_strtod_r+0x8a2>
 80a6088:	4943      	ldr	r1, [pc, #268]	; (80a6198 <_strtod_r+0x968>)
 80a608a:	464a      	mov	r2, r9
 80a608c:	428b      	cmp	r3, r1
 80a608e:	d12e      	bne.n	80a60ee <_strtod_r+0x8be>
 80a6090:	9b03      	ldr	r3, [sp, #12]
 80a6092:	4641      	mov	r1, r8
 80a6094:	b163      	cbz	r3, 80a60b0 <_strtod_r+0x880>
 80a6096:	4b41      	ldr	r3, [pc, #260]	; (80a619c <_strtod_r+0x96c>)
 80a6098:	4013      	ands	r3, r2
 80a609a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80a609e:	d807      	bhi.n	80a60b0 <_strtod_r+0x880>
 80a60a0:	0d1b      	lsrs	r3, r3, #20
 80a60a2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80a60a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a60aa:	fa00 f303 	lsl.w	r3, r0, r3
 80a60ae:	e001      	b.n	80a60b4 <_strtod_r+0x884>
 80a60b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a60b4:	428b      	cmp	r3, r1
 80a60b6:	d11a      	bne.n	80a60ee <_strtod_r+0x8be>
 80a60b8:	4939      	ldr	r1, [pc, #228]	; (80a61a0 <_strtod_r+0x970>)
 80a60ba:	428a      	cmp	r2, r1
 80a60bc:	d102      	bne.n	80a60c4 <_strtod_r+0x894>
 80a60be:	3301      	adds	r3, #1
 80a60c0:	f43f adfc 	beq.w	80a5cbc <_strtod_r+0x48c>
 80a60c4:	4b35      	ldr	r3, [pc, #212]	; (80a619c <_strtod_r+0x96c>)
 80a60c6:	f04f 0800 	mov.w	r8, #0
 80a60ca:	4013      	ands	r3, r2
 80a60cc:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80a60d0:	e150      	b.n	80a6374 <_strtod_r+0xb44>
 80a60d2:	b963      	cbnz	r3, 80a60ee <_strtod_r+0x8be>
 80a60d4:	f1b8 0f00 	cmp.w	r8, #0
 80a60d8:	d109      	bne.n	80a60ee <_strtod_r+0x8be>
 80a60da:	e76a      	b.n	80a5fb2 <_strtod_r+0x782>
 80a60dc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80a60e0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80a60e4:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80a60e8:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80a60ec:	e142      	b.n	80a6374 <_strtod_r+0xb44>
 80a60ee:	b115      	cbz	r5, 80a60f6 <_strtod_r+0x8c6>
 80a60f0:	ea15 0f09 	tst.w	r5, r9
 80a60f4:	e002      	b.n	80a60fc <_strtod_r+0x8cc>
 80a60f6:	9b07      	ldr	r3, [sp, #28]
 80a60f8:	ea13 0f08 	tst.w	r3, r8
 80a60fc:	f000 813a 	beq.w	80a6374 <_strtod_r+0xb44>
 80a6100:	9b06      	ldr	r3, [sp, #24]
 80a6102:	9a03      	ldr	r2, [sp, #12]
 80a6104:	4640      	mov	r0, r8
 80a6106:	4649      	mov	r1, r9
 80a6108:	b153      	cbz	r3, 80a6120 <_strtod_r+0x8f0>
 80a610a:	f7ff fb70 	bl	80a57ee <sulp>
 80a610e:	4602      	mov	r2, r0
 80a6110:	460b      	mov	r3, r1
 80a6112:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80a6116:	f7fd faef 	bl	80a36f8 <__adddf3>
 80a611a:	4680      	mov	r8, r0
 80a611c:	4689      	mov	r9, r1
 80a611e:	e129      	b.n	80a6374 <_strtod_r+0xb44>
 80a6120:	f7ff fb65 	bl	80a57ee <sulp>
 80a6124:	4602      	mov	r2, r0
 80a6126:	460b      	mov	r3, r1
 80a6128:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80a612c:	f7fd fae2 	bl	80a36f4 <__aeabi_dsub>
 80a6130:	2200      	movs	r2, #0
 80a6132:	2300      	movs	r3, #0
 80a6134:	4680      	mov	r8, r0
 80a6136:	4689      	mov	r9, r1
 80a6138:	f7fd fef8 	bl	80a3f2c <__aeabi_dcmpeq>
 80a613c:	2800      	cmp	r0, #0
 80a613e:	f47f af48 	bne.w	80a5fd2 <_strtod_r+0x7a2>
 80a6142:	e117      	b.n	80a6374 <_strtod_r+0xb44>
 80a6144:	9902      	ldr	r1, [sp, #8]
 80a6146:	4658      	mov	r0, fp
 80a6148:	f001 fc5b 	bl	80a7a02 <__ratio>
 80a614c:	2200      	movs	r2, #0
 80a614e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80a6152:	4606      	mov	r6, r0
 80a6154:	460f      	mov	r7, r1
 80a6156:	f7fd fefd 	bl	80a3f54 <__aeabi_dcmple>
 80a615a:	2800      	cmp	r0, #0
 80a615c:	d03f      	beq.n	80a61de <_strtod_r+0x9ae>
 80a615e:	9b06      	ldr	r3, [sp, #24]
 80a6160:	b113      	cbz	r3, 80a6168 <_strtod_r+0x938>
 80a6162:	2600      	movs	r6, #0
 80a6164:	4f0f      	ldr	r7, [pc, #60]	; (80a61a4 <_strtod_r+0x974>)
 80a6166:	e010      	b.n	80a618a <_strtod_r+0x95a>
 80a6168:	f1b8 0f00 	cmp.w	r8, #0
 80a616c:	d103      	bne.n	80a6176 <_strtod_r+0x946>
 80a616e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80a6172:	b93b      	cbnz	r3, 80a6184 <_strtod_r+0x954>
 80a6174:	e01a      	b.n	80a61ac <_strtod_r+0x97c>
 80a6176:	f1b8 0f01 	cmp.w	r8, #1
 80a617a:	d103      	bne.n	80a6184 <_strtod_r+0x954>
 80a617c:	f1b9 0f00 	cmp.w	r9, #0
 80a6180:	f43f af27 	beq.w	80a5fd2 <_strtod_r+0x7a2>
 80a6184:	4f08      	ldr	r7, [pc, #32]	; (80a61a8 <_strtod_r+0x978>)
 80a6186:	2600      	movs	r6, #0
 80a6188:	2400      	movs	r4, #0
 80a618a:	4d06      	ldr	r5, [pc, #24]	; (80a61a4 <_strtod_r+0x974>)
 80a618c:	e03c      	b.n	80a6208 <_strtod_r+0x9d8>
 80a618e:	bf00      	nop
 80a6190:	fffffc02 	.word	0xfffffc02
 80a6194:	fffffbe2 	.word	0xfffffbe2
 80a6198:	000fffff 	.word	0x000fffff
 80a619c:	7ff00000 	.word	0x7ff00000
 80a61a0:	7fefffff 	.word	0x7fefffff
 80a61a4:	3ff00000 	.word	0x3ff00000
 80a61a8:	bff00000 	.word	0xbff00000
 80a61ac:	2200      	movs	r2, #0
 80a61ae:	4b9a      	ldr	r3, [pc, #616]	; (80a6418 <_strtod_r+0xbe8>)
 80a61b0:	4630      	mov	r0, r6
 80a61b2:	4639      	mov	r1, r7
 80a61b4:	f7fd fec4 	bl	80a3f40 <__aeabi_dcmplt>
 80a61b8:	b940      	cbnz	r0, 80a61cc <_strtod_r+0x99c>
 80a61ba:	2200      	movs	r2, #0
 80a61bc:	4b97      	ldr	r3, [pc, #604]	; (80a641c <_strtod_r+0xbec>)
 80a61be:	4630      	mov	r0, r6
 80a61c0:	4639      	mov	r1, r7
 80a61c2:	f7fd fc4b 	bl	80a3a5c <__aeabi_dmul>
 80a61c6:	4604      	mov	r4, r0
 80a61c8:	460d      	mov	r5, r1
 80a61ca:	e001      	b.n	80a61d0 <_strtod_r+0x9a0>
 80a61cc:	9c06      	ldr	r4, [sp, #24]
 80a61ce:	4d93      	ldr	r5, [pc, #588]	; (80a641c <_strtod_r+0xbec>)
 80a61d0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80a61d4:	9414      	str	r4, [sp, #80]	; 0x50
 80a61d6:	9315      	str	r3, [sp, #84]	; 0x54
 80a61d8:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
 80a61dc:	e014      	b.n	80a6208 <_strtod_r+0x9d8>
 80a61de:	4b8f      	ldr	r3, [pc, #572]	; (80a641c <_strtod_r+0xbec>)
 80a61e0:	2200      	movs	r2, #0
 80a61e2:	4630      	mov	r0, r6
 80a61e4:	4639      	mov	r1, r7
 80a61e6:	f7fd fc39 	bl	80a3a5c <__aeabi_dmul>
 80a61ea:	9b06      	ldr	r3, [sp, #24]
 80a61ec:	4604      	mov	r4, r0
 80a61ee:	460d      	mov	r5, r1
 80a61f0:	b923      	cbnz	r3, 80a61fc <_strtod_r+0x9cc>
 80a61f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80a61f6:	900e      	str	r0, [sp, #56]	; 0x38
 80a61f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80a61fa:	e003      	b.n	80a6204 <_strtod_r+0x9d4>
 80a61fc:	4602      	mov	r2, r0
 80a61fe:	460b      	mov	r3, r1
 80a6200:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80a6204:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 80a6208:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80a620c:	0d1b      	lsrs	r3, r3, #20
 80a620e:	051b      	lsls	r3, r3, #20
 80a6210:	9307      	str	r3, [sp, #28]
 80a6212:	9a07      	ldr	r2, [sp, #28]
 80a6214:	4b82      	ldr	r3, [pc, #520]	; (80a6420 <_strtod_r+0xbf0>)
 80a6216:	429a      	cmp	r2, r3
 80a6218:	d12b      	bne.n	80a6272 <_strtod_r+0xa42>
 80a621a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a621e:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80a6222:	4640      	mov	r0, r8
 80a6224:	4649      	mov	r1, r9
 80a6226:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80a622a:	f001 fb2b 	bl	80a7884 <__ulp>
 80a622e:	4602      	mov	r2, r0
 80a6230:	460b      	mov	r3, r1
 80a6232:	4630      	mov	r0, r6
 80a6234:	4639      	mov	r1, r7
 80a6236:	f7fd fc11 	bl	80a3a5c <__aeabi_dmul>
 80a623a:	4642      	mov	r2, r8
 80a623c:	464b      	mov	r3, r9
 80a623e:	f7fd fa5b 	bl	80a36f8 <__adddf3>
 80a6242:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80a6246:	0d1b      	lsrs	r3, r3, #20
 80a6248:	4a76      	ldr	r2, [pc, #472]	; (80a6424 <_strtod_r+0xbf4>)
 80a624a:	051b      	lsls	r3, r3, #20
 80a624c:	4293      	cmp	r3, r2
 80a624e:	4680      	mov	r8, r0
 80a6250:	d90c      	bls.n	80a626c <_strtod_r+0xa3c>
 80a6252:	4b75      	ldr	r3, [pc, #468]	; (80a6428 <_strtod_r+0xbf8>)
 80a6254:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80a6256:	429a      	cmp	r2, r3
 80a6258:	d103      	bne.n	80a6262 <_strtod_r+0xa32>
 80a625a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a625c:	3301      	adds	r3, #1
 80a625e:	f43f ad2d 	beq.w	80a5cbc <_strtod_r+0x48c>
 80a6262:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 80a6428 <_strtod_r+0xbf8>
 80a6266:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80a626a:	e072      	b.n	80a6352 <_strtod_r+0xb22>
 80a626c:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 80a6270:	e039      	b.n	80a62e6 <_strtod_r+0xab6>
 80a6272:	9b03      	ldr	r3, [sp, #12]
 80a6274:	b33b      	cbz	r3, 80a62c6 <_strtod_r+0xa96>
 80a6276:	9b07      	ldr	r3, [sp, #28]
 80a6278:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80a627c:	d823      	bhi.n	80a62c6 <_strtod_r+0xa96>
 80a627e:	a35e      	add	r3, pc, #376	; (adr r3, 80a63f8 <_strtod_r+0xbc8>)
 80a6280:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a6284:	4620      	mov	r0, r4
 80a6286:	4629      	mov	r1, r5
 80a6288:	f7fd fe64 	bl	80a3f54 <__aeabi_dcmple>
 80a628c:	b1b8      	cbz	r0, 80a62be <_strtod_r+0xa8e>
 80a628e:	4629      	mov	r1, r5
 80a6290:	4620      	mov	r0, r4
 80a6292:	f7fd fea5 	bl	80a3fe0 <__aeabi_d2uiz>
 80a6296:	2800      	cmp	r0, #0
 80a6298:	bf08      	it	eq
 80a629a:	2001      	moveq	r0, #1
 80a629c:	f7fd fb68 	bl	80a3970 <__aeabi_ui2d>
 80a62a0:	9b06      	ldr	r3, [sp, #24]
 80a62a2:	4604      	mov	r4, r0
 80a62a4:	460d      	mov	r5, r1
 80a62a6:	b923      	cbnz	r3, 80a62b2 <_strtod_r+0xa82>
 80a62a8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80a62ac:	9010      	str	r0, [sp, #64]	; 0x40
 80a62ae:	9311      	str	r3, [sp, #68]	; 0x44
 80a62b0:	e003      	b.n	80a62ba <_strtod_r+0xa8a>
 80a62b2:	4602      	mov	r2, r0
 80a62b4:	460b      	mov	r3, r1
 80a62b6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80a62ba:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80a62be:	9a07      	ldr	r2, [sp, #28]
 80a62c0:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80a62c4:	1a9f      	subs	r7, r3, r2
 80a62c6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80a62ca:	f001 fadb 	bl	80a7884 <__ulp>
 80a62ce:	4602      	mov	r2, r0
 80a62d0:	460b      	mov	r3, r1
 80a62d2:	4630      	mov	r0, r6
 80a62d4:	4639      	mov	r1, r7
 80a62d6:	f7fd fbc1 	bl	80a3a5c <__aeabi_dmul>
 80a62da:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a62de:	f7fd fa0b 	bl	80a36f8 <__adddf3>
 80a62e2:	4680      	mov	r8, r0
 80a62e4:	4689      	mov	r9, r1
 80a62e6:	9b03      	ldr	r3, [sp, #12]
 80a62e8:	bb9b      	cbnz	r3, 80a6352 <_strtod_r+0xb22>
 80a62ea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80a62ee:	0d1b      	lsrs	r3, r3, #20
 80a62f0:	9a07      	ldr	r2, [sp, #28]
 80a62f2:	051b      	lsls	r3, r3, #20
 80a62f4:	429a      	cmp	r2, r3
 80a62f6:	464e      	mov	r6, r9
 80a62f8:	d12b      	bne.n	80a6352 <_strtod_r+0xb22>
 80a62fa:	4629      	mov	r1, r5
 80a62fc:	4620      	mov	r0, r4
 80a62fe:	f7fd fe47 	bl	80a3f90 <__aeabi_d2iz>
 80a6302:	f7fd fb45 	bl	80a3990 <__aeabi_i2d>
 80a6306:	460b      	mov	r3, r1
 80a6308:	4602      	mov	r2, r0
 80a630a:	4629      	mov	r1, r5
 80a630c:	4620      	mov	r0, r4
 80a630e:	f7fd f9f1 	bl	80a36f4 <__aeabi_dsub>
 80a6312:	9b06      	ldr	r3, [sp, #24]
 80a6314:	4604      	mov	r4, r0
 80a6316:	460d      	mov	r5, r1
 80a6318:	b92b      	cbnz	r3, 80a6326 <_strtod_r+0xaf6>
 80a631a:	f1b8 0f00 	cmp.w	r8, #0
 80a631e:	d102      	bne.n	80a6326 <_strtod_r+0xaf6>
 80a6320:	f3c9 0613 	ubfx	r6, r9, #0, #20
 80a6324:	b17e      	cbz	r6, 80a6346 <_strtod_r+0xb16>
 80a6326:	a336      	add	r3, pc, #216	; (adr r3, 80a6400 <_strtod_r+0xbd0>)
 80a6328:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a632c:	4620      	mov	r0, r4
 80a632e:	4629      	mov	r1, r5
 80a6330:	f7fd fe06 	bl	80a3f40 <__aeabi_dcmplt>
 80a6334:	bb88      	cbnz	r0, 80a639a <_strtod_r+0xb6a>
 80a6336:	a334      	add	r3, pc, #208	; (adr r3, 80a6408 <_strtod_r+0xbd8>)
 80a6338:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a633c:	4620      	mov	r0, r4
 80a633e:	4629      	mov	r1, r5
 80a6340:	f7fd fe1c 	bl	80a3f7c <__aeabi_dcmpgt>
 80a6344:	e004      	b.n	80a6350 <_strtod_r+0xb20>
 80a6346:	a332      	add	r3, pc, #200	; (adr r3, 80a6410 <_strtod_r+0xbe0>)
 80a6348:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a634c:	f7fd fdf8 	bl	80a3f40 <__aeabi_dcmplt>
 80a6350:	bb18      	cbnz	r0, 80a639a <_strtod_r+0xb6a>
 80a6352:	9918      	ldr	r1, [sp, #96]	; 0x60
 80a6354:	4650      	mov	r0, sl
 80a6356:	f001 f804 	bl	80a7362 <_Bfree>
 80a635a:	9904      	ldr	r1, [sp, #16]
 80a635c:	4650      	mov	r0, sl
 80a635e:	f001 f800 	bl	80a7362 <_Bfree>
 80a6362:	9902      	ldr	r1, [sp, #8]
 80a6364:	4650      	mov	r0, sl
 80a6366:	f000 fffc 	bl	80a7362 <_Bfree>
 80a636a:	4659      	mov	r1, fp
 80a636c:	4650      	mov	r0, sl
 80a636e:	f000 fff8 	bl	80a7362 <_Bfree>
 80a6372:	e574      	b.n	80a5e5e <_strtod_r+0x62e>
 80a6374:	9b03      	ldr	r3, [sp, #12]
 80a6376:	b183      	cbz	r3, 80a639a <_strtod_r+0xb6a>
 80a6378:	4b2c      	ldr	r3, [pc, #176]	; (80a642c <_strtod_r+0xbfc>)
 80a637a:	4640      	mov	r0, r8
 80a637c:	930b      	str	r3, [sp, #44]	; 0x2c
 80a637e:	2300      	movs	r3, #0
 80a6380:	930a      	str	r3, [sp, #40]	; 0x28
 80a6382:	4649      	mov	r1, r9
 80a6384:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80a6388:	f7fd fb68 	bl	80a3a5c <__aeabi_dmul>
 80a638c:	4680      	mov	r8, r0
 80a638e:	4689      	mov	r9, r1
 80a6390:	b919      	cbnz	r1, 80a639a <_strtod_r+0xb6a>
 80a6392:	b910      	cbnz	r0, 80a639a <_strtod_r+0xb6a>
 80a6394:	2322      	movs	r3, #34	; 0x22
 80a6396:	f8ca 3000 	str.w	r3, [sl]
 80a639a:	9918      	ldr	r1, [sp, #96]	; 0x60
 80a639c:	4650      	mov	r0, sl
 80a639e:	f000 ffe0 	bl	80a7362 <_Bfree>
 80a63a2:	9904      	ldr	r1, [sp, #16]
 80a63a4:	4650      	mov	r0, sl
 80a63a6:	f000 ffdc 	bl	80a7362 <_Bfree>
 80a63aa:	9902      	ldr	r1, [sp, #8]
 80a63ac:	4650      	mov	r0, sl
 80a63ae:	f000 ffd8 	bl	80a7362 <_Bfree>
 80a63b2:	9905      	ldr	r1, [sp, #20]
 80a63b4:	4650      	mov	r0, sl
 80a63b6:	f000 ffd4 	bl	80a7362 <_Bfree>
 80a63ba:	4659      	mov	r1, fp
 80a63bc:	4650      	mov	r0, sl
 80a63be:	f000 ffd0 	bl	80a7362 <_Bfree>
 80a63c2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80a63c4:	b113      	cbz	r3, 80a63cc <_strtod_r+0xb9c>
 80a63c6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a63c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80a63ca:	6013      	str	r3, [r2, #0]
 80a63cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a63ce:	b11b      	cbz	r3, 80a63d8 <_strtod_r+0xba8>
 80a63d0:	4642      	mov	r2, r8
 80a63d2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80a63d6:	e007      	b.n	80a63e8 <_strtod_r+0xbb8>
 80a63d8:	4642      	mov	r2, r8
 80a63da:	464b      	mov	r3, r9
 80a63dc:	e004      	b.n	80a63e8 <_strtod_r+0xbb8>
 80a63de:	2500      	movs	r5, #0
 80a63e0:	462a      	mov	r2, r5
 80a63e2:	2101      	movs	r1, #1
 80a63e4:	f7ff bb47 	b.w	80a5a76 <_strtod_r+0x246>
 80a63e8:	4610      	mov	r0, r2
 80a63ea:	4619      	mov	r1, r3
 80a63ec:	b01d      	add	sp, #116	; 0x74
 80a63ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a63f2:	bf00      	nop
 80a63f4:	f3af 8000 	nop.w
 80a63f8:	ffc00000 	.word	0xffc00000
 80a63fc:	41dfffff 	.word	0x41dfffff
 80a6400:	94a03595 	.word	0x94a03595
 80a6404:	3fdfffff 	.word	0x3fdfffff
 80a6408:	35afe535 	.word	0x35afe535
 80a640c:	3fe00000 	.word	0x3fe00000
 80a6410:	94a03595 	.word	0x94a03595
 80a6414:	3fcfffff 	.word	0x3fcfffff
 80a6418:	3ff00000 	.word	0x3ff00000
 80a641c:	3fe00000 	.word	0x3fe00000
 80a6420:	7fe00000 	.word	0x7fe00000
 80a6424:	7c9fffff 	.word	0x7c9fffff
 80a6428:	7fefffff 	.word	0x7fefffff
 80a642c:	39500000 	.word	0x39500000

080a6430 <strtod>:
 80a6430:	4b02      	ldr	r3, [pc, #8]	; (80a643c <strtod+0xc>)
 80a6432:	460a      	mov	r2, r1
 80a6434:	4601      	mov	r1, r0
 80a6436:	6818      	ldr	r0, [r3, #0]
 80a6438:	f7ff b9fa 	b.w	80a5830 <_strtod_r>
 80a643c:	200003ec 	.word	0x200003ec

080a6440 <_strtol_r>:
 80a6440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a6444:	460f      	mov	r7, r1
 80a6446:	4680      	mov	r8, r0
 80a6448:	483f      	ldr	r0, [pc, #252]	; (80a6548 <_strtol_r+0x108>)
 80a644a:	f8d0 9000 	ldr.w	r9, [r0]
 80a644e:	463d      	mov	r5, r7
 80a6450:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a6454:	eb09 0004 	add.w	r0, r9, r4
 80a6458:	7840      	ldrb	r0, [r0, #1]
 80a645a:	f000 0008 	and.w	r0, r0, #8
 80a645e:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 80a6462:	b108      	cbz	r0, 80a6468 <_strtol_r+0x28>
 80a6464:	462f      	mov	r7, r5
 80a6466:	e7f2      	b.n	80a644e <_strtol_r+0xe>
 80a6468:	2c2d      	cmp	r4, #45	; 0x2d
 80a646a:	d103      	bne.n	80a6474 <_strtol_r+0x34>
 80a646c:	1cbd      	adds	r5, r7, #2
 80a646e:	787c      	ldrb	r4, [r7, #1]
 80a6470:	2601      	movs	r6, #1
 80a6472:	e003      	b.n	80a647c <_strtol_r+0x3c>
 80a6474:	2c2b      	cmp	r4, #43	; 0x2b
 80a6476:	bf04      	itt	eq
 80a6478:	787c      	ldrbeq	r4, [r7, #1]
 80a647a:	1cbd      	addeq	r5, r7, #2
 80a647c:	b113      	cbz	r3, 80a6484 <_strtol_r+0x44>
 80a647e:	2b10      	cmp	r3, #16
 80a6480:	d10a      	bne.n	80a6498 <_strtol_r+0x58>
 80a6482:	e05b      	b.n	80a653c <_strtol_r+0xfc>
 80a6484:	2c30      	cmp	r4, #48	; 0x30
 80a6486:	d157      	bne.n	80a6538 <_strtol_r+0xf8>
 80a6488:	7828      	ldrb	r0, [r5, #0]
 80a648a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a648e:	2858      	cmp	r0, #88	; 0x58
 80a6490:	d14d      	bne.n	80a652e <_strtol_r+0xee>
 80a6492:	786c      	ldrb	r4, [r5, #1]
 80a6494:	2310      	movs	r3, #16
 80a6496:	3502      	adds	r5, #2
 80a6498:	2e00      	cmp	r6, #0
 80a649a:	bf14      	ite	ne
 80a649c:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 80a64a0:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 80a64a4:	fbbc faf3 	udiv	sl, ip, r3
 80a64a8:	2700      	movs	r7, #0
 80a64aa:	4638      	mov	r0, r7
 80a64ac:	fb03 cc1a 	mls	ip, r3, sl, ip
 80a64b0:	eb09 0e04 	add.w	lr, r9, r4
 80a64b4:	f89e e001 	ldrb.w	lr, [lr, #1]
 80a64b8:	f01e 0f04 	tst.w	lr, #4
 80a64bc:	d001      	beq.n	80a64c2 <_strtol_r+0x82>
 80a64be:	3c30      	subs	r4, #48	; 0x30
 80a64c0:	e00b      	b.n	80a64da <_strtol_r+0x9a>
 80a64c2:	f01e 0e03 	ands.w	lr, lr, #3
 80a64c6:	d01b      	beq.n	80a6500 <_strtol_r+0xc0>
 80a64c8:	f1be 0f01 	cmp.w	lr, #1
 80a64cc:	bf0c      	ite	eq
 80a64ce:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80a64d2:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80a64d6:	ebce 0404 	rsb	r4, lr, r4
 80a64da:	42a3      	cmp	r3, r4
 80a64dc:	dd10      	ble.n	80a6500 <_strtol_r+0xc0>
 80a64de:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 80a64e2:	d00a      	beq.n	80a64fa <_strtol_r+0xba>
 80a64e4:	4550      	cmp	r0, sl
 80a64e6:	d806      	bhi.n	80a64f6 <_strtol_r+0xb6>
 80a64e8:	d101      	bne.n	80a64ee <_strtol_r+0xae>
 80a64ea:	4564      	cmp	r4, ip
 80a64ec:	dc03      	bgt.n	80a64f6 <_strtol_r+0xb6>
 80a64ee:	fb03 4000 	mla	r0, r3, r0, r4
 80a64f2:	2701      	movs	r7, #1
 80a64f4:	e001      	b.n	80a64fa <_strtol_r+0xba>
 80a64f6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80a64fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a64fe:	e7d7      	b.n	80a64b0 <_strtol_r+0x70>
 80a6500:	1c7b      	adds	r3, r7, #1
 80a6502:	d10c      	bne.n	80a651e <_strtol_r+0xde>
 80a6504:	2e00      	cmp	r6, #0
 80a6506:	f04f 0322 	mov.w	r3, #34	; 0x22
 80a650a:	bf14      	ite	ne
 80a650c:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 80a6510:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a6514:	f8c8 3000 	str.w	r3, [r8]
 80a6518:	b92a      	cbnz	r2, 80a6526 <_strtol_r+0xe6>
 80a651a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a651e:	b106      	cbz	r6, 80a6522 <_strtol_r+0xe2>
 80a6520:	4240      	negs	r0, r0
 80a6522:	b172      	cbz	r2, 80a6542 <_strtol_r+0x102>
 80a6524:	b107      	cbz	r7, 80a6528 <_strtol_r+0xe8>
 80a6526:	1e69      	subs	r1, r5, #1
 80a6528:	6011      	str	r1, [r2, #0]
 80a652a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a652e:	2430      	movs	r4, #48	; 0x30
 80a6530:	2b00      	cmp	r3, #0
 80a6532:	d1b1      	bne.n	80a6498 <_strtol_r+0x58>
 80a6534:	2308      	movs	r3, #8
 80a6536:	e7af      	b.n	80a6498 <_strtol_r+0x58>
 80a6538:	230a      	movs	r3, #10
 80a653a:	e7ad      	b.n	80a6498 <_strtol_r+0x58>
 80a653c:	2c30      	cmp	r4, #48	; 0x30
 80a653e:	d0a3      	beq.n	80a6488 <_strtol_r+0x48>
 80a6540:	e7aa      	b.n	80a6498 <_strtol_r+0x58>
 80a6542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a6546:	bf00      	nop
 80a6548:	20000388 	.word	0x20000388

080a654c <strtol>:
 80a654c:	4613      	mov	r3, r2
 80a654e:	460a      	mov	r2, r1
 80a6550:	4601      	mov	r1, r0
 80a6552:	4802      	ldr	r0, [pc, #8]	; (80a655c <strtol+0x10>)
 80a6554:	6800      	ldr	r0, [r0, #0]
 80a6556:	f7ff bf73 	b.w	80a6440 <_strtol_r>
 80a655a:	bf00      	nop
 80a655c:	200003ec 	.word	0x200003ec

080a6560 <_strtoul_r>:
 80a6560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a6564:	460e      	mov	r6, r1
 80a6566:	4680      	mov	r8, r0
 80a6568:	483b      	ldr	r0, [pc, #236]	; (80a6658 <_strtoul_r+0xf8>)
 80a656a:	f8d0 9000 	ldr.w	r9, [r0]
 80a656e:	4635      	mov	r5, r6
 80a6570:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a6574:	eb09 0004 	add.w	r0, r9, r4
 80a6578:	7840      	ldrb	r0, [r0, #1]
 80a657a:	f000 0008 	and.w	r0, r0, #8
 80a657e:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 80a6582:	b108      	cbz	r0, 80a6588 <_strtoul_r+0x28>
 80a6584:	462e      	mov	r6, r5
 80a6586:	e7f2      	b.n	80a656e <_strtoul_r+0xe>
 80a6588:	2c2d      	cmp	r4, #45	; 0x2d
 80a658a:	d103      	bne.n	80a6594 <_strtoul_r+0x34>
 80a658c:	1cb5      	adds	r5, r6, #2
 80a658e:	7874      	ldrb	r4, [r6, #1]
 80a6590:	2701      	movs	r7, #1
 80a6592:	e003      	b.n	80a659c <_strtoul_r+0x3c>
 80a6594:	2c2b      	cmp	r4, #43	; 0x2b
 80a6596:	bf04      	itt	eq
 80a6598:	7874      	ldrbeq	r4, [r6, #1]
 80a659a:	1cb5      	addeq	r5, r6, #2
 80a659c:	b113      	cbz	r3, 80a65a4 <_strtoul_r+0x44>
 80a659e:	2b10      	cmp	r3, #16
 80a65a0:	d10a      	bne.n	80a65b8 <_strtoul_r+0x58>
 80a65a2:	e053      	b.n	80a664c <_strtoul_r+0xec>
 80a65a4:	2c30      	cmp	r4, #48	; 0x30
 80a65a6:	d14f      	bne.n	80a6648 <_strtoul_r+0xe8>
 80a65a8:	7828      	ldrb	r0, [r5, #0]
 80a65aa:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a65ae:	2858      	cmp	r0, #88	; 0x58
 80a65b0:	d145      	bne.n	80a663e <_strtoul_r+0xde>
 80a65b2:	786c      	ldrb	r4, [r5, #1]
 80a65b4:	2310      	movs	r3, #16
 80a65b6:	3502      	adds	r5, #2
 80a65b8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a65bc:	fbbc fcf3 	udiv	ip, ip, r3
 80a65c0:	fb03 fa0c 	mul.w	sl, r3, ip
 80a65c4:	2600      	movs	r6, #0
 80a65c6:	ea6f 0a0a 	mvn.w	sl, sl
 80a65ca:	4630      	mov	r0, r6
 80a65cc:	eb09 0e04 	add.w	lr, r9, r4
 80a65d0:	f89e e001 	ldrb.w	lr, [lr, #1]
 80a65d4:	f01e 0f04 	tst.w	lr, #4
 80a65d8:	d001      	beq.n	80a65de <_strtoul_r+0x7e>
 80a65da:	3c30      	subs	r4, #48	; 0x30
 80a65dc:	e00b      	b.n	80a65f6 <_strtoul_r+0x96>
 80a65de:	f01e 0e03 	ands.w	lr, lr, #3
 80a65e2:	d01a      	beq.n	80a661a <_strtoul_r+0xba>
 80a65e4:	f1be 0f01 	cmp.w	lr, #1
 80a65e8:	bf0c      	ite	eq
 80a65ea:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80a65ee:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80a65f2:	ebce 0404 	rsb	r4, lr, r4
 80a65f6:	42a3      	cmp	r3, r4
 80a65f8:	dd0f      	ble.n	80a661a <_strtoul_r+0xba>
 80a65fa:	2e00      	cmp	r6, #0
 80a65fc:	db08      	blt.n	80a6610 <_strtoul_r+0xb0>
 80a65fe:	4560      	cmp	r0, ip
 80a6600:	d806      	bhi.n	80a6610 <_strtoul_r+0xb0>
 80a6602:	d101      	bne.n	80a6608 <_strtoul_r+0xa8>
 80a6604:	4554      	cmp	r4, sl
 80a6606:	dc03      	bgt.n	80a6610 <_strtoul_r+0xb0>
 80a6608:	fb03 4000 	mla	r0, r3, r0, r4
 80a660c:	2601      	movs	r6, #1
 80a660e:	e001      	b.n	80a6614 <_strtoul_r+0xb4>
 80a6610:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80a6614:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a6618:	e7d8      	b.n	80a65cc <_strtoul_r+0x6c>
 80a661a:	2e00      	cmp	r6, #0
 80a661c:	da07      	bge.n	80a662e <_strtoul_r+0xce>
 80a661e:	2322      	movs	r3, #34	; 0x22
 80a6620:	f8c8 3000 	str.w	r3, [r8]
 80a6624:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a6628:	b92a      	cbnz	r2, 80a6636 <_strtoul_r+0xd6>
 80a662a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a662e:	b107      	cbz	r7, 80a6632 <_strtoul_r+0xd2>
 80a6630:	4240      	negs	r0, r0
 80a6632:	b172      	cbz	r2, 80a6652 <_strtoul_r+0xf2>
 80a6634:	b106      	cbz	r6, 80a6638 <_strtoul_r+0xd8>
 80a6636:	1e69      	subs	r1, r5, #1
 80a6638:	6011      	str	r1, [r2, #0]
 80a663a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a663e:	2430      	movs	r4, #48	; 0x30
 80a6640:	2b00      	cmp	r3, #0
 80a6642:	d1b9      	bne.n	80a65b8 <_strtoul_r+0x58>
 80a6644:	2308      	movs	r3, #8
 80a6646:	e7b7      	b.n	80a65b8 <_strtoul_r+0x58>
 80a6648:	230a      	movs	r3, #10
 80a664a:	e7b5      	b.n	80a65b8 <_strtoul_r+0x58>
 80a664c:	2c30      	cmp	r4, #48	; 0x30
 80a664e:	d0ab      	beq.n	80a65a8 <_strtoul_r+0x48>
 80a6650:	e7b2      	b.n	80a65b8 <_strtoul_r+0x58>
 80a6652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a6656:	bf00      	nop
 80a6658:	20000388 	.word	0x20000388

080a665c <strtoul>:
 80a665c:	4613      	mov	r3, r2
 80a665e:	460a      	mov	r2, r1
 80a6660:	4601      	mov	r1, r0
 80a6662:	4802      	ldr	r0, [pc, #8]	; (80a666c <strtoul+0x10>)
 80a6664:	6800      	ldr	r0, [r0, #0]
 80a6666:	f7ff bf7b 	b.w	80a6560 <_strtoul_r>
 80a666a:	bf00      	nop
 80a666c:	200003ec 	.word	0x200003ec

080a6670 <__get_current_time_locale>:
 80a6670:	4b04      	ldr	r3, [pc, #16]	; (80a6684 <__get_current_time_locale+0x14>)
 80a6672:	4a05      	ldr	r2, [pc, #20]	; (80a6688 <__get_current_time_locale+0x18>)
 80a6674:	6818      	ldr	r0, [r3, #0]
 80a6676:	4b05      	ldr	r3, [pc, #20]	; (80a668c <__get_current_time_locale+0x1c>)
 80a6678:	2800      	cmp	r0, #0
 80a667a:	bf14      	ite	ne
 80a667c:	4610      	movne	r0, r2
 80a667e:	4618      	moveq	r0, r3
 80a6680:	4770      	bx	lr
 80a6682:	bf00      	nop
 80a6684:	20000b38 	.word	0x20000b38
 80a6688:	20000b3c 	.word	0x20000b3c
 80a668c:	080a83e8 	.word	0x080a83e8

080a6690 <__tzcalc_limits>:
 80a6690:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a6694:	4604      	mov	r4, r0
 80a6696:	f000 fd91 	bl	80a71bc <__gettzinfo>
 80a669a:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80a669e:	429c      	cmp	r4, r3
 80a66a0:	f340 8096 	ble.w	80a67d0 <__tzcalc_limits+0x140>
 80a66a4:	f240 156d 	movw	r5, #365	; 0x16d
 80a66a8:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 80a66ac:	18e3      	adds	r3, r4, r3
 80a66ae:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
 80a66b2:	109b      	asrs	r3, r3, #2
 80a66b4:	fb05 3502 	mla	r5, r5, r2, r3
 80a66b8:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
 80a66bc:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80a66c0:	fb92 f3f3 	sdiv	r3, r2, r3
 80a66c4:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 80a66c8:	442b      	add	r3, r5
 80a66ca:	18a5      	adds	r5, r4, r2
 80a66cc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a66d0:	fb94 f7f2 	sdiv	r7, r4, r2
 80a66d4:	fb95 f5f2 	sdiv	r5, r5, r2
 80a66d8:	fb02 4717 	mls	r7, r2, r7, r4
 80a66dc:	441d      	add	r5, r3
 80a66de:	2364      	movs	r3, #100	; 0x64
 80a66e0:	fb94 f6f3 	sdiv	r6, r4, r3
 80a66e4:	fab7 fe87 	clz	lr, r7
 80a66e8:	4601      	mov	r1, r0
 80a66ea:	fb03 4616 	mls	r6, r3, r6, r4
 80a66ee:	f100 0338 	add.w	r3, r0, #56	; 0x38
 80a66f2:	9301      	str	r3, [sp, #4]
 80a66f4:	f004 0303 	and.w	r3, r4, #3
 80a66f8:	6044      	str	r4, [r0, #4]
 80a66fa:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80a66fe:	9300      	str	r3, [sp, #0]
 80a6700:	f04f 0c07 	mov.w	ip, #7
 80a6704:	7a0b      	ldrb	r3, [r1, #8]
 80a6706:	2b4a      	cmp	r3, #74	; 0x4a
 80a6708:	d10e      	bne.n	80a6728 <__tzcalc_limits+0x98>
 80a670a:	694b      	ldr	r3, [r1, #20]
 80a670c:	9a00      	ldr	r2, [sp, #0]
 80a670e:	18ec      	adds	r4, r5, r3
 80a6710:	b902      	cbnz	r2, 80a6714 <__tzcalc_limits+0x84>
 80a6712:	b906      	cbnz	r6, 80a6716 <__tzcalc_limits+0x86>
 80a6714:	b927      	cbnz	r7, 80a6720 <__tzcalc_limits+0x90>
 80a6716:	2b3b      	cmp	r3, #59	; 0x3b
 80a6718:	bfd4      	ite	le
 80a671a:	2300      	movle	r3, #0
 80a671c:	2301      	movgt	r3, #1
 80a671e:	e000      	b.n	80a6722 <__tzcalc_limits+0x92>
 80a6720:	2300      	movs	r3, #0
 80a6722:	4423      	add	r3, r4
 80a6724:	3b01      	subs	r3, #1
 80a6726:	e03f      	b.n	80a67a8 <__tzcalc_limits+0x118>
 80a6728:	2b44      	cmp	r3, #68	; 0x44
 80a672a:	d102      	bne.n	80a6732 <__tzcalc_limits+0xa2>
 80a672c:	694b      	ldr	r3, [r1, #20]
 80a672e:	442b      	add	r3, r5
 80a6730:	e03a      	b.n	80a67a8 <__tzcalc_limits+0x118>
 80a6732:	9b00      	ldr	r3, [sp, #0]
 80a6734:	b92b      	cbnz	r3, 80a6742 <__tzcalc_limits+0xb2>
 80a6736:	2e00      	cmp	r6, #0
 80a6738:	bf0c      	ite	eq
 80a673a:	46f0      	moveq	r8, lr
 80a673c:	f04f 0801 	movne.w	r8, #1
 80a6740:	e000      	b.n	80a6744 <__tzcalc_limits+0xb4>
 80a6742:	46f0      	mov	r8, lr
 80a6744:	46a9      	mov	r9, r5
 80a6746:	4b24      	ldr	r3, [pc, #144]	; (80a67d8 <__tzcalc_limits+0x148>)
 80a6748:	2230      	movs	r2, #48	; 0x30
 80a674a:	fb02 3808 	mla	r8, r2, r8, r3
 80a674e:	68cc      	ldr	r4, [r1, #12]
 80a6750:	f1a8 0a04 	sub.w	sl, r8, #4
 80a6754:	2301      	movs	r3, #1
 80a6756:	42a3      	cmp	r3, r4
 80a6758:	da04      	bge.n	80a6764 <__tzcalc_limits+0xd4>
 80a675a:	f85a bf04 	ldr.w	fp, [sl, #4]!
 80a675e:	3301      	adds	r3, #1
 80a6760:	44d9      	add	r9, fp
 80a6762:	e7f8      	b.n	80a6756 <__tzcalc_limits+0xc6>
 80a6764:	f109 0304 	add.w	r3, r9, #4
 80a6768:	fb93 fbfc 	sdiv	fp, r3, ip
 80a676c:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
 80a6770:	ebca 0a03 	rsb	sl, sl, r3
 80a6774:	694b      	ldr	r3, [r1, #20]
 80a6776:	2c01      	cmp	r4, #1
 80a6778:	bfb8      	it	lt
 80a677a:	2401      	movlt	r4, #1
 80a677c:	ebb3 0a0a 	subs.w	sl, r3, sl
 80a6780:	690b      	ldr	r3, [r1, #16]
 80a6782:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80a6786:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80a678a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80a678e:	bf48      	it	mi
 80a6790:	f10a 0a07 	addmi.w	sl, sl, #7
 80a6794:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a6798:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 80a679c:	4453      	add	r3, sl
 80a679e:	42a3      	cmp	r3, r4
 80a67a0:	db01      	blt.n	80a67a6 <__tzcalc_limits+0x116>
 80a67a2:	3b07      	subs	r3, #7
 80a67a4:	e7fb      	b.n	80a679e <__tzcalc_limits+0x10e>
 80a67a6:	444b      	add	r3, r9
 80a67a8:	698c      	ldr	r4, [r1, #24]
 80a67aa:	4a0c      	ldr	r2, [pc, #48]	; (80a67dc <__tzcalc_limits+0x14c>)
 80a67ac:	fb02 4303 	mla	r3, r2, r3, r4
 80a67b0:	6a0c      	ldr	r4, [r1, #32]
 80a67b2:	4423      	add	r3, r4
 80a67b4:	f841 3f1c 	str.w	r3, [r1, #28]!
 80a67b8:	9b01      	ldr	r3, [sp, #4]
 80a67ba:	4299      	cmp	r1, r3
 80a67bc:	d1a2      	bne.n	80a6704 <__tzcalc_limits+0x74>
 80a67be:	69c3      	ldr	r3, [r0, #28]
 80a67c0:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80a67c2:	4293      	cmp	r3, r2
 80a67c4:	bfac      	ite	ge
 80a67c6:	2300      	movge	r3, #0
 80a67c8:	2301      	movlt	r3, #1
 80a67ca:	6003      	str	r3, [r0, #0]
 80a67cc:	2001      	movs	r0, #1
 80a67ce:	e000      	b.n	80a67d2 <__tzcalc_limits+0x142>
 80a67d0:	2000      	movs	r0, #0
 80a67d2:	b003      	add	sp, #12
 80a67d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a67d8:	080a81a0 	.word	0x080a81a0
 80a67dc:	00015180 	.word	0x00015180

080a67e0 <__tz_lock>:
 80a67e0:	4770      	bx	lr

080a67e2 <__tz_unlock>:
 80a67e2:	4770      	bx	lr

080a67e4 <_tzset_unlocked>:
 80a67e4:	4b01      	ldr	r3, [pc, #4]	; (80a67ec <_tzset_unlocked+0x8>)
 80a67e6:	6818      	ldr	r0, [r3, #0]
 80a67e8:	f000 b802 	b.w	80a67f0 <_tzset_unlocked_r>
 80a67ec:	200003ec 	.word	0x200003ec

080a67f0 <_tzset_unlocked_r>:
 80a67f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a67f4:	b08d      	sub	sp, #52	; 0x34
 80a67f6:	4607      	mov	r7, r0
 80a67f8:	f000 fce0 	bl	80a71bc <__gettzinfo>
 80a67fc:	49b0      	ldr	r1, [pc, #704]	; (80a6ac0 <_tzset_unlocked_r+0x2d0>)
 80a67fe:	4604      	mov	r4, r0
 80a6800:	4638      	mov	r0, r7
 80a6802:	f000 fcd3 	bl	80a71ac <_getenv_r>
 80a6806:	4eaf      	ldr	r6, [pc, #700]	; (80a6ac4 <_tzset_unlocked_r+0x2d4>)
 80a6808:	4605      	mov	r5, r0
 80a680a:	b960      	cbnz	r0, 80a6826 <_tzset_unlocked_r+0x36>
 80a680c:	4bae      	ldr	r3, [pc, #696]	; (80a6ac8 <_tzset_unlocked_r+0x2d8>)
 80a680e:	4aaf      	ldr	r2, [pc, #700]	; (80a6acc <_tzset_unlocked_r+0x2dc>)
 80a6810:	6018      	str	r0, [r3, #0]
 80a6812:	4baf      	ldr	r3, [pc, #700]	; (80a6ad0 <_tzset_unlocked_r+0x2e0>)
 80a6814:	6018      	str	r0, [r3, #0]
 80a6816:	4baf      	ldr	r3, [pc, #700]	; (80a6ad4 <_tzset_unlocked_r+0x2e4>)
 80a6818:	6830      	ldr	r0, [r6, #0]
 80a681a:	601a      	str	r2, [r3, #0]
 80a681c:	605a      	str	r2, [r3, #4]
 80a681e:	f7fb fa33 	bl	80a1c88 <free>
 80a6822:	6035      	str	r5, [r6, #0]
 80a6824:	e148      	b.n	80a6ab8 <_tzset_unlocked_r+0x2c8>
 80a6826:	6831      	ldr	r1, [r6, #0]
 80a6828:	b979      	cbnz	r1, 80a684a <_tzset_unlocked_r+0x5a>
 80a682a:	6830      	ldr	r0, [r6, #0]
 80a682c:	f7fb fa2c 	bl	80a1c88 <free>
 80a6830:	4628      	mov	r0, r5
 80a6832:	f7fe ffbf 	bl	80a57b4 <strlen>
 80a6836:	1c41      	adds	r1, r0, #1
 80a6838:	4638      	mov	r0, r7
 80a683a:	f7fb fa65 	bl	80a1d08 <_malloc_r>
 80a683e:	6030      	str	r0, [r6, #0]
 80a6840:	b148      	cbz	r0, 80a6856 <_tzset_unlocked_r+0x66>
 80a6842:	4629      	mov	r1, r5
 80a6844:	f7fe fa7e 	bl	80a4d44 <strcpy>
 80a6848:	e005      	b.n	80a6856 <_tzset_unlocked_r+0x66>
 80a684a:	f7fe fa71 	bl	80a4d30 <strcmp>
 80a684e:	2800      	cmp	r0, #0
 80a6850:	f000 8132 	beq.w	80a6ab8 <_tzset_unlocked_r+0x2c8>
 80a6854:	e7e9      	b.n	80a682a <_tzset_unlocked_r+0x3a>
 80a6856:	782b      	ldrb	r3, [r5, #0]
 80a6858:	ae0a      	add	r6, sp, #40	; 0x28
 80a685a:	2b3a      	cmp	r3, #58	; 0x3a
 80a685c:	bf08      	it	eq
 80a685e:	3501      	addeq	r5, #1
 80a6860:	4633      	mov	r3, r6
 80a6862:	4a9d      	ldr	r2, [pc, #628]	; (80a6ad8 <_tzset_unlocked_r+0x2e8>)
 80a6864:	499d      	ldr	r1, [pc, #628]	; (80a6adc <_tzset_unlocked_r+0x2ec>)
 80a6866:	4628      	mov	r0, r5
 80a6868:	f7fb fa26 	bl	80a1cb8 <siscanf>
 80a686c:	2800      	cmp	r0, #0
 80a686e:	f340 8123 	ble.w	80a6ab8 <_tzset_unlocked_r+0x2c8>
 80a6872:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a6874:	18ef      	adds	r7, r5, r3
 80a6876:	5ceb      	ldrb	r3, [r5, r3]
 80a6878:	2b2d      	cmp	r3, #45	; 0x2d
 80a687a:	d103      	bne.n	80a6884 <_tzset_unlocked_r+0x94>
 80a687c:	3701      	adds	r7, #1
 80a687e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80a6882:	e003      	b.n	80a688c <_tzset_unlocked_r+0x9c>
 80a6884:	2b2b      	cmp	r3, #43	; 0x2b
 80a6886:	bf08      	it	eq
 80a6888:	3701      	addeq	r7, #1
 80a688a:	2501      	movs	r5, #1
 80a688c:	f10d 0a20 	add.w	sl, sp, #32
 80a6890:	f10d 0b1e 	add.w	fp, sp, #30
 80a6894:	f04f 0800 	mov.w	r8, #0
 80a6898:	9603      	str	r6, [sp, #12]
 80a689a:	f8cd a008 	str.w	sl, [sp, #8]
 80a689e:	9601      	str	r6, [sp, #4]
 80a68a0:	f8cd b000 	str.w	fp, [sp]
 80a68a4:	4633      	mov	r3, r6
 80a68a6:	aa07      	add	r2, sp, #28
 80a68a8:	498d      	ldr	r1, [pc, #564]	; (80a6ae0 <_tzset_unlocked_r+0x2f0>)
 80a68aa:	4638      	mov	r0, r7
 80a68ac:	f8ad 801e 	strh.w	r8, [sp, #30]
 80a68b0:	f8ad 8020 	strh.w	r8, [sp, #32]
 80a68b4:	f7fb fa00 	bl	80a1cb8 <siscanf>
 80a68b8:	4540      	cmp	r0, r8
 80a68ba:	f340 80fd 	ble.w	80a6ab8 <_tzset_unlocked_r+0x2c8>
 80a68be:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a68c2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a68c6:	213c      	movs	r1, #60	; 0x3c
 80a68c8:	fb01 3302 	mla	r3, r1, r2, r3
 80a68cc:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a68d0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a68d4:	fb01 3302 	mla	r3, r1, r2, r3
 80a68d8:	435d      	muls	r5, r3
 80a68da:	4b7f      	ldr	r3, [pc, #508]	; (80a6ad8 <_tzset_unlocked_r+0x2e8>)
 80a68dc:	6225      	str	r5, [r4, #32]
 80a68de:	4d7d      	ldr	r5, [pc, #500]	; (80a6ad4 <_tzset_unlocked_r+0x2e4>)
 80a68e0:	f8df 9208 	ldr.w	r9, [pc, #520]	; 80a6aec <_tzset_unlocked_r+0x2fc>
 80a68e4:	602b      	str	r3, [r5, #0]
 80a68e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a68e8:	464a      	mov	r2, r9
 80a68ea:	441f      	add	r7, r3
 80a68ec:	497b      	ldr	r1, [pc, #492]	; (80a6adc <_tzset_unlocked_r+0x2ec>)
 80a68ee:	4633      	mov	r3, r6
 80a68f0:	4638      	mov	r0, r7
 80a68f2:	f7fb f9e1 	bl	80a1cb8 <siscanf>
 80a68f6:	4540      	cmp	r0, r8
 80a68f8:	dc08      	bgt.n	80a690c <_tzset_unlocked_r+0x11c>
 80a68fa:	682b      	ldr	r3, [r5, #0]
 80a68fc:	6a22      	ldr	r2, [r4, #32]
 80a68fe:	606b      	str	r3, [r5, #4]
 80a6900:	4b71      	ldr	r3, [pc, #452]	; (80a6ac8 <_tzset_unlocked_r+0x2d8>)
 80a6902:	601a      	str	r2, [r3, #0]
 80a6904:	4b72      	ldr	r3, [pc, #456]	; (80a6ad0 <_tzset_unlocked_r+0x2e0>)
 80a6906:	f8c3 8000 	str.w	r8, [r3]
 80a690a:	e0d5      	b.n	80a6ab8 <_tzset_unlocked_r+0x2c8>
 80a690c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a690e:	f8c5 9004 	str.w	r9, [r5, #4]
 80a6912:	18fd      	adds	r5, r7, r3
 80a6914:	5cfb      	ldrb	r3, [r7, r3]
 80a6916:	2b2d      	cmp	r3, #45	; 0x2d
 80a6918:	d103      	bne.n	80a6922 <_tzset_unlocked_r+0x132>
 80a691a:	3501      	adds	r5, #1
 80a691c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80a6920:	e003      	b.n	80a692a <_tzset_unlocked_r+0x13a>
 80a6922:	2b2b      	cmp	r3, #43	; 0x2b
 80a6924:	bf08      	it	eq
 80a6926:	3501      	addeq	r5, #1
 80a6928:	2701      	movs	r7, #1
 80a692a:	2300      	movs	r3, #0
 80a692c:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a6930:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a6934:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a6938:	930a      	str	r3, [sp, #40]	; 0x28
 80a693a:	9603      	str	r6, [sp, #12]
 80a693c:	f8cd a008 	str.w	sl, [sp, #8]
 80a6940:	9601      	str	r6, [sp, #4]
 80a6942:	f8cd b000 	str.w	fp, [sp]
 80a6946:	4633      	mov	r3, r6
 80a6948:	aa07      	add	r2, sp, #28
 80a694a:	4965      	ldr	r1, [pc, #404]	; (80a6ae0 <_tzset_unlocked_r+0x2f0>)
 80a694c:	4628      	mov	r0, r5
 80a694e:	f7fb f9b3 	bl	80a1cb8 <siscanf>
 80a6952:	2800      	cmp	r0, #0
 80a6954:	dc04      	bgt.n	80a6960 <_tzset_unlocked_r+0x170>
 80a6956:	6a23      	ldr	r3, [r4, #32]
 80a6958:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80a695c:	63e3      	str	r3, [r4, #60]	; 0x3c
 80a695e:	e00e      	b.n	80a697e <_tzset_unlocked_r+0x18e>
 80a6960:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a6964:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a6968:	213c      	movs	r1, #60	; 0x3c
 80a696a:	fb01 3302 	mla	r3, r1, r2, r3
 80a696e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a6972:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a6976:	fb01 3302 	mla	r3, r1, r2, r3
 80a697a:	435f      	muls	r7, r3
 80a697c:	63e7      	str	r7, [r4, #60]	; 0x3c
 80a697e:	4627      	mov	r7, r4
 80a6980:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a6982:	f04f 0900 	mov.w	r9, #0
 80a6986:	441d      	add	r5, r3
 80a6988:	782b      	ldrb	r3, [r5, #0]
 80a698a:	2b2c      	cmp	r3, #44	; 0x2c
 80a698c:	bf08      	it	eq
 80a698e:	3501      	addeq	r5, #1
 80a6990:	f895 8000 	ldrb.w	r8, [r5]
 80a6994:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 80a6998:	d126      	bne.n	80a69e8 <_tzset_unlocked_r+0x1f8>
 80a699a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80a699e:	9302      	str	r3, [sp, #8]
 80a69a0:	ab09      	add	r3, sp, #36	; 0x24
 80a69a2:	9300      	str	r3, [sp, #0]
 80a69a4:	9603      	str	r6, [sp, #12]
 80a69a6:	9601      	str	r6, [sp, #4]
 80a69a8:	4633      	mov	r3, r6
 80a69aa:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80a69ae:	494d      	ldr	r1, [pc, #308]	; (80a6ae4 <_tzset_unlocked_r+0x2f4>)
 80a69b0:	4628      	mov	r0, r5
 80a69b2:	f7fb f981 	bl	80a1cb8 <siscanf>
 80a69b6:	2803      	cmp	r0, #3
 80a69b8:	d17e      	bne.n	80a6ab8 <_tzset_unlocked_r+0x2c8>
 80a69ba:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80a69be:	1e4b      	subs	r3, r1, #1
 80a69c0:	2b0b      	cmp	r3, #11
 80a69c2:	d879      	bhi.n	80a6ab8 <_tzset_unlocked_r+0x2c8>
 80a69c4:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80a69c8:	1e53      	subs	r3, r2, #1
 80a69ca:	2b04      	cmp	r3, #4
 80a69cc:	d874      	bhi.n	80a6ab8 <_tzset_unlocked_r+0x2c8>
 80a69ce:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80a69d2:	2b06      	cmp	r3, #6
 80a69d4:	d870      	bhi.n	80a6ab8 <_tzset_unlocked_r+0x2c8>
 80a69d6:	f887 8008 	strb.w	r8, [r7, #8]
 80a69da:	60f9      	str	r1, [r7, #12]
 80a69dc:	613a      	str	r2, [r7, #16]
 80a69de:	617b      	str	r3, [r7, #20]
 80a69e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a69e2:	eb05 0803 	add.w	r8, r5, r3
 80a69e6:	e02a      	b.n	80a6a3e <_tzset_unlocked_r+0x24e>
 80a69e8:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 80a69ec:	bf06      	itte	eq
 80a69ee:	4643      	moveq	r3, r8
 80a69f0:	3501      	addeq	r5, #1
 80a69f2:	2344      	movne	r3, #68	; 0x44
 80a69f4:	220a      	movs	r2, #10
 80a69f6:	a90b      	add	r1, sp, #44	; 0x2c
 80a69f8:	4628      	mov	r0, r5
 80a69fa:	9305      	str	r3, [sp, #20]
 80a69fc:	f7ff fe2e 	bl	80a665c <strtoul>
 80a6a00:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80a6a04:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80a6a08:	4545      	cmp	r5, r8
 80a6a0a:	9b05      	ldr	r3, [sp, #20]
 80a6a0c:	d114      	bne.n	80a6a38 <_tzset_unlocked_r+0x248>
 80a6a0e:	234d      	movs	r3, #77	; 0x4d
 80a6a10:	f1b9 0f00 	cmp.w	r9, #0
 80a6a14:	d107      	bne.n	80a6a26 <_tzset_unlocked_r+0x236>
 80a6a16:	7223      	strb	r3, [r4, #8]
 80a6a18:	2303      	movs	r3, #3
 80a6a1a:	60e3      	str	r3, [r4, #12]
 80a6a1c:	2302      	movs	r3, #2
 80a6a1e:	6123      	str	r3, [r4, #16]
 80a6a20:	f8c4 9014 	str.w	r9, [r4, #20]
 80a6a24:	e00b      	b.n	80a6a3e <_tzset_unlocked_r+0x24e>
 80a6a26:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80a6a2a:	230b      	movs	r3, #11
 80a6a2c:	62a3      	str	r3, [r4, #40]	; 0x28
 80a6a2e:	2301      	movs	r3, #1
 80a6a30:	62e3      	str	r3, [r4, #44]	; 0x2c
 80a6a32:	2300      	movs	r3, #0
 80a6a34:	6323      	str	r3, [r4, #48]	; 0x30
 80a6a36:	e002      	b.n	80a6a3e <_tzset_unlocked_r+0x24e>
 80a6a38:	b280      	uxth	r0, r0
 80a6a3a:	723b      	strb	r3, [r7, #8]
 80a6a3c:	6178      	str	r0, [r7, #20]
 80a6a3e:	2302      	movs	r3, #2
 80a6a40:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a6a44:	2300      	movs	r3, #0
 80a6a46:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a6a4a:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a6a4e:	930a      	str	r3, [sp, #40]	; 0x28
 80a6a50:	f898 3000 	ldrb.w	r3, [r8]
 80a6a54:	2b2f      	cmp	r3, #47	; 0x2f
 80a6a56:	d10b      	bne.n	80a6a70 <_tzset_unlocked_r+0x280>
 80a6a58:	9603      	str	r6, [sp, #12]
 80a6a5a:	f8cd a008 	str.w	sl, [sp, #8]
 80a6a5e:	9601      	str	r6, [sp, #4]
 80a6a60:	f8cd b000 	str.w	fp, [sp]
 80a6a64:	4633      	mov	r3, r6
 80a6a66:	aa07      	add	r2, sp, #28
 80a6a68:	491f      	ldr	r1, [pc, #124]	; (80a6ae8 <_tzset_unlocked_r+0x2f8>)
 80a6a6a:	4640      	mov	r0, r8
 80a6a6c:	f7fb f924 	bl	80a1cb8 <siscanf>
 80a6a70:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a6a74:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a6a78:	213c      	movs	r1, #60	; 0x3c
 80a6a7a:	fb01 3302 	mla	r3, r1, r2, r3
 80a6a7e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a6a82:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a6a86:	fb01 3302 	mla	r3, r1, r2, r3
 80a6a8a:	61bb      	str	r3, [r7, #24]
 80a6a8c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80a6a8e:	f109 0901 	add.w	r9, r9, #1
 80a6a92:	f1b9 0f02 	cmp.w	r9, #2
 80a6a96:	4445      	add	r5, r8
 80a6a98:	f107 071c 	add.w	r7, r7, #28
 80a6a9c:	f47f af74 	bne.w	80a6988 <_tzset_unlocked_r+0x198>
 80a6aa0:	6860      	ldr	r0, [r4, #4]
 80a6aa2:	f7ff fdf5 	bl	80a6690 <__tzcalc_limits>
 80a6aa6:	6a22      	ldr	r2, [r4, #32]
 80a6aa8:	4b07      	ldr	r3, [pc, #28]	; (80a6ac8 <_tzset_unlocked_r+0x2d8>)
 80a6aaa:	601a      	str	r2, [r3, #0]
 80a6aac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80a6aae:	1a9b      	subs	r3, r3, r2
 80a6ab0:	4a07      	ldr	r2, [pc, #28]	; (80a6ad0 <_tzset_unlocked_r+0x2e0>)
 80a6ab2:	bf18      	it	ne
 80a6ab4:	2301      	movne	r3, #1
 80a6ab6:	6013      	str	r3, [r2, #0]
 80a6ab8:	b00d      	add	sp, #52	; 0x34
 80a6aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a6abe:	bf00      	nop
 80a6ac0:	080a84e4 	.word	0x080a84e4
 80a6ac4:	20000c50 	.word	0x20000c50
 80a6ac8:	20000c58 	.word	0x20000c58
 80a6acc:	080a84e7 	.word	0x080a84e7
 80a6ad0:	20000c54 	.word	0x20000c54
 80a6ad4:	20000428 	.word	0x20000428
 80a6ad8:	20000c43 	.word	0x20000c43
 80a6adc:	080a84eb 	.word	0x080a84eb
 80a6ae0:	080a850e 	.word	0x080a850e
 80a6ae4:	080a84fa 	.word	0x080a84fa
 80a6ae8:	080a850d 	.word	0x080a850d
 80a6aec:	20000c38 	.word	0x20000c38

080a6af0 <abs>:
 80a6af0:	2800      	cmp	r0, #0
 80a6af2:	bfb8      	it	lt
 80a6af4:	4240      	neglt	r0, r0
 80a6af6:	4770      	bx	lr

080a6af8 <rshift>:
 80a6af8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a6afa:	6906      	ldr	r6, [r0, #16]
 80a6afc:	114b      	asrs	r3, r1, #5
 80a6afe:	42b3      	cmp	r3, r6
 80a6b00:	f100 0514 	add.w	r5, r0, #20
 80a6b04:	da27      	bge.n	80a6b56 <rshift+0x5e>
 80a6b06:	f011 011f 	ands.w	r1, r1, #31
 80a6b0a:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 80a6b0e:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 80a6b12:	d101      	bne.n	80a6b18 <rshift+0x20>
 80a6b14:	4629      	mov	r1, r5
 80a6b16:	e016      	b.n	80a6b46 <rshift+0x4e>
 80a6b18:	1d14      	adds	r4, r2, #4
 80a6b1a:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 80a6b1e:	462b      	mov	r3, r5
 80a6b20:	f1c1 0e20 	rsb	lr, r1, #32
 80a6b24:	40ca      	lsrs	r2, r1
 80a6b26:	42b4      	cmp	r4, r6
 80a6b28:	d209      	bcs.n	80a6b3e <rshift+0x46>
 80a6b2a:	6827      	ldr	r7, [r4, #0]
 80a6b2c:	fa07 f70e 	lsl.w	r7, r7, lr
 80a6b30:	433a      	orrs	r2, r7
 80a6b32:	f843 2b04 	str.w	r2, [r3], #4
 80a6b36:	f854 2b04 	ldr.w	r2, [r4], #4
 80a6b3a:	40ca      	lsrs	r2, r1
 80a6b3c:	e7f3      	b.n	80a6b26 <rshift+0x2e>
 80a6b3e:	601a      	str	r2, [r3, #0]
 80a6b40:	b152      	cbz	r2, 80a6b58 <rshift+0x60>
 80a6b42:	3304      	adds	r3, #4
 80a6b44:	e008      	b.n	80a6b58 <rshift+0x60>
 80a6b46:	42b2      	cmp	r2, r6
 80a6b48:	460b      	mov	r3, r1
 80a6b4a:	d205      	bcs.n	80a6b58 <rshift+0x60>
 80a6b4c:	f852 3b04 	ldr.w	r3, [r2], #4
 80a6b50:	f841 3b04 	str.w	r3, [r1], #4
 80a6b54:	e7f7      	b.n	80a6b46 <rshift+0x4e>
 80a6b56:	462b      	mov	r3, r5
 80a6b58:	1b5b      	subs	r3, r3, r5
 80a6b5a:	109b      	asrs	r3, r3, #2
 80a6b5c:	6103      	str	r3, [r0, #16]
 80a6b5e:	b903      	cbnz	r3, 80a6b62 <rshift+0x6a>
 80a6b60:	6143      	str	r3, [r0, #20]
 80a6b62:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a6b64 <__hexdig_fun>:
 80a6b64:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80a6b68:	2b09      	cmp	r3, #9
 80a6b6a:	d801      	bhi.n	80a6b70 <__hexdig_fun+0xc>
 80a6b6c:	3820      	subs	r0, #32
 80a6b6e:	e00a      	b.n	80a6b86 <__hexdig_fun+0x22>
 80a6b70:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80a6b74:	2b05      	cmp	r3, #5
 80a6b76:	d801      	bhi.n	80a6b7c <__hexdig_fun+0x18>
 80a6b78:	3847      	subs	r0, #71	; 0x47
 80a6b7a:	e004      	b.n	80a6b86 <__hexdig_fun+0x22>
 80a6b7c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80a6b80:	2b05      	cmp	r3, #5
 80a6b82:	d802      	bhi.n	80a6b8a <__hexdig_fun+0x26>
 80a6b84:	3827      	subs	r0, #39	; 0x27
 80a6b86:	b2c0      	uxtb	r0, r0
 80a6b88:	4770      	bx	lr
 80a6b8a:	2000      	movs	r0, #0
 80a6b8c:	4770      	bx	lr

080a6b8e <__gethex>:
 80a6b8e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a6b92:	b08b      	sub	sp, #44	; 0x2c
 80a6b94:	468a      	mov	sl, r1
 80a6b96:	4690      	mov	r8, r2
 80a6b98:	9306      	str	r3, [sp, #24]
 80a6b9a:	9002      	str	r0, [sp, #8]
 80a6b9c:	f7fe f888 	bl	80a4cb0 <_localeconv_r>
 80a6ba0:	6803      	ldr	r3, [r0, #0]
 80a6ba2:	f04f 0b00 	mov.w	fp, #0
 80a6ba6:	4618      	mov	r0, r3
 80a6ba8:	9303      	str	r3, [sp, #12]
 80a6baa:	f7fe fe03 	bl	80a57b4 <strlen>
 80a6bae:	9b03      	ldr	r3, [sp, #12]
 80a6bb0:	9001      	str	r0, [sp, #4]
 80a6bb2:	4403      	add	r3, r0
 80a6bb4:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80a6bb8:	9307      	str	r3, [sp, #28]
 80a6bba:	f8da 3000 	ldr.w	r3, [sl]
 80a6bbe:	3302      	adds	r3, #2
 80a6bc0:	461f      	mov	r7, r3
 80a6bc2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80a6bc6:	2830      	cmp	r0, #48	; 0x30
 80a6bc8:	d102      	bne.n	80a6bd0 <__gethex+0x42>
 80a6bca:	f10b 0b01 	add.w	fp, fp, #1
 80a6bce:	e7f7      	b.n	80a6bc0 <__gethex+0x32>
 80a6bd0:	f7ff ffc8 	bl	80a6b64 <__hexdig_fun>
 80a6bd4:	4604      	mov	r4, r0
 80a6bd6:	b9e0      	cbnz	r0, 80a6c12 <__gethex+0x84>
 80a6bd8:	9a01      	ldr	r2, [sp, #4]
 80a6bda:	9903      	ldr	r1, [sp, #12]
 80a6bdc:	4638      	mov	r0, r7
 80a6bde:	f7fe fdf1 	bl	80a57c4 <strncmp>
 80a6be2:	2800      	cmp	r0, #0
 80a6be4:	d134      	bne.n	80a6c50 <__gethex+0xc2>
 80a6be6:	9b01      	ldr	r3, [sp, #4]
 80a6be8:	5cf8      	ldrb	r0, [r7, r3]
 80a6bea:	18fe      	adds	r6, r7, r3
 80a6bec:	f7ff ffba 	bl	80a6b64 <__hexdig_fun>
 80a6bf0:	b380      	cbz	r0, 80a6c54 <__gethex+0xc6>
 80a6bf2:	4633      	mov	r3, r6
 80a6bf4:	7818      	ldrb	r0, [r3, #0]
 80a6bf6:	461f      	mov	r7, r3
 80a6bf8:	2830      	cmp	r0, #48	; 0x30
 80a6bfa:	f103 0301 	add.w	r3, r3, #1
 80a6bfe:	d0f9      	beq.n	80a6bf4 <__gethex+0x66>
 80a6c00:	f7ff ffb0 	bl	80a6b64 <__hexdig_fun>
 80a6c04:	fab0 f580 	clz	r5, r0
 80a6c08:	4634      	mov	r4, r6
 80a6c0a:	096d      	lsrs	r5, r5, #5
 80a6c0c:	f04f 0b01 	mov.w	fp, #1
 80a6c10:	e001      	b.n	80a6c16 <__gethex+0x88>
 80a6c12:	2500      	movs	r5, #0
 80a6c14:	462c      	mov	r4, r5
 80a6c16:	463a      	mov	r2, r7
 80a6c18:	4616      	mov	r6, r2
 80a6c1a:	7830      	ldrb	r0, [r6, #0]
 80a6c1c:	3201      	adds	r2, #1
 80a6c1e:	f7ff ffa1 	bl	80a6b64 <__hexdig_fun>
 80a6c22:	2800      	cmp	r0, #0
 80a6c24:	d1f8      	bne.n	80a6c18 <__gethex+0x8a>
 80a6c26:	9a01      	ldr	r2, [sp, #4]
 80a6c28:	9903      	ldr	r1, [sp, #12]
 80a6c2a:	4630      	mov	r0, r6
 80a6c2c:	f7fe fdca 	bl	80a57c4 <strncmp>
 80a6c30:	b950      	cbnz	r0, 80a6c48 <__gethex+0xba>
 80a6c32:	b954      	cbnz	r4, 80a6c4a <__gethex+0xbc>
 80a6c34:	9b01      	ldr	r3, [sp, #4]
 80a6c36:	18f4      	adds	r4, r6, r3
 80a6c38:	4622      	mov	r2, r4
 80a6c3a:	4616      	mov	r6, r2
 80a6c3c:	7830      	ldrb	r0, [r6, #0]
 80a6c3e:	3201      	adds	r2, #1
 80a6c40:	f7ff ff90 	bl	80a6b64 <__hexdig_fun>
 80a6c44:	2800      	cmp	r0, #0
 80a6c46:	d1f8      	bne.n	80a6c3a <__gethex+0xac>
 80a6c48:	b134      	cbz	r4, 80a6c58 <__gethex+0xca>
 80a6c4a:	1ba4      	subs	r4, r4, r6
 80a6c4c:	00a4      	lsls	r4, r4, #2
 80a6c4e:	e003      	b.n	80a6c58 <__gethex+0xca>
 80a6c50:	463e      	mov	r6, r7
 80a6c52:	e000      	b.n	80a6c56 <__gethex+0xc8>
 80a6c54:	4604      	mov	r4, r0
 80a6c56:	2501      	movs	r5, #1
 80a6c58:	7833      	ldrb	r3, [r6, #0]
 80a6c5a:	2b50      	cmp	r3, #80	; 0x50
 80a6c5c:	d001      	beq.n	80a6c62 <__gethex+0xd4>
 80a6c5e:	2b70      	cmp	r3, #112	; 0x70
 80a6c60:	d12a      	bne.n	80a6cb8 <__gethex+0x12a>
 80a6c62:	7873      	ldrb	r3, [r6, #1]
 80a6c64:	2b2b      	cmp	r3, #43	; 0x2b
 80a6c66:	d008      	beq.n	80a6c7a <__gethex+0xec>
 80a6c68:	2b2d      	cmp	r3, #45	; 0x2d
 80a6c6a:	d003      	beq.n	80a6c74 <__gethex+0xe6>
 80a6c6c:	1c71      	adds	r1, r6, #1
 80a6c6e:	f04f 0900 	mov.w	r9, #0
 80a6c72:	e005      	b.n	80a6c80 <__gethex+0xf2>
 80a6c74:	f04f 0901 	mov.w	r9, #1
 80a6c78:	e001      	b.n	80a6c7e <__gethex+0xf0>
 80a6c7a:	f04f 0900 	mov.w	r9, #0
 80a6c7e:	1cb1      	adds	r1, r6, #2
 80a6c80:	7808      	ldrb	r0, [r1, #0]
 80a6c82:	f7ff ff6f 	bl	80a6b64 <__hexdig_fun>
 80a6c86:	1e43      	subs	r3, r0, #1
 80a6c88:	b2db      	uxtb	r3, r3
 80a6c8a:	2b18      	cmp	r3, #24
 80a6c8c:	d814      	bhi.n	80a6cb8 <__gethex+0x12a>
 80a6c8e:	f1a0 0210 	sub.w	r2, r0, #16
 80a6c92:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80a6c96:	f7ff ff65 	bl	80a6b64 <__hexdig_fun>
 80a6c9a:	1e43      	subs	r3, r0, #1
 80a6c9c:	b2db      	uxtb	r3, r3
 80a6c9e:	2b18      	cmp	r3, #24
 80a6ca0:	d804      	bhi.n	80a6cac <__gethex+0x11e>
 80a6ca2:	230a      	movs	r3, #10
 80a6ca4:	fb03 0202 	mla	r2, r3, r2, r0
 80a6ca8:	3a10      	subs	r2, #16
 80a6caa:	e7f2      	b.n	80a6c92 <__gethex+0x104>
 80a6cac:	f1b9 0f00 	cmp.w	r9, #0
 80a6cb0:	d000      	beq.n	80a6cb4 <__gethex+0x126>
 80a6cb2:	4252      	negs	r2, r2
 80a6cb4:	4414      	add	r4, r2
 80a6cb6:	e000      	b.n	80a6cba <__gethex+0x12c>
 80a6cb8:	4631      	mov	r1, r6
 80a6cba:	f8ca 1000 	str.w	r1, [sl]
 80a6cbe:	b12d      	cbz	r5, 80a6ccc <__gethex+0x13e>
 80a6cc0:	f1bb 0f00 	cmp.w	fp, #0
 80a6cc4:	bf14      	ite	ne
 80a6cc6:	2000      	movne	r0, #0
 80a6cc8:	2006      	moveq	r0, #6
 80a6cca:	e17c      	b.n	80a6fc6 <__gethex+0x438>
 80a6ccc:	4629      	mov	r1, r5
 80a6cce:	1bf3      	subs	r3, r6, r7
 80a6cd0:	3b01      	subs	r3, #1
 80a6cd2:	2b07      	cmp	r3, #7
 80a6cd4:	dd02      	ble.n	80a6cdc <__gethex+0x14e>
 80a6cd6:	3101      	adds	r1, #1
 80a6cd8:	105b      	asrs	r3, r3, #1
 80a6cda:	e7fa      	b.n	80a6cd2 <__gethex+0x144>
 80a6cdc:	9802      	ldr	r0, [sp, #8]
 80a6cde:	f000 fb0b 	bl	80a72f8 <_Balloc>
 80a6ce2:	f04f 0900 	mov.w	r9, #0
 80a6ce6:	4605      	mov	r5, r0
 80a6ce8:	46cb      	mov	fp, r9
 80a6cea:	9b01      	ldr	r3, [sp, #4]
 80a6cec:	f100 0a14 	add.w	sl, r0, #20
 80a6cf0:	f1c3 0301 	rsb	r3, r3, #1
 80a6cf4:	f8cd a010 	str.w	sl, [sp, #16]
 80a6cf8:	9308      	str	r3, [sp, #32]
 80a6cfa:	42b7      	cmp	r7, r6
 80a6cfc:	d22f      	bcs.n	80a6d5e <__gethex+0x1d0>
 80a6cfe:	1e73      	subs	r3, r6, #1
 80a6d00:	9305      	str	r3, [sp, #20]
 80a6d02:	9a07      	ldr	r2, [sp, #28]
 80a6d04:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80a6d08:	4293      	cmp	r3, r2
 80a6d0a:	d00b      	beq.n	80a6d24 <__gethex+0x196>
 80a6d0c:	f1bb 0f20 	cmp.w	fp, #32
 80a6d10:	d116      	bne.n	80a6d40 <__gethex+0x1b2>
 80a6d12:	9b04      	ldr	r3, [sp, #16]
 80a6d14:	f8c3 9000 	str.w	r9, [r3]
 80a6d18:	3304      	adds	r3, #4
 80a6d1a:	f04f 0900 	mov.w	r9, #0
 80a6d1e:	9304      	str	r3, [sp, #16]
 80a6d20:	46cb      	mov	fp, r9
 80a6d22:	e00d      	b.n	80a6d40 <__gethex+0x1b2>
 80a6d24:	9b05      	ldr	r3, [sp, #20]
 80a6d26:	9a08      	ldr	r2, [sp, #32]
 80a6d28:	4413      	add	r3, r2
 80a6d2a:	429f      	cmp	r7, r3
 80a6d2c:	d8ee      	bhi.n	80a6d0c <__gethex+0x17e>
 80a6d2e:	4618      	mov	r0, r3
 80a6d30:	9a01      	ldr	r2, [sp, #4]
 80a6d32:	9903      	ldr	r1, [sp, #12]
 80a6d34:	9309      	str	r3, [sp, #36]	; 0x24
 80a6d36:	f7fe fd45 	bl	80a57c4 <strncmp>
 80a6d3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a6d3c:	b168      	cbz	r0, 80a6d5a <__gethex+0x1cc>
 80a6d3e:	e7e5      	b.n	80a6d0c <__gethex+0x17e>
 80a6d40:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80a6d44:	f7ff ff0e 	bl	80a6b64 <__hexdig_fun>
 80a6d48:	f000 000f 	and.w	r0, r0, #15
 80a6d4c:	fa00 f00b 	lsl.w	r0, r0, fp
 80a6d50:	9b05      	ldr	r3, [sp, #20]
 80a6d52:	ea49 0900 	orr.w	r9, r9, r0
 80a6d56:	f10b 0b04 	add.w	fp, fp, #4
 80a6d5a:	461e      	mov	r6, r3
 80a6d5c:	e7cd      	b.n	80a6cfa <__gethex+0x16c>
 80a6d5e:	9804      	ldr	r0, [sp, #16]
 80a6d60:	f840 9b04 	str.w	r9, [r0], #4
 80a6d64:	ebca 0000 	rsb	r0, sl, r0
 80a6d68:	1080      	asrs	r0, r0, #2
 80a6d6a:	6128      	str	r0, [r5, #16]
 80a6d6c:	0147      	lsls	r7, r0, #5
 80a6d6e:	4648      	mov	r0, r9
 80a6d70:	f000 fb87 	bl	80a7482 <__hi0bits>
 80a6d74:	f8d8 6000 	ldr.w	r6, [r8]
 80a6d78:	1a38      	subs	r0, r7, r0
 80a6d7a:	42b0      	cmp	r0, r6
 80a6d7c:	dd26      	ble.n	80a6dcc <__gethex+0x23e>
 80a6d7e:	1b87      	subs	r7, r0, r6
 80a6d80:	4639      	mov	r1, r7
 80a6d82:	4628      	mov	r0, r5
 80a6d84:	f000 fe7f 	bl	80a7a86 <__any_on>
 80a6d88:	b1c8      	cbz	r0, 80a6dbe <__gethex+0x230>
 80a6d8a:	1e7b      	subs	r3, r7, #1
 80a6d8c:	1159      	asrs	r1, r3, #5
 80a6d8e:	f003 021f 	and.w	r2, r3, #31
 80a6d92:	f04f 0901 	mov.w	r9, #1
 80a6d96:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80a6d9a:	fa09 f202 	lsl.w	r2, r9, r2
 80a6d9e:	420a      	tst	r2, r1
 80a6da0:	d00e      	beq.n	80a6dc0 <__gethex+0x232>
 80a6da2:	454b      	cmp	r3, r9
 80a6da4:	dc02      	bgt.n	80a6dac <__gethex+0x21e>
 80a6da6:	f04f 0902 	mov.w	r9, #2
 80a6daa:	e009      	b.n	80a6dc0 <__gethex+0x232>
 80a6dac:	1eb9      	subs	r1, r7, #2
 80a6dae:	4628      	mov	r0, r5
 80a6db0:	f000 fe69 	bl	80a7a86 <__any_on>
 80a6db4:	2800      	cmp	r0, #0
 80a6db6:	d0f6      	beq.n	80a6da6 <__gethex+0x218>
 80a6db8:	f04f 0903 	mov.w	r9, #3
 80a6dbc:	e000      	b.n	80a6dc0 <__gethex+0x232>
 80a6dbe:	4681      	mov	r9, r0
 80a6dc0:	4639      	mov	r1, r7
 80a6dc2:	4628      	mov	r0, r5
 80a6dc4:	f7ff fe98 	bl	80a6af8 <rshift>
 80a6dc8:	443c      	add	r4, r7
 80a6dca:	e00c      	b.n	80a6de6 <__gethex+0x258>
 80a6dcc:	da09      	bge.n	80a6de2 <__gethex+0x254>
 80a6dce:	1a37      	subs	r7, r6, r0
 80a6dd0:	4629      	mov	r1, r5
 80a6dd2:	463a      	mov	r2, r7
 80a6dd4:	9802      	ldr	r0, [sp, #8]
 80a6dd6:	f000 fc89 	bl	80a76ec <__lshift>
 80a6dda:	4605      	mov	r5, r0
 80a6ddc:	1be4      	subs	r4, r4, r7
 80a6dde:	f100 0a14 	add.w	sl, r0, #20
 80a6de2:	f04f 0900 	mov.w	r9, #0
 80a6de6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80a6dea:	429c      	cmp	r4, r3
 80a6dec:	dd08      	ble.n	80a6e00 <__gethex+0x272>
 80a6dee:	9802      	ldr	r0, [sp, #8]
 80a6df0:	4629      	mov	r1, r5
 80a6df2:	f000 fab6 	bl	80a7362 <_Bfree>
 80a6df6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80a6df8:	2300      	movs	r3, #0
 80a6dfa:	6013      	str	r3, [r2, #0]
 80a6dfc:	20a3      	movs	r0, #163	; 0xa3
 80a6dfe:	e0e2      	b.n	80a6fc6 <__gethex+0x438>
 80a6e00:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80a6e04:	4284      	cmp	r4, r0
 80a6e06:	da53      	bge.n	80a6eb0 <__gethex+0x322>
 80a6e08:	1b04      	subs	r4, r0, r4
 80a6e0a:	42a6      	cmp	r6, r4
 80a6e0c:	dc2e      	bgt.n	80a6e6c <__gethex+0x2de>
 80a6e0e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80a6e12:	2b02      	cmp	r3, #2
 80a6e14:	d01a      	beq.n	80a6e4c <__gethex+0x2be>
 80a6e16:	2b03      	cmp	r3, #3
 80a6e18:	d01c      	beq.n	80a6e54 <__gethex+0x2c6>
 80a6e1a:	2b01      	cmp	r3, #1
 80a6e1c:	d11d      	bne.n	80a6e5a <__gethex+0x2cc>
 80a6e1e:	42a6      	cmp	r6, r4
 80a6e20:	d11b      	bne.n	80a6e5a <__gethex+0x2cc>
 80a6e22:	2e01      	cmp	r6, #1
 80a6e24:	dc0b      	bgt.n	80a6e3e <__gethex+0x2b0>
 80a6e26:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80a6e2a:	9a06      	ldr	r2, [sp, #24]
 80a6e2c:	2062      	movs	r0, #98	; 0x62
 80a6e2e:	6013      	str	r3, [r2, #0]
 80a6e30:	2301      	movs	r3, #1
 80a6e32:	612b      	str	r3, [r5, #16]
 80a6e34:	f8ca 3000 	str.w	r3, [sl]
 80a6e38:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80a6e3a:	601d      	str	r5, [r3, #0]
 80a6e3c:	e0c3      	b.n	80a6fc6 <__gethex+0x438>
 80a6e3e:	1e71      	subs	r1, r6, #1
 80a6e40:	4628      	mov	r0, r5
 80a6e42:	f000 fe20 	bl	80a7a86 <__any_on>
 80a6e46:	2800      	cmp	r0, #0
 80a6e48:	d1ed      	bne.n	80a6e26 <__gethex+0x298>
 80a6e4a:	e006      	b.n	80a6e5a <__gethex+0x2cc>
 80a6e4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a6e4e:	2b00      	cmp	r3, #0
 80a6e50:	d0e9      	beq.n	80a6e26 <__gethex+0x298>
 80a6e52:	e002      	b.n	80a6e5a <__gethex+0x2cc>
 80a6e54:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a6e56:	2b00      	cmp	r3, #0
 80a6e58:	d1e5      	bne.n	80a6e26 <__gethex+0x298>
 80a6e5a:	9802      	ldr	r0, [sp, #8]
 80a6e5c:	4629      	mov	r1, r5
 80a6e5e:	f000 fa80 	bl	80a7362 <_Bfree>
 80a6e62:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80a6e64:	2300      	movs	r3, #0
 80a6e66:	6013      	str	r3, [r2, #0]
 80a6e68:	2050      	movs	r0, #80	; 0x50
 80a6e6a:	e0ac      	b.n	80a6fc6 <__gethex+0x438>
 80a6e6c:	1e67      	subs	r7, r4, #1
 80a6e6e:	f1b9 0f00 	cmp.w	r9, #0
 80a6e72:	d106      	bne.n	80a6e82 <__gethex+0x2f4>
 80a6e74:	b13f      	cbz	r7, 80a6e86 <__gethex+0x2f8>
 80a6e76:	4639      	mov	r1, r7
 80a6e78:	4628      	mov	r0, r5
 80a6e7a:	f000 fe04 	bl	80a7a86 <__any_on>
 80a6e7e:	4681      	mov	r9, r0
 80a6e80:	e001      	b.n	80a6e86 <__gethex+0x2f8>
 80a6e82:	f04f 0901 	mov.w	r9, #1
 80a6e86:	117a      	asrs	r2, r7, #5
 80a6e88:	2301      	movs	r3, #1
 80a6e8a:	f007 071f 	and.w	r7, r7, #31
 80a6e8e:	fa03 f707 	lsl.w	r7, r3, r7
 80a6e92:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
 80a6e96:	4621      	mov	r1, r4
 80a6e98:	421f      	tst	r7, r3
 80a6e9a:	4628      	mov	r0, r5
 80a6e9c:	bf18      	it	ne
 80a6e9e:	f049 0902 	orrne.w	r9, r9, #2
 80a6ea2:	1b36      	subs	r6, r6, r4
 80a6ea4:	f7ff fe28 	bl	80a6af8 <rshift>
 80a6ea8:	2702      	movs	r7, #2
 80a6eaa:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80a6eae:	e000      	b.n	80a6eb2 <__gethex+0x324>
 80a6eb0:	2701      	movs	r7, #1
 80a6eb2:	f1b9 0f00 	cmp.w	r9, #0
 80a6eb6:	f000 8081 	beq.w	80a6fbc <__gethex+0x42e>
 80a6eba:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80a6ebe:	2b02      	cmp	r3, #2
 80a6ec0:	d00e      	beq.n	80a6ee0 <__gethex+0x352>
 80a6ec2:	2b03      	cmp	r3, #3
 80a6ec4:	d010      	beq.n	80a6ee8 <__gethex+0x35a>
 80a6ec6:	2b01      	cmp	r3, #1
 80a6ec8:	d176      	bne.n	80a6fb8 <__gethex+0x42a>
 80a6eca:	f019 0f02 	tst.w	r9, #2
 80a6ece:	d073      	beq.n	80a6fb8 <__gethex+0x42a>
 80a6ed0:	f8da 0000 	ldr.w	r0, [sl]
 80a6ed4:	ea49 0900 	orr.w	r9, r9, r0
 80a6ed8:	f019 0f01 	tst.w	r9, #1
 80a6edc:	d107      	bne.n	80a6eee <__gethex+0x360>
 80a6ede:	e06b      	b.n	80a6fb8 <__gethex+0x42a>
 80a6ee0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a6ee2:	f1c3 0301 	rsb	r3, r3, #1
 80a6ee6:	9315      	str	r3, [sp, #84]	; 0x54
 80a6ee8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a6eea:	2b00      	cmp	r3, #0
 80a6eec:	d064      	beq.n	80a6fb8 <__gethex+0x42a>
 80a6eee:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80a6ef2:	f105 0314 	add.w	r3, r5, #20
 80a6ef6:	ea4f 098a 	mov.w	r9, sl, lsl #2
 80a6efa:	eb03 0109 	add.w	r1, r3, r9
 80a6efe:	2000      	movs	r0, #0
 80a6f00:	681a      	ldr	r2, [r3, #0]
 80a6f02:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80a6f06:	d002      	beq.n	80a6f0e <__gethex+0x380>
 80a6f08:	3201      	adds	r2, #1
 80a6f0a:	601a      	str	r2, [r3, #0]
 80a6f0c:	e020      	b.n	80a6f50 <__gethex+0x3c2>
 80a6f0e:	f843 0b04 	str.w	r0, [r3], #4
 80a6f12:	4299      	cmp	r1, r3
 80a6f14:	d8f4      	bhi.n	80a6f00 <__gethex+0x372>
 80a6f16:	68ab      	ldr	r3, [r5, #8]
 80a6f18:	459a      	cmp	sl, r3
 80a6f1a:	db12      	blt.n	80a6f42 <__gethex+0x3b4>
 80a6f1c:	6869      	ldr	r1, [r5, #4]
 80a6f1e:	9802      	ldr	r0, [sp, #8]
 80a6f20:	3101      	adds	r1, #1
 80a6f22:	f000 f9e9 	bl	80a72f8 <_Balloc>
 80a6f26:	4683      	mov	fp, r0
 80a6f28:	692a      	ldr	r2, [r5, #16]
 80a6f2a:	f105 010c 	add.w	r1, r5, #12
 80a6f2e:	3202      	adds	r2, #2
 80a6f30:	0092      	lsls	r2, r2, #2
 80a6f32:	300c      	adds	r0, #12
 80a6f34:	f7fd fec0 	bl	80a4cb8 <memcpy>
 80a6f38:	4629      	mov	r1, r5
 80a6f3a:	9802      	ldr	r0, [sp, #8]
 80a6f3c:	f000 fa11 	bl	80a7362 <_Bfree>
 80a6f40:	465d      	mov	r5, fp
 80a6f42:	692b      	ldr	r3, [r5, #16]
 80a6f44:	1c5a      	adds	r2, r3, #1
 80a6f46:	612a      	str	r2, [r5, #16]
 80a6f48:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80a6f4c:	2201      	movs	r2, #1
 80a6f4e:	615a      	str	r2, [r3, #20]
 80a6f50:	2f02      	cmp	r7, #2
 80a6f52:	f105 0214 	add.w	r2, r5, #20
 80a6f56:	d111      	bne.n	80a6f7c <__gethex+0x3ee>
 80a6f58:	f8d8 3000 	ldr.w	r3, [r8]
 80a6f5c:	3b01      	subs	r3, #1
 80a6f5e:	429e      	cmp	r6, r3
 80a6f60:	d127      	bne.n	80a6fb2 <__gethex+0x424>
 80a6f62:	1171      	asrs	r1, r6, #5
 80a6f64:	2301      	movs	r3, #1
 80a6f66:	f006 061f 	and.w	r6, r6, #31
 80a6f6a:	fa03 f606 	lsl.w	r6, r3, r6
 80a6f6e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80a6f72:	421e      	tst	r6, r3
 80a6f74:	bf0c      	ite	eq
 80a6f76:	2702      	moveq	r7, #2
 80a6f78:	2701      	movne	r7, #1
 80a6f7a:	e01a      	b.n	80a6fb2 <__gethex+0x424>
 80a6f7c:	692b      	ldr	r3, [r5, #16]
 80a6f7e:	459a      	cmp	sl, r3
 80a6f80:	da0a      	bge.n	80a6f98 <__gethex+0x40a>
 80a6f82:	2101      	movs	r1, #1
 80a6f84:	4628      	mov	r0, r5
 80a6f86:	f7ff fdb7 	bl	80a6af8 <rshift>
 80a6f8a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80a6f8e:	3401      	adds	r4, #1
 80a6f90:	429c      	cmp	r4, r3
 80a6f92:	f73f af2c 	bgt.w	80a6dee <__gethex+0x260>
 80a6f96:	e00b      	b.n	80a6fb0 <__gethex+0x422>
 80a6f98:	f016 061f 	ands.w	r6, r6, #31
 80a6f9c:	d008      	beq.n	80a6fb0 <__gethex+0x422>
 80a6f9e:	4491      	add	r9, r2
 80a6fa0:	f859 0c04 	ldr.w	r0, [r9, #-4]
 80a6fa4:	f000 fa6d 	bl	80a7482 <__hi0bits>
 80a6fa8:	f1c6 0620 	rsb	r6, r6, #32
 80a6fac:	42b0      	cmp	r0, r6
 80a6fae:	dbe8      	blt.n	80a6f82 <__gethex+0x3f4>
 80a6fb0:	2701      	movs	r7, #1
 80a6fb2:	f047 0720 	orr.w	r7, r7, #32
 80a6fb6:	e001      	b.n	80a6fbc <__gethex+0x42e>
 80a6fb8:	f047 0710 	orr.w	r7, r7, #16
 80a6fbc:	4638      	mov	r0, r7
 80a6fbe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80a6fc0:	601d      	str	r5, [r3, #0]
 80a6fc2:	9b06      	ldr	r3, [sp, #24]
 80a6fc4:	601c      	str	r4, [r3, #0]
 80a6fc6:	b00b      	add	sp, #44	; 0x2c
 80a6fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a6fcc <L_shift>:
 80a6fcc:	f1c2 0208 	rsb	r2, r2, #8
 80a6fd0:	0092      	lsls	r2, r2, #2
 80a6fd2:	b570      	push	{r4, r5, r6, lr}
 80a6fd4:	f1c2 0620 	rsb	r6, r2, #32
 80a6fd8:	6843      	ldr	r3, [r0, #4]
 80a6fda:	6805      	ldr	r5, [r0, #0]
 80a6fdc:	fa03 f406 	lsl.w	r4, r3, r6
 80a6fe0:	432c      	orrs	r4, r5
 80a6fe2:	40d3      	lsrs	r3, r2
 80a6fe4:	6004      	str	r4, [r0, #0]
 80a6fe6:	f840 3f04 	str.w	r3, [r0, #4]!
 80a6fea:	4288      	cmp	r0, r1
 80a6fec:	d3f4      	bcc.n	80a6fd8 <L_shift+0xc>
 80a6fee:	bd70      	pop	{r4, r5, r6, pc}

080a6ff0 <__match>:
 80a6ff0:	b530      	push	{r4, r5, lr}
 80a6ff2:	6803      	ldr	r3, [r0, #0]
 80a6ff4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a6ff8:	3301      	adds	r3, #1
 80a6ffa:	b14c      	cbz	r4, 80a7010 <__match+0x20>
 80a6ffc:	781a      	ldrb	r2, [r3, #0]
 80a6ffe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80a7002:	2d19      	cmp	r5, #25
 80a7004:	bf98      	it	ls
 80a7006:	3220      	addls	r2, #32
 80a7008:	42a2      	cmp	r2, r4
 80a700a:	d0f3      	beq.n	80a6ff4 <__match+0x4>
 80a700c:	2000      	movs	r0, #0
 80a700e:	bd30      	pop	{r4, r5, pc}
 80a7010:	6003      	str	r3, [r0, #0]
 80a7012:	2001      	movs	r0, #1
 80a7014:	bd30      	pop	{r4, r5, pc}

080a7016 <__hexnan>:
 80a7016:	680b      	ldr	r3, [r1, #0]
 80a7018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a701c:	115e      	asrs	r6, r3, #5
 80a701e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80a7022:	f013 031f 	ands.w	r3, r3, #31
 80a7026:	bf18      	it	ne
 80a7028:	3604      	addne	r6, #4
 80a702a:	1f35      	subs	r5, r6, #4
 80a702c:	4617      	mov	r7, r2
 80a702e:	2200      	movs	r2, #0
 80a7030:	4682      	mov	sl, r0
 80a7032:	46a8      	mov	r8, r5
 80a7034:	462c      	mov	r4, r5
 80a7036:	4691      	mov	r9, r2
 80a7038:	b085      	sub	sp, #20
 80a703a:	f8d0 b000 	ldr.w	fp, [r0]
 80a703e:	9301      	str	r3, [sp, #4]
 80a7040:	f846 2c04 	str.w	r2, [r6, #-4]
 80a7044:	9200      	str	r2, [sp, #0]
 80a7046:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
 80a704a:	2900      	cmp	r1, #0
 80a704c:	d03c      	beq.n	80a70c8 <__hexnan+0xb2>
 80a704e:	4608      	mov	r0, r1
 80a7050:	9203      	str	r2, [sp, #12]
 80a7052:	9102      	str	r1, [sp, #8]
 80a7054:	f7ff fd86 	bl	80a6b64 <__hexdig_fun>
 80a7058:	9a03      	ldr	r2, [sp, #12]
 80a705a:	bb00      	cbnz	r0, 80a709e <__hexnan+0x88>
 80a705c:	9902      	ldr	r1, [sp, #8]
 80a705e:	2920      	cmp	r1, #32
 80a7060:	d816      	bhi.n	80a7090 <__hexnan+0x7a>
 80a7062:	9b00      	ldr	r3, [sp, #0]
 80a7064:	4599      	cmp	r9, r3
 80a7066:	ddee      	ble.n	80a7046 <__hexnan+0x30>
 80a7068:	4544      	cmp	r4, r8
 80a706a:	d205      	bcs.n	80a7078 <__hexnan+0x62>
 80a706c:	2a07      	cmp	r2, #7
 80a706e:	dc03      	bgt.n	80a7078 <__hexnan+0x62>
 80a7070:	4641      	mov	r1, r8
 80a7072:	4620      	mov	r0, r4
 80a7074:	f7ff ffaa 	bl	80a6fcc <L_shift>
 80a7078:	42bc      	cmp	r4, r7
 80a707a:	d923      	bls.n	80a70c4 <__hexnan+0xae>
 80a707c:	2300      	movs	r3, #0
 80a707e:	f1a4 0804 	sub.w	r8, r4, #4
 80a7082:	f844 3c04 	str.w	r3, [r4, #-4]
 80a7086:	f8cd 9000 	str.w	r9, [sp]
 80a708a:	4644      	mov	r4, r8
 80a708c:	461a      	mov	r2, r3
 80a708e:	e7da      	b.n	80a7046 <__hexnan+0x30>
 80a7090:	2929      	cmp	r1, #41	; 0x29
 80a7092:	d148      	bne.n	80a7126 <__hexnan+0x110>
 80a7094:	f10b 0301 	add.w	r3, fp, #1
 80a7098:	f8ca 3000 	str.w	r3, [sl]
 80a709c:	e014      	b.n	80a70c8 <__hexnan+0xb2>
 80a709e:	3201      	adds	r2, #1
 80a70a0:	2a08      	cmp	r2, #8
 80a70a2:	f109 0901 	add.w	r9, r9, #1
 80a70a6:	dd06      	ble.n	80a70b6 <__hexnan+0xa0>
 80a70a8:	42bc      	cmp	r4, r7
 80a70aa:	d9cc      	bls.n	80a7046 <__hexnan+0x30>
 80a70ac:	2300      	movs	r3, #0
 80a70ae:	f844 3c04 	str.w	r3, [r4, #-4]
 80a70b2:	2201      	movs	r2, #1
 80a70b4:	3c04      	subs	r4, #4
 80a70b6:	6821      	ldr	r1, [r4, #0]
 80a70b8:	f000 000f 	and.w	r0, r0, #15
 80a70bc:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 80a70c0:	6020      	str	r0, [r4, #0]
 80a70c2:	e7c0      	b.n	80a7046 <__hexnan+0x30>
 80a70c4:	2208      	movs	r2, #8
 80a70c6:	e7be      	b.n	80a7046 <__hexnan+0x30>
 80a70c8:	f1b9 0f00 	cmp.w	r9, #0
 80a70cc:	d02b      	beq.n	80a7126 <__hexnan+0x110>
 80a70ce:	4544      	cmp	r4, r8
 80a70d0:	d205      	bcs.n	80a70de <__hexnan+0xc8>
 80a70d2:	2a07      	cmp	r2, #7
 80a70d4:	dc03      	bgt.n	80a70de <__hexnan+0xc8>
 80a70d6:	4641      	mov	r1, r8
 80a70d8:	4620      	mov	r0, r4
 80a70da:	f7ff ff77 	bl	80a6fcc <L_shift>
 80a70de:	42bc      	cmp	r4, r7
 80a70e0:	d90c      	bls.n	80a70fc <__hexnan+0xe6>
 80a70e2:	463b      	mov	r3, r7
 80a70e4:	f854 2b04 	ldr.w	r2, [r4], #4
 80a70e8:	42a5      	cmp	r5, r4
 80a70ea:	f843 2b04 	str.w	r2, [r3], #4
 80a70ee:	d2f9      	bcs.n	80a70e4 <__hexnan+0xce>
 80a70f0:	2200      	movs	r2, #0
 80a70f2:	f843 2b04 	str.w	r2, [r3], #4
 80a70f6:	429d      	cmp	r5, r3
 80a70f8:	d2fb      	bcs.n	80a70f2 <__hexnan+0xdc>
 80a70fa:	e00b      	b.n	80a7114 <__hexnan+0xfe>
 80a70fc:	9b01      	ldr	r3, [sp, #4]
 80a70fe:	b14b      	cbz	r3, 80a7114 <__hexnan+0xfe>
 80a7100:	f1c3 0220 	rsb	r2, r3, #32
 80a7104:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a7108:	40d3      	lsrs	r3, r2
 80a710a:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80a710e:	4013      	ands	r3, r2
 80a7110:	f846 3c04 	str.w	r3, [r6, #-4]
 80a7114:	682b      	ldr	r3, [r5, #0]
 80a7116:	b943      	cbnz	r3, 80a712a <__hexnan+0x114>
 80a7118:	42bd      	cmp	r5, r7
 80a711a:	d102      	bne.n	80a7122 <__hexnan+0x10c>
 80a711c:	2301      	movs	r3, #1
 80a711e:	602b      	str	r3, [r5, #0]
 80a7120:	e003      	b.n	80a712a <__hexnan+0x114>
 80a7122:	3d04      	subs	r5, #4
 80a7124:	e7f6      	b.n	80a7114 <__hexnan+0xfe>
 80a7126:	2004      	movs	r0, #4
 80a7128:	e000      	b.n	80a712c <__hexnan+0x116>
 80a712a:	2005      	movs	r0, #5
 80a712c:	b005      	add	sp, #20
 80a712e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080a7134 <_findenv_r>:
 80a7134:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a7138:	4607      	mov	r7, r0
 80a713a:	468b      	mov	fp, r1
 80a713c:	4690      	mov	r8, r2
 80a713e:	f000 fcd2 	bl	80a7ae6 <__env_lock>
 80a7142:	4b19      	ldr	r3, [pc, #100]	; (80a71a8 <_findenv_r+0x74>)
 80a7144:	681d      	ldr	r5, [r3, #0]
 80a7146:	469a      	mov	sl, r3
 80a7148:	b13d      	cbz	r5, 80a715a <_findenv_r+0x26>
 80a714a:	465c      	mov	r4, fp
 80a714c:	4623      	mov	r3, r4
 80a714e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a7152:	b142      	cbz	r2, 80a7166 <_findenv_r+0x32>
 80a7154:	2a3d      	cmp	r2, #61	; 0x3d
 80a7156:	461c      	mov	r4, r3
 80a7158:	d1f8      	bne.n	80a714c <_findenv_r+0x18>
 80a715a:	4638      	mov	r0, r7
 80a715c:	f000 fcc4 	bl	80a7ae8 <__env_unlock>
 80a7160:	2000      	movs	r0, #0
 80a7162:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a7166:	ebcb 0404 	rsb	r4, fp, r4
 80a716a:	46a9      	mov	r9, r5
 80a716c:	f859 0b04 	ldr.w	r0, [r9], #4
 80a7170:	2800      	cmp	r0, #0
 80a7172:	d0f2      	beq.n	80a715a <_findenv_r+0x26>
 80a7174:	4622      	mov	r2, r4
 80a7176:	4659      	mov	r1, fp
 80a7178:	f7fe fb24 	bl	80a57c4 <strncmp>
 80a717c:	b988      	cbnz	r0, 80a71a2 <_findenv_r+0x6e>
 80a717e:	f859 3c04 	ldr.w	r3, [r9, #-4]
 80a7182:	191e      	adds	r6, r3, r4
 80a7184:	5d1b      	ldrb	r3, [r3, r4]
 80a7186:	2b3d      	cmp	r3, #61	; 0x3d
 80a7188:	d10b      	bne.n	80a71a2 <_findenv_r+0x6e>
 80a718a:	f8da 3000 	ldr.w	r3, [sl]
 80a718e:	4638      	mov	r0, r7
 80a7190:	1aed      	subs	r5, r5, r3
 80a7192:	10ad      	asrs	r5, r5, #2
 80a7194:	f8c8 5000 	str.w	r5, [r8]
 80a7198:	f000 fca6 	bl	80a7ae8 <__env_unlock>
 80a719c:	1c70      	adds	r0, r6, #1
 80a719e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a71a2:	464d      	mov	r5, r9
 80a71a4:	e7e1      	b.n	80a716a <_findenv_r+0x36>
 80a71a6:	bf00      	nop
 80a71a8:	20000470 	.word	0x20000470

080a71ac <_getenv_r>:
 80a71ac:	b507      	push	{r0, r1, r2, lr}
 80a71ae:	aa01      	add	r2, sp, #4
 80a71b0:	f7ff ffc0 	bl	80a7134 <_findenv_r>
 80a71b4:	b003      	add	sp, #12
 80a71b6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a71bc <__gettzinfo>:
 80a71bc:	4800      	ldr	r0, [pc, #0]	; (80a71c0 <__gettzinfo+0x4>)
 80a71be:	4770      	bx	lr
 80a71c0:	20000430 	.word	0x20000430

080a71c4 <gmtime_r>:
 80a71c4:	6802      	ldr	r2, [r0, #0]
 80a71c6:	4b46      	ldr	r3, [pc, #280]	; (80a72e0 <gmtime_r+0x11c>)
 80a71c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a71ca:	fb92 f4f3 	sdiv	r4, r2, r3
 80a71ce:	fb03 2214 	mls	r2, r3, r4, r2
 80a71d2:	2a00      	cmp	r2, #0
 80a71d4:	bfbc      	itt	lt
 80a71d6:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80a71da:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80a71de:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 80a71e2:	fb92 f3f0 	sdiv	r3, r2, r0
 80a71e6:	fb00 2213 	mls	r2, r0, r3, r2
 80a71ea:	f04f 003c 	mov.w	r0, #60	; 0x3c
 80a71ee:	608b      	str	r3, [r1, #8]
 80a71f0:	fb92 f3f0 	sdiv	r3, r2, r0
 80a71f4:	fb00 2213 	mls	r2, r0, r3, r2
 80a71f8:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
 80a71fc:	bfac      	ite	ge
 80a71fe:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
 80a7202:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
 80a7206:	604b      	str	r3, [r1, #4]
 80a7208:	600a      	str	r2, [r1, #0]
 80a720a:	2307      	movs	r3, #7
 80a720c:	1ce2      	adds	r2, r4, #3
 80a720e:	fb92 f3f3 	sdiv	r3, r2, r3
 80a7212:	4d34      	ldr	r5, [pc, #208]	; (80a72e4 <gmtime_r+0x120>)
 80a7214:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a7218:	fb94 f5f5 	sdiv	r5, r4, r5
 80a721c:	1ad3      	subs	r3, r2, r3
 80a721e:	f648 62ac 	movw	r2, #36524	; 0x8eac
 80a7222:	f240 57b4 	movw	r7, #1460	; 0x5b4
 80a7226:	618b      	str	r3, [r1, #24]
 80a7228:	4b2f      	ldr	r3, [pc, #188]	; (80a72e8 <gmtime_r+0x124>)
 80a722a:	4830      	ldr	r0, [pc, #192]	; (80a72ec <gmtime_r+0x128>)
 80a722c:	fb03 4405 	mla	r4, r3, r5, r4
 80a7230:	fbb4 f2f2 	udiv	r2, r4, r2
 80a7234:	fbb4 f3f7 	udiv	r3, r4, r7
 80a7238:	fbb4 f0f0 	udiv	r0, r4, r0
 80a723c:	4422      	add	r2, r4
 80a723e:	1ad2      	subs	r2, r2, r3
 80a7240:	f648 6694 	movw	r6, #36500	; 0x8e94
 80a7244:	1a13      	subs	r3, r2, r0
 80a7246:	f240 126d 	movw	r2, #365	; 0x16d
 80a724a:	fbb3 f6f6 	udiv	r6, r3, r6
 80a724e:	fbb3 f0f2 	udiv	r0, r3, r2
 80a7252:	fbb3 f3f7 	udiv	r3, r3, r7
 80a7256:	4434      	add	r4, r6
 80a7258:	1ae3      	subs	r3, r4, r3
 80a725a:	fb02 3310 	mls	r3, r2, r0, r3
 80a725e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80a7262:	2499      	movs	r4, #153	; 0x99
 80a7264:	3202      	adds	r2, #2
 80a7266:	fbb2 f2f4 	udiv	r2, r2, r4
 80a726a:	4354      	muls	r4, r2
 80a726c:	1ca6      	adds	r6, r4, #2
 80a726e:	2405      	movs	r4, #5
 80a7270:	fbb6 f4f4 	udiv	r4, r6, r4
 80a7274:	2a0a      	cmp	r2, #10
 80a7276:	bf34      	ite	cc
 80a7278:	2602      	movcc	r6, #2
 80a727a:	f06f 0609 	mvncs.w	r6, #9
 80a727e:	4416      	add	r6, r2
 80a7280:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a7284:	fb02 0505 	mla	r5, r2, r5, r0
 80a7288:	1c5f      	adds	r7, r3, #1
 80a728a:	2e01      	cmp	r6, #1
 80a728c:	bf98      	it	ls
 80a728e:	3501      	addls	r5, #1
 80a7290:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80a7294:	eba7 0704 	sub.w	r7, r7, r4
 80a7298:	d302      	bcc.n	80a72a0 <gmtime_r+0xdc>
 80a729a:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
 80a729e:	e014      	b.n	80a72ca <gmtime_r+0x106>
 80a72a0:	0782      	lsls	r2, r0, #30
 80a72a2:	d105      	bne.n	80a72b0 <gmtime_r+0xec>
 80a72a4:	2464      	movs	r4, #100	; 0x64
 80a72a6:	fbb0 f2f4 	udiv	r2, r0, r4
 80a72aa:	fb04 0212 	mls	r2, r4, r2, r0
 80a72ae:	b94a      	cbnz	r2, 80a72c4 <gmtime_r+0x100>
 80a72b0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a72b4:	fbb0 f4f2 	udiv	r4, r0, r2
 80a72b8:	fb02 0014 	mls	r0, r2, r4, r0
 80a72bc:	fab0 f280 	clz	r2, r0
 80a72c0:	0952      	lsrs	r2, r2, #5
 80a72c2:	e000      	b.n	80a72c6 <gmtime_r+0x102>
 80a72c4:	2201      	movs	r2, #1
 80a72c6:	333b      	adds	r3, #59	; 0x3b
 80a72c8:	441a      	add	r2, r3
 80a72ca:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 80a72ce:	2300      	movs	r3, #0
 80a72d0:	61ca      	str	r2, [r1, #28]
 80a72d2:	614d      	str	r5, [r1, #20]
 80a72d4:	610e      	str	r6, [r1, #16]
 80a72d6:	60cf      	str	r7, [r1, #12]
 80a72d8:	620b      	str	r3, [r1, #32]
 80a72da:	4608      	mov	r0, r1
 80a72dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a72de:	bf00      	nop
 80a72e0:	00015180 	.word	0x00015180
 80a72e4:	00023ab1 	.word	0x00023ab1
 80a72e8:	fffdc54f 	.word	0xfffdc54f
 80a72ec:	00023ab0 	.word	0x00023ab0

080a72f0 <labs>:
 80a72f0:	2800      	cmp	r0, #0
 80a72f2:	bfb8      	it	lt
 80a72f4:	4240      	neglt	r0, r0
 80a72f6:	4770      	bx	lr

080a72f8 <_Balloc>:
 80a72f8:	b570      	push	{r4, r5, r6, lr}
 80a72fa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80a72fc:	4604      	mov	r4, r0
 80a72fe:	460e      	mov	r6, r1
 80a7300:	b93d      	cbnz	r5, 80a7312 <_Balloc+0x1a>
 80a7302:	2010      	movs	r0, #16
 80a7304:	f7fa fcb8 	bl	80a1c78 <malloc>
 80a7308:	6260      	str	r0, [r4, #36]	; 0x24
 80a730a:	6045      	str	r5, [r0, #4]
 80a730c:	6085      	str	r5, [r0, #8]
 80a730e:	6005      	str	r5, [r0, #0]
 80a7310:	60c5      	str	r5, [r0, #12]
 80a7312:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80a7314:	68eb      	ldr	r3, [r5, #12]
 80a7316:	b143      	cbz	r3, 80a732a <_Balloc+0x32>
 80a7318:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80a731a:	68db      	ldr	r3, [r3, #12]
 80a731c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80a7320:	b178      	cbz	r0, 80a7342 <_Balloc+0x4a>
 80a7322:	6802      	ldr	r2, [r0, #0]
 80a7324:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80a7328:	e017      	b.n	80a735a <_Balloc+0x62>
 80a732a:	2221      	movs	r2, #33	; 0x21
 80a732c:	2104      	movs	r1, #4
 80a732e:	4620      	mov	r0, r4
 80a7330:	f000 fbcb 	bl	80a7aca <_calloc_r>
 80a7334:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80a7336:	60e8      	str	r0, [r5, #12]
 80a7338:	68db      	ldr	r3, [r3, #12]
 80a733a:	2b00      	cmp	r3, #0
 80a733c:	d1ec      	bne.n	80a7318 <_Balloc+0x20>
 80a733e:	2000      	movs	r0, #0
 80a7340:	bd70      	pop	{r4, r5, r6, pc}
 80a7342:	2101      	movs	r1, #1
 80a7344:	fa01 f506 	lsl.w	r5, r1, r6
 80a7348:	1d6a      	adds	r2, r5, #5
 80a734a:	0092      	lsls	r2, r2, #2
 80a734c:	4620      	mov	r0, r4
 80a734e:	f000 fbbc 	bl	80a7aca <_calloc_r>
 80a7352:	2800      	cmp	r0, #0
 80a7354:	d0f3      	beq.n	80a733e <_Balloc+0x46>
 80a7356:	6046      	str	r6, [r0, #4]
 80a7358:	6085      	str	r5, [r0, #8]
 80a735a:	2300      	movs	r3, #0
 80a735c:	6103      	str	r3, [r0, #16]
 80a735e:	60c3      	str	r3, [r0, #12]
 80a7360:	bd70      	pop	{r4, r5, r6, pc}

080a7362 <_Bfree>:
 80a7362:	b570      	push	{r4, r5, r6, lr}
 80a7364:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80a7366:	4606      	mov	r6, r0
 80a7368:	460d      	mov	r5, r1
 80a736a:	b93c      	cbnz	r4, 80a737c <_Bfree+0x1a>
 80a736c:	2010      	movs	r0, #16
 80a736e:	f7fa fc83 	bl	80a1c78 <malloc>
 80a7372:	6270      	str	r0, [r6, #36]	; 0x24
 80a7374:	6044      	str	r4, [r0, #4]
 80a7376:	6084      	str	r4, [r0, #8]
 80a7378:	6004      	str	r4, [r0, #0]
 80a737a:	60c4      	str	r4, [r0, #12]
 80a737c:	b13d      	cbz	r5, 80a738e <_Bfree+0x2c>
 80a737e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80a7380:	686a      	ldr	r2, [r5, #4]
 80a7382:	68db      	ldr	r3, [r3, #12]
 80a7384:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80a7388:	6029      	str	r1, [r5, #0]
 80a738a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80a738e:	bd70      	pop	{r4, r5, r6, pc}

080a7390 <__multadd>:
 80a7390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a7394:	4606      	mov	r6, r0
 80a7396:	460c      	mov	r4, r1
 80a7398:	690d      	ldr	r5, [r1, #16]
 80a739a:	461f      	mov	r7, r3
 80a739c:	f101 0e14 	add.w	lr, r1, #20
 80a73a0:	2300      	movs	r3, #0
 80a73a2:	f8de 0000 	ldr.w	r0, [lr]
 80a73a6:	3301      	adds	r3, #1
 80a73a8:	b281      	uxth	r1, r0
 80a73aa:	fb02 7101 	mla	r1, r2, r1, r7
 80a73ae:	0c00      	lsrs	r0, r0, #16
 80a73b0:	0c0f      	lsrs	r7, r1, #16
 80a73b2:	fb02 7000 	mla	r0, r2, r0, r7
 80a73b6:	b289      	uxth	r1, r1
 80a73b8:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80a73bc:	429d      	cmp	r5, r3
 80a73be:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80a73c2:	f84e 1b04 	str.w	r1, [lr], #4
 80a73c6:	dcec      	bgt.n	80a73a2 <__multadd+0x12>
 80a73c8:	b1d7      	cbz	r7, 80a7400 <__multadd+0x70>
 80a73ca:	68a3      	ldr	r3, [r4, #8]
 80a73cc:	429d      	cmp	r5, r3
 80a73ce:	db12      	blt.n	80a73f6 <__multadd+0x66>
 80a73d0:	6861      	ldr	r1, [r4, #4]
 80a73d2:	4630      	mov	r0, r6
 80a73d4:	3101      	adds	r1, #1
 80a73d6:	f7ff ff8f 	bl	80a72f8 <_Balloc>
 80a73da:	4680      	mov	r8, r0
 80a73dc:	6922      	ldr	r2, [r4, #16]
 80a73de:	f104 010c 	add.w	r1, r4, #12
 80a73e2:	3202      	adds	r2, #2
 80a73e4:	0092      	lsls	r2, r2, #2
 80a73e6:	300c      	adds	r0, #12
 80a73e8:	f7fd fc66 	bl	80a4cb8 <memcpy>
 80a73ec:	4621      	mov	r1, r4
 80a73ee:	4630      	mov	r0, r6
 80a73f0:	f7ff ffb7 	bl	80a7362 <_Bfree>
 80a73f4:	4644      	mov	r4, r8
 80a73f6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80a73fa:	3501      	adds	r5, #1
 80a73fc:	615f      	str	r7, [r3, #20]
 80a73fe:	6125      	str	r5, [r4, #16]
 80a7400:	4620      	mov	r0, r4
 80a7402:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a7406 <__s2b>:
 80a7406:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a740a:	4606      	mov	r6, r0
 80a740c:	4615      	mov	r5, r2
 80a740e:	461f      	mov	r7, r3
 80a7410:	2209      	movs	r2, #9
 80a7412:	3308      	adds	r3, #8
 80a7414:	460c      	mov	r4, r1
 80a7416:	fb93 f3f2 	sdiv	r3, r3, r2
 80a741a:	2100      	movs	r1, #0
 80a741c:	2201      	movs	r2, #1
 80a741e:	429a      	cmp	r2, r3
 80a7420:	da02      	bge.n	80a7428 <__s2b+0x22>
 80a7422:	0052      	lsls	r2, r2, #1
 80a7424:	3101      	adds	r1, #1
 80a7426:	e7fa      	b.n	80a741e <__s2b+0x18>
 80a7428:	4630      	mov	r0, r6
 80a742a:	f7ff ff65 	bl	80a72f8 <_Balloc>
 80a742e:	9b08      	ldr	r3, [sp, #32]
 80a7430:	2d09      	cmp	r5, #9
 80a7432:	6143      	str	r3, [r0, #20]
 80a7434:	f04f 0301 	mov.w	r3, #1
 80a7438:	6103      	str	r3, [r0, #16]
 80a743a:	dd11      	ble.n	80a7460 <__s2b+0x5a>
 80a743c:	f104 0809 	add.w	r8, r4, #9
 80a7440:	46c1      	mov	r9, r8
 80a7442:	442c      	add	r4, r5
 80a7444:	f819 3b01 	ldrb.w	r3, [r9], #1
 80a7448:	4601      	mov	r1, r0
 80a744a:	3b30      	subs	r3, #48	; 0x30
 80a744c:	220a      	movs	r2, #10
 80a744e:	4630      	mov	r0, r6
 80a7450:	f7ff ff9e 	bl	80a7390 <__multadd>
 80a7454:	45a1      	cmp	r9, r4
 80a7456:	d1f5      	bne.n	80a7444 <__s2b+0x3e>
 80a7458:	eb08 0405 	add.w	r4, r8, r5
 80a745c:	3c08      	subs	r4, #8
 80a745e:	e001      	b.n	80a7464 <__s2b+0x5e>
 80a7460:	340a      	adds	r4, #10
 80a7462:	2509      	movs	r5, #9
 80a7464:	1b2d      	subs	r5, r5, r4
 80a7466:	1963      	adds	r3, r4, r5
 80a7468:	429f      	cmp	r7, r3
 80a746a:	dd08      	ble.n	80a747e <__s2b+0x78>
 80a746c:	f814 3b01 	ldrb.w	r3, [r4], #1
 80a7470:	4601      	mov	r1, r0
 80a7472:	3b30      	subs	r3, #48	; 0x30
 80a7474:	220a      	movs	r2, #10
 80a7476:	4630      	mov	r0, r6
 80a7478:	f7ff ff8a 	bl	80a7390 <__multadd>
 80a747c:	e7f3      	b.n	80a7466 <__s2b+0x60>
 80a747e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080a7482 <__hi0bits>:
 80a7482:	0c03      	lsrs	r3, r0, #16
 80a7484:	041b      	lsls	r3, r3, #16
 80a7486:	b913      	cbnz	r3, 80a748e <__hi0bits+0xc>
 80a7488:	0400      	lsls	r0, r0, #16
 80a748a:	2310      	movs	r3, #16
 80a748c:	e000      	b.n	80a7490 <__hi0bits+0xe>
 80a748e:	2300      	movs	r3, #0
 80a7490:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80a7494:	bf04      	itt	eq
 80a7496:	0200      	lsleq	r0, r0, #8
 80a7498:	3308      	addeq	r3, #8
 80a749a:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80a749e:	bf04      	itt	eq
 80a74a0:	0100      	lsleq	r0, r0, #4
 80a74a2:	3304      	addeq	r3, #4
 80a74a4:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80a74a8:	bf04      	itt	eq
 80a74aa:	0080      	lsleq	r0, r0, #2
 80a74ac:	3302      	addeq	r3, #2
 80a74ae:	2800      	cmp	r0, #0
 80a74b0:	db03      	blt.n	80a74ba <__hi0bits+0x38>
 80a74b2:	0042      	lsls	r2, r0, #1
 80a74b4:	d503      	bpl.n	80a74be <__hi0bits+0x3c>
 80a74b6:	1c58      	adds	r0, r3, #1
 80a74b8:	4770      	bx	lr
 80a74ba:	4618      	mov	r0, r3
 80a74bc:	4770      	bx	lr
 80a74be:	2020      	movs	r0, #32
 80a74c0:	4770      	bx	lr

080a74c2 <__lo0bits>:
 80a74c2:	6803      	ldr	r3, [r0, #0]
 80a74c4:	f013 0207 	ands.w	r2, r3, #7
 80a74c8:	d00b      	beq.n	80a74e2 <__lo0bits+0x20>
 80a74ca:	07d9      	lsls	r1, r3, #31
 80a74cc:	d422      	bmi.n	80a7514 <__lo0bits+0x52>
 80a74ce:	079a      	lsls	r2, r3, #30
 80a74d0:	bf4b      	itete	mi
 80a74d2:	085b      	lsrmi	r3, r3, #1
 80a74d4:	089b      	lsrpl	r3, r3, #2
 80a74d6:	6003      	strmi	r3, [r0, #0]
 80a74d8:	6003      	strpl	r3, [r0, #0]
 80a74da:	bf4c      	ite	mi
 80a74dc:	2001      	movmi	r0, #1
 80a74de:	2002      	movpl	r0, #2
 80a74e0:	4770      	bx	lr
 80a74e2:	b299      	uxth	r1, r3
 80a74e4:	b909      	cbnz	r1, 80a74ea <__lo0bits+0x28>
 80a74e6:	0c1b      	lsrs	r3, r3, #16
 80a74e8:	2210      	movs	r2, #16
 80a74ea:	f013 0fff 	tst.w	r3, #255	; 0xff
 80a74ee:	bf04      	itt	eq
 80a74f0:	0a1b      	lsreq	r3, r3, #8
 80a74f2:	3208      	addeq	r2, #8
 80a74f4:	0719      	lsls	r1, r3, #28
 80a74f6:	bf04      	itt	eq
 80a74f8:	091b      	lsreq	r3, r3, #4
 80a74fa:	3204      	addeq	r2, #4
 80a74fc:	0799      	lsls	r1, r3, #30
 80a74fe:	bf04      	itt	eq
 80a7500:	089b      	lsreq	r3, r3, #2
 80a7502:	3202      	addeq	r2, #2
 80a7504:	07d9      	lsls	r1, r3, #31
 80a7506:	d402      	bmi.n	80a750e <__lo0bits+0x4c>
 80a7508:	085b      	lsrs	r3, r3, #1
 80a750a:	d005      	beq.n	80a7518 <__lo0bits+0x56>
 80a750c:	3201      	adds	r2, #1
 80a750e:	6003      	str	r3, [r0, #0]
 80a7510:	4610      	mov	r0, r2
 80a7512:	4770      	bx	lr
 80a7514:	2000      	movs	r0, #0
 80a7516:	4770      	bx	lr
 80a7518:	2020      	movs	r0, #32
 80a751a:	4770      	bx	lr

080a751c <__i2b>:
 80a751c:	b510      	push	{r4, lr}
 80a751e:	460c      	mov	r4, r1
 80a7520:	2101      	movs	r1, #1
 80a7522:	f7ff fee9 	bl	80a72f8 <_Balloc>
 80a7526:	2201      	movs	r2, #1
 80a7528:	6144      	str	r4, [r0, #20]
 80a752a:	6102      	str	r2, [r0, #16]
 80a752c:	bd10      	pop	{r4, pc}

080a752e <__multiply>:
 80a752e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a7532:	4614      	mov	r4, r2
 80a7534:	690a      	ldr	r2, [r1, #16]
 80a7536:	6923      	ldr	r3, [r4, #16]
 80a7538:	4688      	mov	r8, r1
 80a753a:	429a      	cmp	r2, r3
 80a753c:	bfbe      	ittt	lt
 80a753e:	460b      	movlt	r3, r1
 80a7540:	46a0      	movlt	r8, r4
 80a7542:	461c      	movlt	r4, r3
 80a7544:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80a7548:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80a754c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80a7550:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80a7554:	eb07 0609 	add.w	r6, r7, r9
 80a7558:	429e      	cmp	r6, r3
 80a755a:	bfc8      	it	gt
 80a755c:	3101      	addgt	r1, #1
 80a755e:	f7ff fecb 	bl	80a72f8 <_Balloc>
 80a7562:	f100 0514 	add.w	r5, r0, #20
 80a7566:	462b      	mov	r3, r5
 80a7568:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 80a756c:	2200      	movs	r2, #0
 80a756e:	4563      	cmp	r3, ip
 80a7570:	d202      	bcs.n	80a7578 <__multiply+0x4a>
 80a7572:	f843 2b04 	str.w	r2, [r3], #4
 80a7576:	e7fa      	b.n	80a756e <__multiply+0x40>
 80a7578:	f104 0214 	add.w	r2, r4, #20
 80a757c:	f108 0114 	add.w	r1, r8, #20
 80a7580:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80a7584:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80a7588:	9300      	str	r3, [sp, #0]
 80a758a:	9b00      	ldr	r3, [sp, #0]
 80a758c:	9201      	str	r2, [sp, #4]
 80a758e:	4293      	cmp	r3, r2
 80a7590:	d957      	bls.n	80a7642 <__multiply+0x114>
 80a7592:	f8b2 b000 	ldrh.w	fp, [r2]
 80a7596:	f1bb 0f00 	cmp.w	fp, #0
 80a759a:	d023      	beq.n	80a75e4 <__multiply+0xb6>
 80a759c:	4689      	mov	r9, r1
 80a759e:	46ae      	mov	lr, r5
 80a75a0:	f04f 0800 	mov.w	r8, #0
 80a75a4:	f859 4b04 	ldr.w	r4, [r9], #4
 80a75a8:	f8be a000 	ldrh.w	sl, [lr]
 80a75ac:	b2a3      	uxth	r3, r4
 80a75ae:	fb0b a303 	mla	r3, fp, r3, sl
 80a75b2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80a75b6:	f8de 4000 	ldr.w	r4, [lr]
 80a75ba:	4443      	add	r3, r8
 80a75bc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80a75c0:	fb0b 840a 	mla	r4, fp, sl, r8
 80a75c4:	46f2      	mov	sl, lr
 80a75c6:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80a75ca:	b29b      	uxth	r3, r3
 80a75cc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80a75d0:	454f      	cmp	r7, r9
 80a75d2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80a75d6:	f84a 3b04 	str.w	r3, [sl], #4
 80a75da:	d901      	bls.n	80a75e0 <__multiply+0xb2>
 80a75dc:	46d6      	mov	lr, sl
 80a75de:	e7e1      	b.n	80a75a4 <__multiply+0x76>
 80a75e0:	f8ce 8004 	str.w	r8, [lr, #4]
 80a75e4:	9b01      	ldr	r3, [sp, #4]
 80a75e6:	3204      	adds	r2, #4
 80a75e8:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80a75ec:	f1ba 0f00 	cmp.w	sl, #0
 80a75f0:	d021      	beq.n	80a7636 <__multiply+0x108>
 80a75f2:	462c      	mov	r4, r5
 80a75f4:	4689      	mov	r9, r1
 80a75f6:	682b      	ldr	r3, [r5, #0]
 80a75f8:	f04f 0800 	mov.w	r8, #0
 80a75fc:	f8b9 e000 	ldrh.w	lr, [r9]
 80a7600:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 80a7604:	b29b      	uxth	r3, r3
 80a7606:	fb0a be0e 	mla	lr, sl, lr, fp
 80a760a:	46a3      	mov	fp, r4
 80a760c:	44f0      	add	r8, lr
 80a760e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80a7612:	f84b 3b04 	str.w	r3, [fp], #4
 80a7616:	f859 3b04 	ldr.w	r3, [r9], #4
 80a761a:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 80a761e:	0c1b      	lsrs	r3, r3, #16
 80a7620:	fb0a e303 	mla	r3, sl, r3, lr
 80a7624:	454f      	cmp	r7, r9
 80a7626:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 80a762a:	ea4f 4813 	mov.w	r8, r3, lsr #16
 80a762e:	d901      	bls.n	80a7634 <__multiply+0x106>
 80a7630:	465c      	mov	r4, fp
 80a7632:	e7e3      	b.n	80a75fc <__multiply+0xce>
 80a7634:	6063      	str	r3, [r4, #4]
 80a7636:	3504      	adds	r5, #4
 80a7638:	e7a7      	b.n	80a758a <__multiply+0x5c>
 80a763a:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 80a763e:	b913      	cbnz	r3, 80a7646 <__multiply+0x118>
 80a7640:	3e01      	subs	r6, #1
 80a7642:	2e00      	cmp	r6, #0
 80a7644:	dcf9      	bgt.n	80a763a <__multiply+0x10c>
 80a7646:	6106      	str	r6, [r0, #16]
 80a7648:	b003      	add	sp, #12
 80a764a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080a7650 <__pow5mult>:
 80a7650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a7654:	4615      	mov	r5, r2
 80a7656:	f012 0203 	ands.w	r2, r2, #3
 80a765a:	4606      	mov	r6, r0
 80a765c:	460f      	mov	r7, r1
 80a765e:	d007      	beq.n	80a7670 <__pow5mult+0x20>
 80a7660:	4c21      	ldr	r4, [pc, #132]	; (80a76e8 <__pow5mult+0x98>)
 80a7662:	3a01      	subs	r2, #1
 80a7664:	2300      	movs	r3, #0
 80a7666:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80a766a:	f7ff fe91 	bl	80a7390 <__multadd>
 80a766e:	4607      	mov	r7, r0
 80a7670:	10ad      	asrs	r5, r5, #2
 80a7672:	d036      	beq.n	80a76e2 <__pow5mult+0x92>
 80a7674:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80a7676:	b93c      	cbnz	r4, 80a7688 <__pow5mult+0x38>
 80a7678:	2010      	movs	r0, #16
 80a767a:	f7fa fafd 	bl	80a1c78 <malloc>
 80a767e:	6270      	str	r0, [r6, #36]	; 0x24
 80a7680:	6044      	str	r4, [r0, #4]
 80a7682:	6084      	str	r4, [r0, #8]
 80a7684:	6004      	str	r4, [r0, #0]
 80a7686:	60c4      	str	r4, [r0, #12]
 80a7688:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80a768c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80a7690:	b94c      	cbnz	r4, 80a76a6 <__pow5mult+0x56>
 80a7692:	f240 2171 	movw	r1, #625	; 0x271
 80a7696:	4630      	mov	r0, r6
 80a7698:	f7ff ff40 	bl	80a751c <__i2b>
 80a769c:	4604      	mov	r4, r0
 80a769e:	2300      	movs	r3, #0
 80a76a0:	f8c8 0008 	str.w	r0, [r8, #8]
 80a76a4:	6003      	str	r3, [r0, #0]
 80a76a6:	f04f 0800 	mov.w	r8, #0
 80a76aa:	07eb      	lsls	r3, r5, #31
 80a76ac:	d50a      	bpl.n	80a76c4 <__pow5mult+0x74>
 80a76ae:	4639      	mov	r1, r7
 80a76b0:	4622      	mov	r2, r4
 80a76b2:	4630      	mov	r0, r6
 80a76b4:	f7ff ff3b 	bl	80a752e <__multiply>
 80a76b8:	4681      	mov	r9, r0
 80a76ba:	4639      	mov	r1, r7
 80a76bc:	4630      	mov	r0, r6
 80a76be:	f7ff fe50 	bl	80a7362 <_Bfree>
 80a76c2:	464f      	mov	r7, r9
 80a76c4:	106d      	asrs	r5, r5, #1
 80a76c6:	d00c      	beq.n	80a76e2 <__pow5mult+0x92>
 80a76c8:	6820      	ldr	r0, [r4, #0]
 80a76ca:	b108      	cbz	r0, 80a76d0 <__pow5mult+0x80>
 80a76cc:	4604      	mov	r4, r0
 80a76ce:	e7ec      	b.n	80a76aa <__pow5mult+0x5a>
 80a76d0:	4622      	mov	r2, r4
 80a76d2:	4621      	mov	r1, r4
 80a76d4:	4630      	mov	r0, r6
 80a76d6:	f7ff ff2a 	bl	80a752e <__multiply>
 80a76da:	6020      	str	r0, [r4, #0]
 80a76dc:	f8c0 8000 	str.w	r8, [r0]
 80a76e0:	e7f4      	b.n	80a76cc <__pow5mult+0x7c>
 80a76e2:	4638      	mov	r0, r7
 80a76e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a76e8:	080a8610 	.word	0x080a8610

080a76ec <__lshift>:
 80a76ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a76f0:	460c      	mov	r4, r1
 80a76f2:	4607      	mov	r7, r0
 80a76f4:	4691      	mov	r9, r2
 80a76f6:	6926      	ldr	r6, [r4, #16]
 80a76f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80a76fc:	4456      	add	r6, sl
 80a76fe:	6849      	ldr	r1, [r1, #4]
 80a7700:	68a3      	ldr	r3, [r4, #8]
 80a7702:	1c75      	adds	r5, r6, #1
 80a7704:	42ab      	cmp	r3, r5
 80a7706:	da02      	bge.n	80a770e <__lshift+0x22>
 80a7708:	3101      	adds	r1, #1
 80a770a:	005b      	lsls	r3, r3, #1
 80a770c:	e7fa      	b.n	80a7704 <__lshift+0x18>
 80a770e:	4638      	mov	r0, r7
 80a7710:	f7ff fdf2 	bl	80a72f8 <_Balloc>
 80a7714:	2300      	movs	r3, #0
 80a7716:	4680      	mov	r8, r0
 80a7718:	461a      	mov	r2, r3
 80a771a:	f100 0114 	add.w	r1, r0, #20
 80a771e:	4553      	cmp	r3, sl
 80a7720:	da03      	bge.n	80a772a <__lshift+0x3e>
 80a7722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80a7726:	3301      	adds	r3, #1
 80a7728:	e7f9      	b.n	80a771e <__lshift+0x32>
 80a772a:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 80a772e:	6920      	ldr	r0, [r4, #16]
 80a7730:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80a7734:	f019 091f 	ands.w	r9, r9, #31
 80a7738:	f104 0114 	add.w	r1, r4, #20
 80a773c:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 80a7740:	d014      	beq.n	80a776c <__lshift+0x80>
 80a7742:	f1c9 0c20 	rsb	ip, r9, #32
 80a7746:	2200      	movs	r2, #0
 80a7748:	6808      	ldr	r0, [r1, #0]
 80a774a:	469a      	mov	sl, r3
 80a774c:	fa00 f009 	lsl.w	r0, r0, r9
 80a7750:	4302      	orrs	r2, r0
 80a7752:	f843 2b04 	str.w	r2, [r3], #4
 80a7756:	f851 2b04 	ldr.w	r2, [r1], #4
 80a775a:	458e      	cmp	lr, r1
 80a775c:	fa22 f20c 	lsr.w	r2, r2, ip
 80a7760:	d8f2      	bhi.n	80a7748 <__lshift+0x5c>
 80a7762:	f8ca 2004 	str.w	r2, [sl, #4]
 80a7766:	b142      	cbz	r2, 80a777a <__lshift+0x8e>
 80a7768:	1cb5      	adds	r5, r6, #2
 80a776a:	e006      	b.n	80a777a <__lshift+0x8e>
 80a776c:	3b04      	subs	r3, #4
 80a776e:	f851 2b04 	ldr.w	r2, [r1], #4
 80a7772:	458e      	cmp	lr, r1
 80a7774:	f843 2f04 	str.w	r2, [r3, #4]!
 80a7778:	d8f9      	bhi.n	80a776e <__lshift+0x82>
 80a777a:	3d01      	subs	r5, #1
 80a777c:	4638      	mov	r0, r7
 80a777e:	f8c8 5010 	str.w	r5, [r8, #16]
 80a7782:	4621      	mov	r1, r4
 80a7784:	f7ff fded 	bl	80a7362 <_Bfree>
 80a7788:	4640      	mov	r0, r8
 80a778a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080a778e <__mcmp>:
 80a778e:	6903      	ldr	r3, [r0, #16]
 80a7790:	690a      	ldr	r2, [r1, #16]
 80a7792:	b510      	push	{r4, lr}
 80a7794:	1a9b      	subs	r3, r3, r2
 80a7796:	d111      	bne.n	80a77bc <__mcmp+0x2e>
 80a7798:	0092      	lsls	r2, r2, #2
 80a779a:	3014      	adds	r0, #20
 80a779c:	3114      	adds	r1, #20
 80a779e:	1883      	adds	r3, r0, r2
 80a77a0:	440a      	add	r2, r1
 80a77a2:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 80a77a6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80a77aa:	428c      	cmp	r4, r1
 80a77ac:	d002      	beq.n	80a77b4 <__mcmp+0x26>
 80a77ae:	d307      	bcc.n	80a77c0 <__mcmp+0x32>
 80a77b0:	2001      	movs	r0, #1
 80a77b2:	bd10      	pop	{r4, pc}
 80a77b4:	4298      	cmp	r0, r3
 80a77b6:	d3f4      	bcc.n	80a77a2 <__mcmp+0x14>
 80a77b8:	2000      	movs	r0, #0
 80a77ba:	bd10      	pop	{r4, pc}
 80a77bc:	4618      	mov	r0, r3
 80a77be:	bd10      	pop	{r4, pc}
 80a77c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a77c4:	bd10      	pop	{r4, pc}

080a77c6 <__mdiff>:
 80a77c6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a77ca:	460c      	mov	r4, r1
 80a77cc:	4607      	mov	r7, r0
 80a77ce:	4611      	mov	r1, r2
 80a77d0:	4620      	mov	r0, r4
 80a77d2:	4615      	mov	r5, r2
 80a77d4:	f7ff ffdb 	bl	80a778e <__mcmp>
 80a77d8:	1e06      	subs	r6, r0, #0
 80a77da:	d108      	bne.n	80a77ee <__mdiff+0x28>
 80a77dc:	4631      	mov	r1, r6
 80a77de:	4638      	mov	r0, r7
 80a77e0:	f7ff fd8a 	bl	80a72f8 <_Balloc>
 80a77e4:	2301      	movs	r3, #1
 80a77e6:	6103      	str	r3, [r0, #16]
 80a77e8:	6146      	str	r6, [r0, #20]
 80a77ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a77ee:	bfbc      	itt	lt
 80a77f0:	4623      	movlt	r3, r4
 80a77f2:	462c      	movlt	r4, r5
 80a77f4:	4638      	mov	r0, r7
 80a77f6:	6861      	ldr	r1, [r4, #4]
 80a77f8:	bfba      	itte	lt
 80a77fa:	461d      	movlt	r5, r3
 80a77fc:	2601      	movlt	r6, #1
 80a77fe:	2600      	movge	r6, #0
 80a7800:	f7ff fd7a 	bl	80a72f8 <_Balloc>
 80a7804:	692b      	ldr	r3, [r5, #16]
 80a7806:	60c6      	str	r6, [r0, #12]
 80a7808:	6926      	ldr	r6, [r4, #16]
 80a780a:	f105 0914 	add.w	r9, r5, #20
 80a780e:	f104 0114 	add.w	r1, r4, #20
 80a7812:	eb01 0786 	add.w	r7, r1, r6, lsl #2
 80a7816:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80a781a:	f100 0514 	add.w	r5, r0, #20
 80a781e:	f04f 0c00 	mov.w	ip, #0
 80a7822:	f851 2b04 	ldr.w	r2, [r1], #4
 80a7826:	f859 4b04 	ldr.w	r4, [r9], #4
 80a782a:	b293      	uxth	r3, r2
 80a782c:	449c      	add	ip, r3
 80a782e:	b2a3      	uxth	r3, r4
 80a7830:	0c24      	lsrs	r4, r4, #16
 80a7832:	ebc3 030c 	rsb	r3, r3, ip
 80a7836:	ebc4 4212 	rsb	r2, r4, r2, lsr #16
 80a783a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80a783e:	b29b      	uxth	r3, r3
 80a7840:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80a7844:	45c8      	cmp	r8, r9
 80a7846:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a784a:	468e      	mov	lr, r1
 80a784c:	f845 2b04 	str.w	r2, [r5], #4
 80a7850:	d8e7      	bhi.n	80a7822 <__mdiff+0x5c>
 80a7852:	45be      	cmp	lr, r7
 80a7854:	d20e      	bcs.n	80a7874 <__mdiff+0xae>
 80a7856:	f85e 1b04 	ldr.w	r1, [lr], #4
 80a785a:	b28a      	uxth	r2, r1
 80a785c:	4462      	add	r2, ip
 80a785e:	1413      	asrs	r3, r2, #16
 80a7860:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 80a7864:	b292      	uxth	r2, r2
 80a7866:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80a786a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80a786e:	f845 2b04 	str.w	r2, [r5], #4
 80a7872:	e7ee      	b.n	80a7852 <__mdiff+0x8c>
 80a7874:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80a7878:	b90b      	cbnz	r3, 80a787e <__mdiff+0xb8>
 80a787a:	3e01      	subs	r6, #1
 80a787c:	e7fa      	b.n	80a7874 <__mdiff+0xae>
 80a787e:	6106      	str	r6, [r0, #16]
 80a7880:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080a7884 <__ulp>:
 80a7884:	4b10      	ldr	r3, [pc, #64]	; (80a78c8 <__ulp+0x44>)
 80a7886:	400b      	ands	r3, r1
 80a7888:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80a788c:	2b00      	cmp	r3, #0
 80a788e:	dd02      	ble.n	80a7896 <__ulp+0x12>
 80a7890:	2000      	movs	r0, #0
 80a7892:	4619      	mov	r1, r3
 80a7894:	4770      	bx	lr
 80a7896:	425b      	negs	r3, r3
 80a7898:	151b      	asrs	r3, r3, #20
 80a789a:	2b13      	cmp	r3, #19
 80a789c:	f04f 0000 	mov.w	r0, #0
 80a78a0:	f04f 0100 	mov.w	r1, #0
 80a78a4:	dc04      	bgt.n	80a78b0 <__ulp+0x2c>
 80a78a6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80a78aa:	fa42 f103 	asr.w	r1, r2, r3
 80a78ae:	4770      	bx	lr
 80a78b0:	3b14      	subs	r3, #20
 80a78b2:	2b1e      	cmp	r3, #30
 80a78b4:	f04f 0201 	mov.w	r2, #1
 80a78b8:	bfce      	itee	gt
 80a78ba:	4613      	movgt	r3, r2
 80a78bc:	f1c3 031f 	rsble	r3, r3, #31
 80a78c0:	fa02 f303 	lslle.w	r3, r2, r3
 80a78c4:	4618      	mov	r0, r3
 80a78c6:	4770      	bx	lr
 80a78c8:	7ff00000 	.word	0x7ff00000

080a78cc <__b2d>:
 80a78cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a78ce:	6905      	ldr	r5, [r0, #16]
 80a78d0:	f100 0614 	add.w	r6, r0, #20
 80a78d4:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 80a78d8:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80a78dc:	1f2f      	subs	r7, r5, #4
 80a78de:	4620      	mov	r0, r4
 80a78e0:	f7ff fdcf 	bl	80a7482 <__hi0bits>
 80a78e4:	f1c0 0320 	rsb	r3, r0, #32
 80a78e8:	280a      	cmp	r0, #10
 80a78ea:	600b      	str	r3, [r1, #0]
 80a78ec:	dc14      	bgt.n	80a7918 <__b2d+0x4c>
 80a78ee:	f1c0 0e0b 	rsb	lr, r0, #11
 80a78f2:	fa24 f10e 	lsr.w	r1, r4, lr
 80a78f6:	42be      	cmp	r6, r7
 80a78f8:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 80a78fc:	bf34      	ite	cc
 80a78fe:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80a7902:	2100      	movcs	r1, #0
 80a7904:	3015      	adds	r0, #21
 80a7906:	fa04 f000 	lsl.w	r0, r4, r0
 80a790a:	fa21 f10e 	lsr.w	r1, r1, lr
 80a790e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80a7912:	ea40 0201 	orr.w	r2, r0, r1
 80a7916:	e023      	b.n	80a7960 <__b2d+0x94>
 80a7918:	42be      	cmp	r6, r7
 80a791a:	bf3a      	itte	cc
 80a791c:	f1a5 0708 	subcc.w	r7, r5, #8
 80a7920:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80a7924:	2100      	movcs	r1, #0
 80a7926:	380b      	subs	r0, #11
 80a7928:	d015      	beq.n	80a7956 <__b2d+0x8a>
 80a792a:	4084      	lsls	r4, r0
 80a792c:	f1c0 0520 	rsb	r5, r0, #32
 80a7930:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80a7934:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80a7938:	42b7      	cmp	r7, r6
 80a793a:	fa21 fe05 	lsr.w	lr, r1, r5
 80a793e:	ea44 030e 	orr.w	r3, r4, lr
 80a7942:	bf8c      	ite	hi
 80a7944:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
 80a7948:	2400      	movls	r4, #0
 80a794a:	fa01 f000 	lsl.w	r0, r1, r0
 80a794e:	40ec      	lsrs	r4, r5
 80a7950:	ea40 0204 	orr.w	r2, r0, r4
 80a7954:	e004      	b.n	80a7960 <__b2d+0x94>
 80a7956:	460a      	mov	r2, r1
 80a7958:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80a795c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80a7960:	4610      	mov	r0, r2
 80a7962:	4619      	mov	r1, r3
 80a7964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a7966 <__d2b>:
 80a7966:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80a796a:	461c      	mov	r4, r3
 80a796c:	2101      	movs	r1, #1
 80a796e:	4690      	mov	r8, r2
 80a7970:	9e08      	ldr	r6, [sp, #32]
 80a7972:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80a7974:	f7ff fcc0 	bl	80a72f8 <_Balloc>
 80a7978:	f3c4 0213 	ubfx	r2, r4, #0, #20
 80a797c:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80a7980:	4607      	mov	r7, r0
 80a7982:	b10c      	cbz	r4, 80a7988 <__d2b+0x22>
 80a7984:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80a7988:	9201      	str	r2, [sp, #4]
 80a798a:	f1b8 0f00 	cmp.w	r8, #0
 80a798e:	d019      	beq.n	80a79c4 <__d2b+0x5e>
 80a7990:	a802      	add	r0, sp, #8
 80a7992:	f840 8d08 	str.w	r8, [r0, #-8]!
 80a7996:	f7ff fd94 	bl	80a74c2 <__lo0bits>
 80a799a:	9b00      	ldr	r3, [sp, #0]
 80a799c:	b148      	cbz	r0, 80a79b2 <__d2b+0x4c>
 80a799e:	9a01      	ldr	r2, [sp, #4]
 80a79a0:	f1c0 0120 	rsb	r1, r0, #32
 80a79a4:	fa02 f101 	lsl.w	r1, r2, r1
 80a79a8:	430b      	orrs	r3, r1
 80a79aa:	40c2      	lsrs	r2, r0
 80a79ac:	617b      	str	r3, [r7, #20]
 80a79ae:	9201      	str	r2, [sp, #4]
 80a79b0:	e000      	b.n	80a79b4 <__d2b+0x4e>
 80a79b2:	617b      	str	r3, [r7, #20]
 80a79b4:	9b01      	ldr	r3, [sp, #4]
 80a79b6:	2b00      	cmp	r3, #0
 80a79b8:	bf14      	ite	ne
 80a79ba:	2102      	movne	r1, #2
 80a79bc:	2101      	moveq	r1, #1
 80a79be:	61bb      	str	r3, [r7, #24]
 80a79c0:	6139      	str	r1, [r7, #16]
 80a79c2:	e007      	b.n	80a79d4 <__d2b+0x6e>
 80a79c4:	a801      	add	r0, sp, #4
 80a79c6:	f7ff fd7c 	bl	80a74c2 <__lo0bits>
 80a79ca:	9b01      	ldr	r3, [sp, #4]
 80a79cc:	2101      	movs	r1, #1
 80a79ce:	617b      	str	r3, [r7, #20]
 80a79d0:	6139      	str	r1, [r7, #16]
 80a79d2:	3020      	adds	r0, #32
 80a79d4:	b134      	cbz	r4, 80a79e4 <__d2b+0x7e>
 80a79d6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80a79da:	4404      	add	r4, r0
 80a79dc:	6034      	str	r4, [r6, #0]
 80a79de:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80a79e2:	e009      	b.n	80a79f8 <__d2b+0x92>
 80a79e4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80a79e8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80a79ec:	6030      	str	r0, [r6, #0]
 80a79ee:	6918      	ldr	r0, [r3, #16]
 80a79f0:	f7ff fd47 	bl	80a7482 <__hi0bits>
 80a79f4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80a79f8:	6028      	str	r0, [r5, #0]
 80a79fa:	4638      	mov	r0, r7
 80a79fc:	b002      	add	sp, #8
 80a79fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a7a02 <__ratio>:
 80a7a02:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80a7a06:	4688      	mov	r8, r1
 80a7a08:	4669      	mov	r1, sp
 80a7a0a:	4681      	mov	r9, r0
 80a7a0c:	f7ff ff5e 	bl	80a78cc <__b2d>
 80a7a10:	460d      	mov	r5, r1
 80a7a12:	4604      	mov	r4, r0
 80a7a14:	a901      	add	r1, sp, #4
 80a7a16:	4640      	mov	r0, r8
 80a7a18:	f7ff ff58 	bl	80a78cc <__b2d>
 80a7a1c:	460f      	mov	r7, r1
 80a7a1e:	4606      	mov	r6, r0
 80a7a20:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80a7a24:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80a7a28:	4620      	mov	r0, r4
 80a7a2a:	1a9a      	subs	r2, r3, r2
 80a7a2c:	e89d 000a 	ldmia.w	sp, {r1, r3}
 80a7a30:	1ac9      	subs	r1, r1, r3
 80a7a32:	eb01 1342 	add.w	r3, r1, r2, lsl #5
 80a7a36:	2b00      	cmp	r3, #0
 80a7a38:	bfcc      	ite	gt
 80a7a3a:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
 80a7a3e:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
 80a7a42:	4632      	mov	r2, r6
 80a7a44:	463b      	mov	r3, r7
 80a7a46:	4629      	mov	r1, r5
 80a7a48:	f7fc f932 	bl	80a3cb0 <__aeabi_ddiv>
 80a7a4c:	b003      	add	sp, #12
 80a7a4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080a7a52 <__copybits>:
 80a7a52:	3901      	subs	r1, #1
 80a7a54:	b510      	push	{r4, lr}
 80a7a56:	1149      	asrs	r1, r1, #5
 80a7a58:	6914      	ldr	r4, [r2, #16]
 80a7a5a:	3101      	adds	r1, #1
 80a7a5c:	f102 0314 	add.w	r3, r2, #20
 80a7a60:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80a7a64:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80a7a68:	42a3      	cmp	r3, r4
 80a7a6a:	4602      	mov	r2, r0
 80a7a6c:	d204      	bcs.n	80a7a78 <__copybits+0x26>
 80a7a6e:	f853 2b04 	ldr.w	r2, [r3], #4
 80a7a72:	f840 2b04 	str.w	r2, [r0], #4
 80a7a76:	e7f7      	b.n	80a7a68 <__copybits+0x16>
 80a7a78:	2300      	movs	r3, #0
 80a7a7a:	428a      	cmp	r2, r1
 80a7a7c:	d202      	bcs.n	80a7a84 <__copybits+0x32>
 80a7a7e:	f842 3b04 	str.w	r3, [r2], #4
 80a7a82:	e7fa      	b.n	80a7a7a <__copybits+0x28>
 80a7a84:	bd10      	pop	{r4, pc}

080a7a86 <__any_on>:
 80a7a86:	f100 0214 	add.w	r2, r0, #20
 80a7a8a:	6900      	ldr	r0, [r0, #16]
 80a7a8c:	114b      	asrs	r3, r1, #5
 80a7a8e:	4298      	cmp	r0, r3
 80a7a90:	b510      	push	{r4, lr}
 80a7a92:	db0c      	blt.n	80a7aae <__any_on+0x28>
 80a7a94:	dd0c      	ble.n	80a7ab0 <__any_on+0x2a>
 80a7a96:	f011 011f 	ands.w	r1, r1, #31
 80a7a9a:	d009      	beq.n	80a7ab0 <__any_on+0x2a>
 80a7a9c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80a7aa0:	fa24 f001 	lsr.w	r0, r4, r1
 80a7aa4:	fa00 f101 	lsl.w	r1, r0, r1
 80a7aa8:	428c      	cmp	r4, r1
 80a7aaa:	d10c      	bne.n	80a7ac6 <__any_on+0x40>
 80a7aac:	e000      	b.n	80a7ab0 <__any_on+0x2a>
 80a7aae:	4603      	mov	r3, r0
 80a7ab0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80a7ab4:	4293      	cmp	r3, r2
 80a7ab6:	d904      	bls.n	80a7ac2 <__any_on+0x3c>
 80a7ab8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80a7abc:	2900      	cmp	r1, #0
 80a7abe:	d0f9      	beq.n	80a7ab4 <__any_on+0x2e>
 80a7ac0:	e001      	b.n	80a7ac6 <__any_on+0x40>
 80a7ac2:	2000      	movs	r0, #0
 80a7ac4:	bd10      	pop	{r4, pc}
 80a7ac6:	2001      	movs	r0, #1
 80a7ac8:	bd10      	pop	{r4, pc}

080a7aca <_calloc_r>:
 80a7aca:	b538      	push	{r3, r4, r5, lr}
 80a7acc:	fb02 f401 	mul.w	r4, r2, r1
 80a7ad0:	4621      	mov	r1, r4
 80a7ad2:	f7fa f919 	bl	80a1d08 <_malloc_r>
 80a7ad6:	4605      	mov	r5, r0
 80a7ad8:	b118      	cbz	r0, 80a7ae2 <_calloc_r+0x18>
 80a7ada:	4622      	mov	r2, r4
 80a7adc:	2100      	movs	r1, #0
 80a7ade:	f7fd f8f6 	bl	80a4cce <memset>
 80a7ae2:	4628      	mov	r0, r5
 80a7ae4:	bd38      	pop	{r3, r4, r5, pc}

080a7ae6 <__env_lock>:
 80a7ae6:	4770      	bx	lr

080a7ae8 <__env_unlock>:
 80a7ae8:	4770      	bx	lr

080a7aea <link_code_end>:
	...

080a7aec <dynalib_user>:
 80a7aec:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a7afc:	0000 0000                                   ....

080a7b00 <_ZTV17LiquidCrystal_I2C>:
	...
 80a7b08:	02b9 080a 02bb 080a 0387 080a 2415 080a     .............$..
 80a7b18:	0000 0000 0040 0000 0014 0000 0054 0000     ....@.......T...
 80a7b28:	0600 514d 7349 7064 5b03 4544 5542 5d47     ..MQIsdp.[DEBUG]
 80a7b38:	4d20 5451 2054 4320 6e6f 656e 7463 7320      MQTT  Connect s
 80a7b48:	6375 6563 7373 000a 445b 4245 4755 205d     uccess..[DEBUG] 
 80a7b58:	514d 5454 2020 6f43 6e6e 6365 2074 6166     MQTT  Connect fa
 80a7b68:	6c69 202e 6f63 6564 3d20 5b20 6425 0a5d     il. code = [%d].
 80a7b78:	0000 0000                                   ....

080a7b7c <_ZTV5Timer>:
	...
 80a7b84:	0f11 080a 0f51 080a 0d8d 080a 7073 7261     ....Q.......spar
 80a7b94:	636b 696c 6e65 0074 6f68 6b6f 722d 7365     kclient.hook-res
 80a7ba4:	6f70 736e 2f65 6567 5f74 5344 0054 6f68     ponse/get_DST.ho
 80a7bb4:	6b6f 722d 7365 6f70 736e 2f65 756f 7374     ok-response/outs
 80a7bc4:	6469 5465 6d65 0070 2020 2020 6153 6e75     ideTemp.    Saun
 80a7bd4:	2061 6954 656d 0072 2020 2020 6556 7372     a Timer.    Vers
 80a7be4:	6f69 206e 2e30 0036 7962 4c20 6f69 2b20     ion 0.6.by Lio +
 80a7bf4:	4320 7268 7369 6974 6e61 2000 2020 2020      Christian.     
 80a7c04:	2020 2020 2020 2020 2020 2020 2020 2020                     
 80a7c14:	2020 0020 6566 6374 6968 676e 4420 5453        .fetching DST
 80a7c24:	6600 7465 6863 6e69 2067 6557 7461 6568     .fetching Weathe
 80a7c34:	0072 6573 2074 676b 6173 525f 4247 4457     r.set kgsa_RGBWD
 80a7c44:	6d69 656d 5f72 6f43 6f6c 2072 6f63 6f6c     immer_Color colo
 80a7c54:	2072 3031 0030 532f 7379 6574 2f6d 6866     r 100./System/fh
 80a7c64:	6d65 632f 6e6d 0064 6573 2074 676b 6173     em/cmnd.set kgsa
 80a7c74:	525f 4247 4457 6d69 656d 5f72 6944 206d     _RGBWDimmer_Dim 
 80a7c84:	6370 2074 0030 6554 706d 7265 7461 7275     pct 0.Temperatur
 80a7c94:	203a 2500 312e 0066 2520 4363 0020 532f     : .%.1f. %cC ./S
 80a7ca4:	7379 6574 2f6d 756f 7374 6469 2f65 6574     ystem/outside/te
 80a7cb4:	706d 2500 2061 6425 202e 6225 2520 0059     mp.%a %d. %b %Y.
 80a7cc4:	6573 2074 676b 6173 525f 4247 4457 6d69     set kgsa_RGBWDim
 80a7cd4:	656d 5f72 6944 206d 6370 2074 3035 4d00     mer_Dim pct 50.M
 80a7ce4:	6361 2068 6964 6863 6e20 6361 696b 2e67     ach dich nackig.
 80a7cf4:	2e2e 7300 7465 6b20 7367 5f61 4752 5742     ...set kgsa_RGBW
 80a7d04:	6944 6d6d 7265 415f 7475 206f 6f63 506c     Dimmer_Auto colP
 80a7d14:	6f72 7267 6d61 3420 5200 6965 206e 6e69     rogram 4.Rein in
 80a7d24:	6420 6569 2e2e 002e 2e2e 672e 7475 2065      die.......gute 
 80a7d34:	7453 6275 0065 6425 6425 253a 2564 0064     Stube.%d%d:%d%d.
 80a7d44:	6353 6f68 206e 6566 7472 6769 3f20 4e00     Schon fertig ?.N
 80a7d54:	544f 445f 4645 4e49 4445 2500 2048 4d25     OT_DEFINED.%H %M
 80a7d64:	2500 3a48 4d25 2a00 0020 0001 0002 0103     .%H:%M.* .......
 80a7d74:	0200 0000                                   ....

080a7d78 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a7d80:	1d45 080a 1d4b 080a 1d61 080a 1d57 080a     E...K...a...W...
 80a7d90:	1d47 080a                                   G...

080a7d94 <_ZTV7TwoWire>:
	...
 80a7d9c:	2279 080a 22c3 080a 229b 080a 227b 080a     y"..."..."..{"..
 80a7dac:	22a3 080a 22ab 080a 22b3 080a 22bb 080a     ."..."..."..."..

080a7dbc <_ZTV9IPAddress>:
	...
 80a7dc4:	2357 080a 2349 080a 234b 080a 6e6c 6600     W#..I#..K#..ln.f
 80a7dd4:	006e 6f63 6564 6400 7465 6961 006c 0a0d     n.code.detail...
 80a7de4:	2500 3130 7530 0020 205d 2c00 0020 2928     .%010u .] ., .()
 80a7df4:	203a 2000 005b 6f63 6564 3d20 0020 6925     : . [.code = .%i
 80a7e04:	6400 7465 6961 736c 3d20 0020 6162 6475     .details = .baud
 80a7e14:	5300 7265 6169 006c 5355 5342 7265 6169     .Serial.USBSeria
 80a7e24:	316c 7400 7079 0065 6170 6172 006d 6d63     l1.type.param.cm
 80a7e34:	0064 6469 6800 646e 7300 7274 006d 6966     d.id.hnd.strm.fi
 80a7e44:	746c 6c00 6c76 6100 6464 6148 646e 656c     lt.lvl.addHandle
 80a7e54:	0072 6572 6f6d 6576 6148 646e 656c 0072     r.removeHandler.
 80a7e64:	6e65 6d75 6148 646e 656c 7372 4a00 4f53     enumHandlers.JSO
 80a7e74:	534e 7274 6165 4c6d 676f 6148 646e 656c     NStreamLogHandle
 80a7e84:	0072 7061 0070 6f6e 656e 7400 6172 6563     r.app.none.trace
 80a7e94:	6900 666e 006f 6177 6e72 6500 7272 726f     .info.warn.error
 80a7ea4:	7000 6e61 6369 6100 6c6c 0000               .panic.all..

080a7eb0 <_ZTV8SPIClass>:
	...
 80a7eb8:	257d 080a 257f 080a                         }%...%..

080a7ec0 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
 80a7ec8:	2845 080a 284b 080a 296b 080a 2857 080a     E(..K(..k)..W(..
 80a7ed8:	2847 080a                                   G(..

080a7edc <_ZTV9TCPClient>:
	...
 80a7ee4:	04f5 080a 0529 080a 2801 080a 281b 080a     ....)....(...(..
 80a7ef4:	29e9 080a 2937 080a 2909 080a 2843 080a     .)..7)...)..C(..
 80a7f04:	2b1d 080a 285d 080a 2987 080a 2a65 080a     .+..](...)..e*..
 80a7f14:	2c6d 080a 2cbf 080a 282b 080a 2c31 080a     m,...,..+(..1,..
 80a7f24:	28e9 080a 6977 6972 676e 5400 5043 6c43     .(..wiring.TCPCl
 80a7f34:	6569 746e 7320 636f 656b 3d74 7825 2500     ient socket=%x.%
 80a7f44:	302b 6433 253a 3230 0075 5925 252d 2d6d     +03d:%02u.%Y-%m-
 80a7f54:	6425 2554 3a48 4d25 253a 2553 007a 7361     %dT%H:%M:%S%z.as
 80a7f64:	7463 6d69 0065 0000                         ctime...

080a7f6c <_ZTV11USARTSerial>:
	...
 80a7f74:	2f89 080a 2fad 080a 2fb9 080a 2415 080a     ./.../.../...$..
 80a7f84:	2f95 080a 2fa1 080a 2f9b 080a 2fa7 080a     ./.../.../.../..
 80a7f94:	2f8b 080a 2f8f 080a                         ./.../..

080a7f9c <_ZTV9USBSerial>:
	...
 80a7fa4:	3059 080a 309d 080a 3077 080a 2415 080a     Y0...0..w0...$..
 80a7fb4:	3071 080a 305b 080a 3063 080a 3097 080a     q0..[0..c0...0..
 80a7fc4:	306b 080a 3055 080a                         k0..U0..

080a7fcc <_ZTVN5spark9WiFiClassE>:
	...
 80a7fd4:	31c3 080a                                   .1..

080a7fd8 <_ZN5spark7NetworkE>:
 80a7fd8:	0a38 2000                                   8.. 

080a7fdc <day_name.4723>:
 80a7fdc:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
 80a7fec:	6972 6153 4a74                                   riSat

080a7ff1 <mon_name.4724>:
 80a7ff1:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
 80a8001:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
 80a8011:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
 80a8021:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
 80a8031:	6425 000a                                   %d..

080a8035 <_ctype_>:
 80a8035:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 80a8045:	2020 2020 2020 2020 2020 2020 2020 2020                     
 80a8055:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 80a8065:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 80a8075:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 80a8085:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 80a8095:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 80a80a5:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 80a80b5:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

080a8138 <__sf_fake_stdin>:
	...

080a8158 <__sf_fake_stdout>:
	...

080a8178 <__sf_fake_stderr>:
	...
 80a8198:	0043 4f50 4953 0058                         C.POSIX.

080a81a0 <__month_lengths>:
 80a81a0:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 80a81b0:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a81c0:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80a81d0:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 80a81e0:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a81f0:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80a8200:	7325 2e25 642a 2500 2573 2e30 642a 2b00     %s%.*d.%s%0.*d.+
 80a8210:	2d00 2500 6432 2500 322e 2f64 2e25 6432     .-.%2d.%.2d/%.2d
 80a8220:	252f 322e 0064 6c25 0075 2d59 6d25 252d     /%.2d.%lu.Y-%m-%
 80a8230:	0064 2a2e 0075 2e25 6433 2500 6c6c 0064     d..*u.%.3d.%lld.
 80a8240:	2e25 6432 253a 322e 3a64 2e25 6432 2500     %.2d:%.2d:%.2d.%
 80a8250:	302b 6c33 2564 322e 646c 0000               +03ld%.2ld..

080a825c <fpi.5342>:
 80a825c:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
 80a826c:	0000 0000 666e 6900 696e 7974 0000 0000     ....nf.inity....

080a827c <fpinan.5378>:
 80a827c:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
 80a828c:	0000 0000                                   ....

080a8290 <tinytens>:
 80a8290:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
 80a82a0:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
 80a82b0:	6f43 64ac 0628 1168 434c 545f 4d49 0045     Co.d(.h.LC_TIME.
 80a82c0:	614a 006e 6546 0062 614d 0072 7041 0072     Jan.Feb.Mar.Apr.
 80a82d0:	614d 0079 754a 006e 754a 006c 7541 0067     May.Jun.Jul.Aug.
 80a82e0:	6553 0070 634f 0074 6f4e 0076 6544 0063     Sep.Oct.Nov.Dec.
 80a82f0:	614a 756e 7261 0079 6546 7262 6175 7972     January.February
 80a8300:	4d00 7261 6863 4100 7270 6c69 4a00 6e75     .March.April.Jun
 80a8310:	0065 754a 796c 4100 6775 7375 0074 6553     e.July.August.Se
 80a8320:	7470 6d65 6562 0072 634f 6f74 6562 0072     ptember.October.
 80a8330:	6f4e 6576 626d 7265 4400 6365 6d65 6562     November.Decembe
 80a8340:	0072 7553 006e 6f4d 006e 7554 0065 6557     r.Sun.Mon.Tue.We
 80a8350:	0064 6854 0075 7246 0069 6153 0074 7553     d.Thu.Fri.Sat.Su
 80a8360:	646e 7961 4d00 6e6f 6164 0079 7554 7365     nday.Monday.Tues
 80a8370:	6164 0079 6557 6e64 7365 6164 0079 6854     day.Wednesday.Th
 80a8380:	7275 6473 7961 4600 6972 6164 0079 6153     ursday.Friday.Sa
 80a8390:	7574 6472 7961 2500 3a48 4d25 253a 0053     turday.%H:%M:%S.
 80a83a0:	6d25 252f 2f64 7925 2500 2061 6225 2520     %m/%d/%y.%a %b %
 80a83b0:	2065 4825 253a 3a4d 5325 2520 0059 4d41     e %H:%M:%S %Y.AM
 80a83c0:	5000 004d 6125 2520 2062 6525 2520 3a48     .PM.%a %b %e %H:
 80a83d0:	4d25 253a 2053 5a25 2520 0059 4925 253a     %M:%S %Z %Y.%I:%
 80a83e0:	3a4d 5325 2520 0070                         M:%S %p.

080a83e8 <_C_time_locale>:
 80a83e8:	82c0 080a 82c4 080a 82c8 080a 82cc 080a     ................
 80a83f8:	82d0 080a 82d4 080a 82d8 080a 82dc 080a     ................
 80a8408:	82e0 080a 82e4 080a 82e8 080a 82ec 080a     ................
 80a8418:	82f0 080a 82f8 080a 8301 080a 8307 080a     ................
 80a8428:	82d0 080a 830d 080a 8312 080a 8317 080a     ................
 80a8438:	831e 080a 8328 080a 8330 080a 8339 080a     ....(...0...9...
 80a8448:	8342 080a 8346 080a 834a 080a 834e 080a     B...F...J...N...
 80a8458:	8352 080a 8356 080a 835a 080a 835e 080a     R...V...Z...^...
 80a8468:	8365 080a 836c 080a 8374 080a 837e 080a     e...l...t...~...
 80a8478:	8387 080a 838e 080a 8397 080a 83a0 080a     ................
 80a8488:	83a9 080a 83be 080a 83c1 080a 83c4 080a     ................
 80a8498:	82f0 080a 82f8 080a 8301 080a 8307 080a     ................
 80a84a8:	82d0 080a 830d 080a 8312 080a 8317 080a     ................
 80a84b8:	831e 080a 8328 080a 8330 080a 8339 080a     ....(...0...9...
 80a84c8:	7e33 080a 83dc 080a 7de4 080a 7de4 080a     3~.......}...}..
 80a84d8:	7de4 080a 7de4 080a 7de4 080a 5a54 4700     .}...}...}..TZ.G
 80a84e8:	544d 2500 3031 5e5b 2d30 2c39 2d2b 255d     MT.%10[^0-9,+-]%
 80a84f8:	006e 254d 7568 6e25 252e 7568 6e25 252e     n.M%hu%n.%hu%n.%
 80a8508:	7568 6e25 2f00 6825 2575 3a6e 6825 2575     hu%n./%hu%n:%hu%
 80a8518:	3a6e 6825 2575 006e                         n:%hu%n.

080a8520 <__mprec_tens>:
 80a8520:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
 80a8530:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
 80a8540:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
 80a8550:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
 80a8560:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
 80a8570:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
 80a8580:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
 80a8590:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
 80a85a0:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
 80a85b0:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
 80a85c0:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
 80a85d0:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
 80a85e0:	9db4 79d9 7843 44ea                         ...yCx.D

080a85e8 <__mprec_bigtens>:
 80a85e8:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
 80a85f8:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
 80a8608:	bf3c 7f73 4fdd 7515                         <.s..O.u

080a8610 <p05.5385>:
 80a8610:	0005 0000 0019 0000 007d 0000               ........}...

080a861c <link_const_variable_data_end>:
 80a861c:	080a02b5 	.word	0x080a02b5
 80a8620:	080a04f1 	.word	0x080a04f1
 80a8624:	080a0bd9 	.word	0x080a0bd9
 80a8628:	080a0bdd 	.word	0x080a0bdd
 80a862c:	080a0cb5 	.word	0x080a0cb5
 80a8630:	080a1659 	.word	0x080a1659
 80a8634:	080a1867 	.word	0x080a1867
 80a8638:	080a2405 	.word	0x080a2405
 80a863c:	080a2561 	.word	0x080a2561
 80a8640:	080a27c1 	.word	0x080a27c1
 80a8644:	080a2f75 	.word	0x080a2f75
 80a8648:	080a31cd 	.word	0x080a31cd
 80a864c:	080a33d9 	.word	0x080a33d9
 80a8650:	080a3409 	.word	0x080a3409
 80a8654:	080a345d 	.word	0x080a345d
 80a8658:	080a3521 	.word	0x080a3521
 80a865c:	080a35a5 	.word	0x080a35a5
 80a8660:	080a3629 	.word	0x080a3629

080a8664 <link_constructors_end>:
	...
